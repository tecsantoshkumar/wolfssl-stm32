
walfssl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005544  08005544  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005544  08005544  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005544  08005544  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800554c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000068  080055b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080055b4  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0ef  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025df  00000000  00000000  0002c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0002f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebaf  00000000  00000000  0002f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7a3  00000000  00000000  0004e55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6c01  00000000  00000000  0005dd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b6c  00000000  00000000  00114904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00117470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004fe8 	.word	0x08004fe8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08004fe8 	.word	0x08004fe8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a03      	ldr	r2, [pc, #12]	; (8000258 <LL_IWDG_Enable+0x18>)
 800024c:	601a      	str	r2, [r3, #0]
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	0000cccc 	.word	0x0000cccc

0800025c <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4a03      	ldr	r2, [pc, #12]	; (8000274 <LL_IWDG_ReloadCounter+0x18>)
 8000268:	601a      	str	r2, [r3, #0]
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	0000aaaa 	.word	0x0000aaaa

08000278 <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a03      	ldr	r2, [pc, #12]	; (8000290 <LL_IWDG_EnableWriteAccess+0x18>)
 8000284:	601a      	str	r2, [r3, #0]
}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	b002      	add	sp, #8
 800028c:	bd80      	pop	{r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	00005555 	.word	0x00005555

08000294 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2207      	movs	r2, #7
 80002a2:	401a      	ands	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	605a      	str	r2, [r3, #4]
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b002      	add	sp, #8
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	051b      	lsls	r3, r3, #20
 80002be:	0d1a      	lsrs	r2, r3, #20
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	609a      	str	r2, [r3, #8]
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b002      	add	sp, #8
 80002ca:	bd80      	pop	{r7, pc}

080002cc <LL_IWDG_IsReady>:
  *         SR           WVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	2207      	movs	r2, #7
 80002da:	4013      	ands	r3, r2
 80002dc:	d101      	bne.n	80002e2 <LL_IWDG_IsReady+0x16>
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <LL_IWDG_IsReady+0x18>
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	0018      	movs	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b002      	add	sp, #8
 80002ea:	bd80      	pop	{r7, pc}

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4c2d      	ldr	r4, [pc, #180]	; (80003a4 <main+0xb8>)
 80002f0:	44a5      	add	sp, r4
 80002f2:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
     char* password = "reliancejio_secret_key";
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <main+0xbc>)
 80002f6:	4e2d      	ldr	r6, [pc, #180]	; (80003ac <main+0xc0>)
 80002f8:	19ba      	adds	r2, r7, r6
 80002fa:	6013      	str	r3, [r2, #0]
     char* salt = "reliancesalt_1";
 80002fc:	4b2c      	ldr	r3, [pc, #176]	; (80003b0 <main+0xc4>)
 80002fe:	2488      	movs	r4, #136	; 0x88
 8000300:	00e4      	lsls	r4, r4, #3
 8000302:	193a      	adds	r2, r7, r4
 8000304:	6013      	str	r3, [r2, #0]
    char* plaintext = "865577072655674";
 8000306:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <main+0xc8>)
 8000308:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <main+0xcc>)
 800030a:	18ba      	adds	r2, r7, r2
 800030c:	6013      	str	r3, [r2, #0]
    int iteration_count = 65536;
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	025b      	lsls	r3, r3, #9
 8000312:	2287      	movs	r2, #135	; 0x87
 8000314:	00d2      	lsls	r2, r2, #3
 8000316:	18b9      	adds	r1, r7, r2
 8000318:	600b      	str	r3, [r1, #0]
    
    byte key[KEY_SIZE];             // 256-bit key
    byte iv[AES_BLOCK_SIZE] = {0}; // Initialization Vector
 800031a:	4928      	ldr	r1, [pc, #160]	; (80003bc <main+0xd0>)
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	3304      	adds	r3, #4
 8000324:	220c      	movs	r2, #12
 8000326:	2100      	movs	r1, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f004 f8b0 	bl	800448e <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 f9e7 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f84b 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f8bd 	bl	80004b4 <MX_GPIO_Init>
  MX_IWDG_Init();
 800033a:	f000 f893 	bl	8000464 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  
   wolfCrypt_Init();
 800033e:	f003 fc29 	bl	8003b94 <wolfCrypt_Init>
   int rst = wc_PBKDF2(key, (byte*)password, strlen(password), (byte*)salt, strlen(salt), iteration_count, KEY_SIZE, WC_HASH_TYPE_SHA256);
 8000342:	19b9      	adds	r1, r7, r6
 8000344:	680b      	ldr	r3, [r1, #0]
 8000346:	0018      	movs	r0, r3
 8000348:	f7ff fedc 	bl	8000104 <strlen>
 800034c:	0003      	movs	r3, r0
 800034e:	001d      	movs	r5, r3
 8000350:	1939      	adds	r1, r7, r4
 8000352:	680b      	ldr	r3, [r1, #0]
 8000354:	0018      	movs	r0, r3
 8000356:	f7ff fed5 	bl	8000104 <strlen>
 800035a:	0003      	movs	r3, r0
 800035c:	001c      	movs	r4, r3
 800035e:	2388      	movs	r3, #136	; 0x88
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	18f9      	adds	r1, r7, r3
 8000364:	680a      	ldr	r2, [r1, #0]
 8000366:	19b9      	adds	r1, r7, r6
 8000368:	6809      	ldr	r1, [r1, #0]
 800036a:	4815      	ldr	r0, [pc, #84]	; (80003c0 <main+0xd4>)
 800036c:	1838      	adds	r0, r7, r0
 800036e:	2306      	movs	r3, #6
 8000370:	9303      	str	r3, [sp, #12]
 8000372:	2320      	movs	r3, #32
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	2387      	movs	r3, #135	; 0x87
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	9400      	str	r4, [sp, #0]
 8000382:	0013      	movs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	f002 fd3b 	bl	8002e00 <wc_PBKDF2>
 800038a:	0003      	movs	r3, r0
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <main+0xd8>)
 800038e:	18b9      	adds	r1, r7, r2
 8000390:	600b      	str	r3, [r1, #0]

   if (rst != 0)
 8000392:	18bb      	adds	r3, r7, r2
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <main+0xb6>
   {
        printf("Error deriving key\n");
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <main+0xdc>)
 800039c:	0018      	movs	r0, r3
 800039e:	f003 ff33 	bl	8004208 <puts>
 //   encrypt_string(password, strlen(password), salt, strlen(salt), iteration_count, plaintext, strlen(plaintext));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <main+0xb6>
 80003a4:	fffffba4 	.word	0xfffffba4
 80003a8:	08005000 	.word	0x08005000
 80003ac:	00000444 	.word	0x00000444
 80003b0:	08005018 	.word	0x08005018
 80003b4:	08005028 	.word	0x08005028
 80003b8:	0000043c 	.word	0x0000043c
 80003bc:	00000404 	.word	0x00000404
 80003c0:	00000414 	.word	0x00000414
 80003c4:	00000434 	.word	0x00000434
 80003c8:	08005038 	.word	0x08005038

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b095      	sub	sp, #84	; 0x54
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	2414      	movs	r4, #20
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	233c      	movs	r3, #60	; 0x3c
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f004 f856 	bl	800448e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	2310      	movs	r3, #16
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f004 f84f 	bl	800448e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fad3 	bl	80009a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80003fa:	193b      	adds	r3, r7, r4
 80003fc:	220a      	movs	r2, #10
 80003fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	193b      	adds	r3, r7, r4
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	0052      	lsls	r2, r2, #1
 8000406:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2240      	movs	r2, #64	; 0x40
 8000414:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2201      	movs	r2, #1
 800041a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	187b      	adds	r3, r7, r1
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fafb 	bl	8000a20 <HAL_RCC_OscConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800042e:	f000 f857 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2100      	movs	r1, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fe46 	bl	80010e0 <HAL_RCC_ClockConfig>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000458:	f000 f842 	bl	80004e0 <Error_Handler>
  }
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b015      	add	sp, #84	; 0x54
 8000462:	bd90      	pop	{r4, r7, pc}

08000464 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_IWDG_Init+0x48>)
 800046a:	0018      	movs	r0, r3
 800046c:	f7ff fee8 	bl	8000240 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_IWDG_Init+0x48>)
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ff00 	bl	8000278 <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_IWDG_Init+0x48>)
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff ff09 	bl	8000294 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <MX_IWDG_Init+0x4c>)
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_IWDG_Init+0x48>)
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f7ff ff11 	bl	80002b0 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_IWDG_Init+0x48>)
 8000492:	0018      	movs	r0, r3
 8000494:	f7ff ff1a 	bl	80002cc <LL_IWDG_IsReady>
 8000498:	0003      	movs	r3, r0
 800049a:	2b01      	cmp	r3, #1
 800049c:	d1f8      	bne.n	8000490 <MX_IWDG_Init+0x2c>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <MX_IWDG_Init+0x48>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff fedb 	bl	800025c <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40003000 	.word	0x40003000
 80004b0:	00000fff 	.word	0x00000fff

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_GPIO_Init+0x28>)
 80004bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_GPIO_Init+0x28>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_GPIO_Init+0x28>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>
	...

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_MspInit+0x4c>)
 80004f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <HAL_MspInit+0x4c>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	641a      	str	r2, [r3, #64]	; 0x40
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_MspInit+0x4c>)
 8000500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_MspInit+0x4c>)
 800050c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x4c>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0549      	lsls	r1, r1, #21
 8000514:	430a      	orrs	r2, r1
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <HAL_MspInit+0x4c>)
 800051a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	055b      	lsls	r3, r3, #21
 8000520:	4013      	ands	r3, r2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000526:	23c0      	movs	r3, #192	; 0xc0
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	0018      	movs	r0, r3
 800052c:	f000 f96e 	bl	800080c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f938 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b086      	sub	sp, #24
 800056e:	af00      	add	r7, sp, #0
 8000570:	60f8      	str	r0, [r7, #12]
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	e00a      	b.n	8000592 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057c:	e000      	b.n	8000580 <_read+0x16>
 800057e:	bf00      	nop
 8000580:	0001      	movs	r1, r0
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	60ba      	str	r2, [r7, #8]
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	3301      	adds	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbf0      	blt.n	800057c <_read+0x12>
  }

  return len;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	0018      	movs	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	b006      	add	sp, #24
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e009      	b.n	80005ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	60ba      	str	r2, [r7, #8]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	e000      	b.n	80005c4 <_write+0x20>
 80005c2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3301      	adds	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	dbf1      	blt.n	80005b6 <_write+0x12>
  }
  return len;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b006      	add	sp, #24
 80005da:	bd80      	pop	{r7, pc}

080005dc <_close>:

int _close(int file)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	425b      	negs	r3, r3
}
 80005e8:	0018      	movs	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	0192      	lsls	r2, r2, #6
 8000600:	605a      	str	r2, [r3, #4]
  return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <_isatty>:

int _isatty(int file)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000614:	2301      	movs	r3, #1
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}

0800061e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bd80      	pop	{r7, pc}

08000634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <_sbrk+0x5c>)
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_sbrk+0x60>)
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d102      	bne.n	8000656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <_sbrk+0x64>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <_sbrk+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <_sbrk+0x64>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	18d3      	adds	r3, r2, r3
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d207      	bcs.n	8000674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000664:	f003 ff7c 	bl	8004560 <__errno>
 8000668:	0003      	movs	r3, r0
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066e:	2301      	movs	r3, #1
 8000670:	425b      	negs	r3, r3
 8000672:	e009      	b.n	8000688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	18d2      	adds	r2, r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <_sbrk+0x64>)
 8000684:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b006      	add	sp, #24
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20024000 	.word	0x20024000
 8000694:	00000400 	.word	0x00000400
 8000698:	20000084 	.word	0x20000084
 800069c:	20000208 	.word	0x20000208

080006a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f7ff fff6 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f003 ff47 	bl	800456c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006de:	f7ff fe05 	bl	80002ec <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006f0:	0800554c 	.word	0x0800554c
  ldr r2, =_sbss
 80006f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006f8:	20000208 	.word	0x20000208

080006fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_COMP_IRQHandler>
	...

08000700 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <HAL_Init+0x3c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Init+0x3c>)
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	0049      	lsls	r1, r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071a:	2003      	movs	r0, #3
 800071c:	f000 f810 	bl	8000740 <HAL_InitTick>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d003      	beq.n	800072c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e001      	b.n	8000730 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fede 	bl	80004ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <HAL_InitTick+0x88>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d02b      	beq.n	80007b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_InitTick+0x8c>)
 800075a:	681c      	ldr	r4, [r3, #0]
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_InitTick+0x88>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	0019      	movs	r1, r3
 8000762:	23fa      	movs	r3, #250	; 0xfa
 8000764:	0098      	lsls	r0, r3, #2
 8000766:	f7ff fcdf 	bl	8000128 <__udivsi3>
 800076a:	0003      	movs	r3, r0
 800076c:	0019      	movs	r1, r3
 800076e:	0020      	movs	r0, r4
 8000770:	f7ff fcda 	bl	8000128 <__udivsi3>
 8000774:	0003      	movs	r3, r0
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f905 	bl	8000986 <HAL_SYSTICK_Config>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d112      	bne.n	80007a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d80a      	bhi.n	800079c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2200      	movs	r2, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8e4 	bl	800095c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_InitTick+0x90>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e00d      	b.n	80007b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e008      	b.n	80007b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a6:	230f      	movs	r3, #15
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	e003      	b.n	80007b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	781b      	ldrb	r3, [r3, #0]
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b005      	add	sp, #20
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	001a      	movs	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	18d2      	adds	r2, r2, r3
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000088 	.word	0x20000088

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	20000088 	.word	0x20000088

0800080c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800081a:	4013      	ands	r3, r2
 800081c:	0019      	movs	r1, r3
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40010000 	.word	0x40010000
 8000834:	fffff9ff 	.word	0xfffff9ff

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	0002      	movs	r2, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b7f      	cmp	r3, #127	; 0x7f
 800084c:	d828      	bhi.n	80008a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <__NVIC_SetPriority+0xd4>)
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	33c0      	adds	r3, #192	; 0xc0
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	589b      	ldr	r3, [r3, r2]
 800085e:	1dfa      	adds	r2, r7, #7
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	0011      	movs	r1, r2
 8000864:	2203      	movs	r2, #3
 8000866:	400a      	ands	r2, r1
 8000868:	00d2      	lsls	r2, r2, #3
 800086a:	21ff      	movs	r1, #255	; 0xff
 800086c:	4091      	lsls	r1, r2
 800086e:	000a      	movs	r2, r1
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	019b      	lsls	r3, r3, #6
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	401a      	ands	r2, r3
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	0018      	movs	r0, r3
 8000884:	2303      	movs	r3, #3
 8000886:	4003      	ands	r3, r0
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	481f      	ldr	r0, [pc, #124]	; (800090c <__NVIC_SetPriority+0xd4>)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b25b      	sxtb	r3, r3
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	430a      	orrs	r2, r1
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800089e:	e031      	b.n	8000904 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0019      	movs	r1, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	400b      	ands	r3, r1
 80008ac:	3b08      	subs	r3, #8
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3306      	adds	r3, #6
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	18d3      	adds	r3, r2, r3
 80008b6:	3304      	adds	r3, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	1dfa      	adds	r2, r7, #7
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	0011      	movs	r1, r2
 80008c0:	2203      	movs	r2, #3
 80008c2:	400a      	ands	r2, r1
 80008c4:	00d2      	lsls	r2, r2, #3
 80008c6:	21ff      	movs	r1, #255	; 0xff
 80008c8:	4091      	lsls	r1, r2
 80008ca:	000a      	movs	r2, r1
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	401a      	ands	r2, r3
 80008d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	22ff      	movs	r2, #255	; 0xff
 80008d8:	401a      	ands	r2, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	2303      	movs	r3, #3
 80008e2:	4003      	ands	r3, r0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001c      	movs	r4, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	4023      	ands	r3, r4
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	430a      	orrs	r2, r1
 80008fa:	3306      	adds	r3, #6
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	18c3      	adds	r3, r0, r3
 8000900:	3304      	adds	r3, #4
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b003      	add	sp, #12
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	045b      	lsls	r3, r3, #17
 8000924:	429a      	cmp	r2, r3
 8000926:	d301      	bcc.n	800092c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000928:	2301      	movs	r3, #1
 800092a:	e010      	b.n	800094e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <SysTick_Config+0x44>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	3a01      	subs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2103      	movs	r1, #3
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ff7c 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x44>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	210f      	movs	r1, #15
 8000968:	187b      	adds	r3, r7, r1
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	187b      	adds	r3, r7, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b25b      	sxtb	r3, r3
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff5d 	bl	8000838 <__NVIC_SetPriority>
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ffbf 	bl	8000914 <SysTick_Config>
 8000996:	0003      	movs	r3, r0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}

080009a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	0019      	movs	r1, r3
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d11f      	bne.n	8000a04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	0013      	movs	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	189b      	adds	r3, r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4912      	ldr	r1, [pc, #72]	; (8000a1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fba8 	bl	8000128 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009de:	e008      	b.n	80009f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e001      	b.n	80009f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e009      	b.n	8000a06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	401a      	ands	r2, r3
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d0ed      	beq.n	80009e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	40007000 	.word	0x40007000
 8000a14:	fffff9ff 	.word	0xfffff9ff
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	000f4240 	.word	0x000f4240

08000a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	f000 fb50 	bl	80010d4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <HAL_RCC_OscConfig+0x20>
 8000a3e:	e07c      	b.n	8000b3a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a40:	4bc3      	ldr	r3, [pc, #780]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2238      	movs	r2, #56	; 0x38
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a4a:	4bc1      	ldr	r3, [pc, #772]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	4013      	ands	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2b10      	cmp	r3, #16
 8000a58:	d102      	bne.n	8000a60 <HAL_RCC_OscConfig+0x40>
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d002      	beq.n	8000a66 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	d10b      	bne.n	8000a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a66:	4bba      	ldr	r3, [pc, #744]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	029b      	lsls	r3, r3, #10
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d062      	beq.n	8000b38 <HAL_RCC_OscConfig+0x118>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d15e      	bne.n	8000b38 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e32a      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d107      	bne.n	8000a9a <HAL_RCC_OscConfig+0x7a>
 8000a8a:	4bb1      	ldr	r3, [pc, #708]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0249      	lsls	r1, r1, #9
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e020      	b.n	8000adc <HAL_RCC_OscConfig+0xbc>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	02db      	lsls	r3, r3, #11
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d10e      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xa4>
 8000aa6:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4ba9      	ldr	r3, [pc, #676]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	02c9      	lsls	r1, r1, #11
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	4ba6      	ldr	r3, [pc, #664]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4ba5      	ldr	r3, [pc, #660]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	0249      	lsls	r1, r1, #9
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e00b      	b.n	8000adc <HAL_RCC_OscConfig+0xbc>
 8000ac4:	4ba2      	ldr	r3, [pc, #648]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4ba1      	ldr	r3, [pc, #644]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000aca:	49a2      	ldr	r1, [pc, #648]	; (8000d54 <HAL_RCC_OscConfig+0x334>)
 8000acc:	400a      	ands	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	4b9f      	ldr	r3, [pc, #636]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b9e      	ldr	r3, [pc, #632]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ad6:	49a0      	ldr	r1, [pc, #640]	; (8000d58 <HAL_RCC_OscConfig+0x338>)
 8000ad8:	400a      	ands	r2, r1
 8000ada:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d014      	beq.n	8000b0e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fe88 	bl	80007f8 <HAL_GetTick>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000aec:	e008      	b.n	8000b00 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aee:	f7ff fe83 	bl	80007f8 <HAL_GetTick>
 8000af2:	0002      	movs	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b64      	cmp	r3, #100	; 0x64
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e2e9      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b00:	4b93      	ldr	r3, [pc, #588]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	029b      	lsls	r3, r3, #10
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d0f0      	beq.n	8000aee <HAL_RCC_OscConfig+0xce>
 8000b0c:	e015      	b.n	8000b3a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fe73 	bl	80007f8 <HAL_GetTick>
 8000b12:	0003      	movs	r3, r0
 8000b14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b16:	e008      	b.n	8000b2a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b18:	f7ff fe6e 	bl	80007f8 <HAL_GetTick>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b64      	cmp	r3, #100	; 0x64
 8000b24:	d901      	bls.n	8000b2a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e2d4      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b2a:	4b89      	ldr	r3, [pc, #548]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	029b      	lsls	r3, r3, #10
 8000b32:	4013      	ands	r3, r2
 8000b34:	d1f0      	bne.n	8000b18 <HAL_RCC_OscConfig+0xf8>
 8000b36:	e000      	b.n	8000b3a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4013      	ands	r3, r2
 8000b42:	d100      	bne.n	8000b46 <HAL_RCC_OscConfig+0x126>
 8000b44:	e099      	b.n	8000c7a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b46:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2238      	movs	r2, #56	; 0x38
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b50:	4b7f      	ldr	r3, [pc, #508]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2203      	movs	r2, #3
 8000b56:	4013      	ands	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	2b10      	cmp	r3, #16
 8000b5e:	d102      	bne.n	8000b66 <HAL_RCC_OscConfig+0x146>
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d002      	beq.n	8000b6c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d135      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b6c:	4b78      	ldr	r3, [pc, #480]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4013      	ands	r3, r2
 8000b76:	d005      	beq.n	8000b84 <HAL_RCC_OscConfig+0x164>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e2a7      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b84:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	4a74      	ldr	r2, [pc, #464]	; (8000d5c <HAL_RCC_OscConfig+0x33c>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	021a      	lsls	r2, r3, #8
 8000b94:	4b6e      	ldr	r3, [pc, #440]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000b96:	430a      	orrs	r2, r1
 8000b98:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d112      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a6e      	ldr	r2, [pc, #440]	; (8000d60 <HAL_RCC_OscConfig+0x340>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	0019      	movs	r1, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0adb      	lsrs	r3, r3, #11
 8000bba:	2207      	movs	r2, #7
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <HAL_RCC_OscConfig+0x344>)
 8000bc0:	40da      	lsrs	r2, r3
 8000bc2:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <HAL_RCC_OscConfig+0x348>)
 8000bc4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <HAL_RCC_OscConfig+0x34c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fdb8 	bl	8000740 <HAL_InitTick>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d051      	beq.n	8000c78 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e27d      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d030      	beq.n	8000c42 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000be0:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a5e      	ldr	r2, [pc, #376]	; (8000d60 <HAL_RCC_OscConfig+0x340>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	0019      	movs	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	4b58      	ldr	r3, [pc, #352]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000bf4:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b55      	ldr	r3, [pc, #340]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	0049      	lsls	r1, r1, #1
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c02:	f7ff fdf9 	bl	80007f8 <HAL_GetTick>
 8000c06:	0003      	movs	r3, r0
 8000c08:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fdf4 	bl	80007f8 <HAL_GetTick>
 8000c10:	0002      	movs	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e25a      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	4013      	ands	r3, r2
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a4b      	ldr	r2, [pc, #300]	; (8000d5c <HAL_RCC_OscConfig+0x33c>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	0019      	movs	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	021a      	lsls	r2, r3, #8
 8000c3a:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	e01b      	b.n	8000c7a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c48:	4949      	ldr	r1, [pc, #292]	; (8000d70 <HAL_RCC_OscConfig+0x350>)
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fdd3 	bl	80007f8 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c58:	f7ff fdce 	bl	80007f8 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e234      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4013      	ands	r3, r2
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0x238>
 8000c76:	e000      	b.n	8000c7a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2208      	movs	r2, #8
 8000c80:	4013      	ands	r3, r2
 8000c82:	d047      	beq.n	8000d14 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2238      	movs	r2, #56	; 0x38
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b18      	cmp	r3, #24
 8000c8e:	d10a      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c94:	2202      	movs	r2, #2
 8000c96:	4013      	ands	r3, r2
 8000c98:	d03c      	beq.n	8000d14 <HAL_RCC_OscConfig+0x2f4>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d138      	bne.n	8000d14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e216      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d019      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cba:	f7ff fd9d 	bl	80007f8 <HAL_GetTick>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fd98 	bl	80007f8 <HAL_GetTick>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1fe      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	2202      	movs	r2, #2
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d0f1      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x2a4>
 8000ce0:	e018      	b.n	8000d14 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ce4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	438a      	bics	r2, r1
 8000cec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cee:	f7ff fd83 	bl	80007f8 <HAL_GetTick>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fd7e 	bl	80007f8 <HAL_GetTick>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e1e4      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4013      	ands	r3, r2
 8000d12:	d1f1      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d100      	bne.n	8000d20 <HAL_RCC_OscConfig+0x300>
 8000d1e:	e0c7      	b.n	8000eb0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d20:	231f      	movs	r3, #31
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2238      	movs	r2, #56	; 0x38
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d11f      	bne.n	8000d74 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_RCC_OscConfig+0x330>)
 8000d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d38:	2202      	movs	r2, #2
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_RCC_OscConfig+0x320>
 8000d3e:	e0b7      	b.n	8000eb0 <HAL_RCC_OscConfig+0x490>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d000      	beq.n	8000d4a <HAL_RCC_OscConfig+0x32a>
 8000d48:	e0b2      	b.n	8000eb0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e1c2      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40021000 	.word	0x40021000
 8000d54:	fffeffff 	.word	0xfffeffff
 8000d58:	fffbffff 	.word	0xfffbffff
 8000d5c:	ffff80ff 	.word	0xffff80ff
 8000d60:	ffffc7ff 	.word	0xffffc7ff
 8000d64:	00f42400 	.word	0x00f42400
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000d74:	4bb5      	ldr	r3, [pc, #724]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	055b      	lsls	r3, r3, #21
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d101      	bne.n	8000d84 <HAL_RCC_OscConfig+0x364>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_RCC_OscConfig+0x366>
 8000d84:	2300      	movs	r3, #0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d011      	beq.n	8000dae <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4bb0      	ldr	r3, [pc, #704]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000d8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8e:	4baf      	ldr	r3, [pc, #700]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0549      	lsls	r1, r1, #21
 8000d94:	430a      	orrs	r2, r1
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d98:	4bac      	ldr	r3, [pc, #688]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	055b      	lsls	r3, r3, #21
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000da6:	231f      	movs	r3, #31
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dae:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <HAL_RCC_OscConfig+0x630>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	d11a      	bne.n	8000df0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dba:	4ba5      	ldr	r3, [pc, #660]	; (8001050 <HAL_RCC_OscConfig+0x630>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4ba4      	ldr	r3, [pc, #656]	; (8001050 <HAL_RCC_OscConfig+0x630>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0049      	lsls	r1, r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fd16 	bl	80007f8 <HAL_GetTick>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dd2:	f7ff fd11 	bl	80007f8 <HAL_GetTick>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e177      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de4:	4b9a      	ldr	r3, [pc, #616]	; (8001050 <HAL_RCC_OscConfig+0x630>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4013      	ands	r3, r2
 8000dee:	d0f0      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x3e6>
 8000df8:	4b94      	ldr	r3, [pc, #592]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dfc:	4b93      	ldr	r3, [pc, #588]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	430a      	orrs	r2, r1
 8000e02:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e04:	e01c      	b.n	8000e40 <HAL_RCC_OscConfig+0x420>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b05      	cmp	r3, #5
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x408>
 8000e0e:	4b8f      	ldr	r3, [pc, #572]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e12:	4b8e      	ldr	r3, [pc, #568]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e14:	2104      	movs	r1, #4
 8000e16:	430a      	orrs	r2, r1
 8000e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e1a:	4b8c      	ldr	r3, [pc, #560]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0x420>
 8000e28:	4b88      	ldr	r3, [pc, #544]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e2c:	4b87      	ldr	r3, [pc, #540]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	438a      	bics	r2, r1
 8000e32:	65da      	str	r2, [r3, #92]	; 0x5c
 8000e34:	4b85      	ldr	r3, [pc, #532]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e38:	4b84      	ldr	r3, [pc, #528]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d014      	beq.n	8000e72 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e48:	f7ff fcd6 	bl	80007f8 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e50:	e009      	b.n	8000e66 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff fcd1 	bl	80007f8 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4a7d      	ldr	r2, [pc, #500]	; (8001054 <HAL_RCC_OscConfig+0x634>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e136      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e66:	4b79      	ldr	r3, [pc, #484]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0x432>
 8000e70:	e013      	b.n	8000e9a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e72:	f7ff fcc1 	bl	80007f8 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e7a:	e009      	b.n	8000e90 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fcbc 	bl	80007f8 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a73      	ldr	r2, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x634>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e121      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e90:	4b6e      	ldr	r3, [pc, #440]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e94:	2202      	movs	r2, #2
 8000e96:	4013      	ands	r3, r2
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000e9a:	231f      	movs	r3, #31
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d105      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000ea4:	4b69      	ldr	r3, [pc, #420]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea8:	4b68      	ldr	r3, [pc, #416]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000eaa:	496b      	ldr	r1, [pc, #428]	; (8001058 <HAL_RCC_OscConfig+0x638>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d039      	beq.n	8000f2e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d01b      	beq.n	8000efa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b61      	ldr	r3, [pc, #388]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	03c9      	lsls	r1, r1, #15
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc92 	bl	80007f8 <HAL_GetTick>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eda:	f7ff fc8d 	bl	80007f8 <HAL_GetTick>
 8000ede:	0002      	movs	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0f3      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x4ba>
 8000ef8:	e019      	b.n	8000f2e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000efa:	4b54      	ldr	r3, [pc, #336]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f00:	4956      	ldr	r1, [pc, #344]	; (800105c <HAL_RCC_OscConfig+0x63c>)
 8000f02:	400a      	ands	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f06:	f7ff fc77 	bl	80007f8 <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f10:	f7ff fc72 	bl	80007f8 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e0d8      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <HAL_RCC_OscConfig+0x518>
 8000f36:	e0cc      	b.n	80010d2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2238      	movs	r2, #56	; 0x38
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x526>
 8000f44:	e07b      	b.n	800103e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d156      	bne.n	8000ffc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f54:	4942      	ldr	r1, [pc, #264]	; (8001060 <HAL_RCC_OscConfig+0x640>)
 8000f56:	400a      	ands	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fc4d 	bl	80007f8 <HAL_GetTick>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff fc48 	bl	80007f8 <HAL_GetTick>
 8000f68:	0002      	movs	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e0ae      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	049b      	lsls	r3, r3, #18
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a37      	ldr	r2, [pc, #220]	; (8001064 <HAL_RCC_OscConfig+0x644>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0449      	lsls	r1, r1, #17
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0549      	lsls	r1, r1, #21
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fc11 	bl	80007f8 <HAL_GetTick>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fdc:	f7ff fc0c 	bl	80007f8 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e072      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	049b      	lsls	r3, r3, #18
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x5bc>
 8000ffa:	e06a      	b.n	80010d2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8001002:	4917      	ldr	r1, [pc, #92]	; (8001060 <HAL_RCC_OscConfig+0x640>)
 8001004:	400a      	ands	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fbf6 	bl	80007f8 <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fbf1 	bl	80007f8 <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e057      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	049b      	lsls	r3, r3, #18
 800102c:	4013      	ands	r3, r2
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_RCC_OscConfig+0x62c>)
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <HAL_RCC_OscConfig+0x648>)
 8001038:	400a      	ands	r2, r1
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	e049      	b.n	80010d2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d112      	bne.n	800106c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e044      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	00001388 	.word	0x00001388
 8001058:	efffffff 	.word	0xefffffff
 800105c:	ffbfffff 	.word	0xffbfffff
 8001060:	feffffff 	.word	0xfeffffff
 8001064:	11c1808c 	.word	0x11c1808c
 8001068:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_RCC_OscConfig+0x6bc>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2203      	movs	r2, #3
 8001076:	401a      	ands	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	429a      	cmp	r2, r3
 800107e:	d126      	bne.n	80010ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2270      	movs	r2, #112	; 0x70
 8001084:	401a      	ands	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	429a      	cmp	r2, r3
 800108c:	d11f      	bne.n	80010ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	23fe      	movs	r3, #254	; 0xfe
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	401a      	ands	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800109c:	429a      	cmp	r2, r3
 800109e:	d116      	bne.n	80010ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	23f8      	movs	r3, #248	; 0xf8
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	401a      	ands	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d10e      	bne.n	80010ce <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	23e0      	movs	r3, #224	; 0xe0
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	401a      	ands	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010bc:	429a      	cmp	r2, r3
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	0f5b      	lsrs	r3, r3, #29
 80010c4:	075a      	lsls	r2, r3, #29
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b008      	add	sp, #32
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0e9      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2207      	movs	r2, #7
 80010fa:	4013      	ands	r3, r2
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d91e      	bls.n	8001140 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2207      	movs	r2, #7
 8001108:	4393      	bics	r3, r2
 800110a:	0019      	movs	r1, r3
 800110c:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001114:	f7ff fb70 	bl	80007f8 <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800111c:	e009      	b.n	8001132 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111e:	f7ff fb6b 	bl	80007f8 <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_RCC_ClockConfig+0x1f4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e0ca      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d1ee      	bne.n	800111e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2202      	movs	r2, #2
 8001146:	4013      	ands	r3, r2
 8001148:	d015      	beq.n	8001176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d006      	beq.n	8001162 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001154:	4b60      	ldr	r3, [pc, #384]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 800115a:	21e0      	movs	r1, #224	; 0xe0
 800115c:	01c9      	lsls	r1, r1, #7
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <HAL_RCC_ClockConfig+0x1fc>)
 8001168:	4013      	ands	r3, r2
 800116a:	0019      	movs	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	4b59      	ldr	r3, [pc, #356]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001172:	430a      	orrs	r2, r1
 8001174:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d057      	beq.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d12b      	bne.n	80011ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e097      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d107      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	049b      	lsls	r3, r3, #18
 80011a8:	4013      	ands	r3, r2
 80011aa:	d11f      	bne.n	80011ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e08b      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4013      	ands	r3, r2
 80011c2:	d113      	bne.n	80011ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e07f      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d106      	bne.n	80011de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d4:	2202      	movs	r2, #2
 80011d6:	4013      	ands	r3, r2
 80011d8:	d108      	bne.n	80011ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e074      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e06d      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011ec:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2207      	movs	r2, #7
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80011fc:	430a      	orrs	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001200:	f7ff fafa 	bl	80007f8 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001208:	e009      	b.n	800121e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120a:	f7ff faf5 	bl	80007f8 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e054      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2238      	movs	r2, #56	; 0x38
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	429a      	cmp	r2, r3
 800122e:	d1ec      	bne.n	800120a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2207      	movs	r2, #7
 8001236:	4013      	ands	r3, r2
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d21e      	bcs.n	800127c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2207      	movs	r2, #7
 8001244:	4393      	bics	r3, r2
 8001246:	0019      	movs	r1, r3
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001250:	f7ff fad2 	bl	80007f8 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001258:	e009      	b.n	800126e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125a:	f7ff facd 	bl	80007f8 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_RCC_ClockConfig+0x1f4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e02c      	b.n	80012c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_RCC_ClockConfig+0x1f0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2207      	movs	r2, #7
 8001274:	4013      	ands	r3, r2
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d1ee      	bne.n	800125a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2204      	movs	r2, #4
 8001282:	4013      	ands	r3, r2
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <HAL_RCC_ClockConfig+0x200>)
 800128c:	4013      	ands	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 8001296:	430a      	orrs	r2, r1
 8001298:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800129a:	f000 f829 	bl	80012f0 <HAL_RCC_GetSysClockFreq>
 800129e:	0001      	movs	r1, r0
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RCC_ClockConfig+0x1f8>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	220f      	movs	r2, #15
 80012a8:	401a      	ands	r2, r3
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_RCC_ClockConfig+0x204>)
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	58d3      	ldr	r3, [r2, r3]
 80012b0:	221f      	movs	r2, #31
 80012b2:	4013      	ands	r3, r2
 80012b4:	000a      	movs	r2, r1
 80012b6:	40da      	lsrs	r2, r3
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_ClockConfig+0x208>)
 80012ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_ClockConfig+0x20c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff fa3d 	bl	8000740 <HAL_InitTick>
 80012c6:	0003      	movs	r3, r0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b004      	add	sp, #16
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40022000 	.word	0x40022000
 80012d4:	00001388 	.word	0x00001388
 80012d8:	40021000 	.word	0x40021000
 80012dc:	fffff0ff 	.word	0xfffff0ff
 80012e0:	ffff8fff 	.word	0xffff8fff
 80012e4:	08005388 	.word	0x08005388
 80012e8:	20000000 	.word	0x20000000
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2238      	movs	r2, #56	; 0x38
 80012fc:	4013      	ands	r3, r2
 80012fe:	d10f      	bne.n	8001320 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0adb      	lsrs	r3, r3, #11
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	2201      	movs	r2, #1
 800130c:	409a      	lsls	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	4835      	ldr	r0, [pc, #212]	; (80013ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8001316:	f7fe ff07 	bl	8000128 <__udivsi3>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	e05d      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001320:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2238      	movs	r2, #56	; 0x38
 8001326:	4013      	ands	r3, r2
 8001328:	2b08      	cmp	r3, #8
 800132a:	d102      	bne.n	8001332 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	e054      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2238      	movs	r2, #56	; 0x38
 8001338:	4013      	ands	r3, r2
 800133a:	2b10      	cmp	r3, #16
 800133c:	d138      	bne.n	80013b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2203      	movs	r2, #3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	2207      	movs	r2, #7
 8001350:	4013      	ands	r3, r2
 8001352:	3301      	adds	r3, #1
 8001354:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d10d      	bne.n	8001378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	4824      	ldr	r0, [pc, #144]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001360:	f7fe fee2 	bl	8000128 <__udivsi3>
 8001364:	0003      	movs	r3, r0
 8001366:	0019      	movs	r1, r3
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	227f      	movs	r2, #127	; 0x7f
 8001370:	4013      	ands	r3, r2
 8001372:	434b      	muls	r3, r1
 8001374:	617b      	str	r3, [r7, #20]
        break;
 8001376:	e00d      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800137c:	f7fe fed4 	bl	8000128 <__udivsi3>
 8001380:	0003      	movs	r3, r0
 8001382:	0019      	movs	r1, r3
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	227f      	movs	r2, #127	; 0x7f
 800138c:	4013      	ands	r3, r2
 800138e:	434b      	muls	r3, r1
 8001390:	617b      	str	r3, [r7, #20]
        break;
 8001392:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0f5b      	lsrs	r3, r3, #29
 800139a:	2207      	movs	r2, #7
 800139c:	4013      	ands	r3, r2
 800139e:	3301      	adds	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7fe febf 	bl	8000128 <__udivsi3>
 80013aa:	0003      	movs	r3, r0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	e015      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2238      	movs	r2, #56	; 0x38
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d103      	bne.n	80013c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2238      	movs	r2, #56	; 0x38
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b18      	cmp	r3, #24
 80013ce:	d103      	bne.n	80013d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80013d0:	23fa      	movs	r3, #250	; 0xfa
 80013d2:	01db      	lsls	r3, r3, #7
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	e001      	b.n	80013dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80013dc:	693b      	ldr	r3, [r7, #16]
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b006      	add	sp, #24
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021000 	.word	0x40021000
 80013ec:	00f42400 	.word	0x00f42400
 80013f0:	007a1200 	.word	0x007a1200

080013f4 <wc_HashTypeConvert>:
#endif /* !NO_ASN */

#if !defined(NO_PWDBASED) || !defined(NO_ASN)
/* function converts int hash type to enum */
enum wc_HashType wc_HashTypeConvert(int hashType)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    /* Default to hash type none as error */
    enum wc_HashType eHashType = WC_HASH_TYPE_NONE;
 80013fc:	210f      	movs	r1, #15
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
            eHashType = WC_HASH_TYPE_NONE;
            break;
    }
#else
    /* current master uses same unique types as wc_HashType */
    if (hashType > 0 && hashType <= WC_HASH_TYPE_MAX) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	dd05      	ble.n	8001416 <wc_HashTypeConvert+0x22>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b11      	cmp	r3, #17
 800140e:	dc02      	bgt.n	8001416 <wc_HashTypeConvert+0x22>
        eHashType = (enum wc_HashType)hashType;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	701a      	strb	r2, [r3, #0]
    }
#endif
    return eHashType;
 8001416:	230f      	movs	r3, #15
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	781b      	ldrb	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}

08001424 <wc_HashGetDigestSize>:

#ifndef NO_HASH_WRAPPER

/* Get Hash digest size */
int wc_HashGetDigestSize(enum wc_HashType hash_type)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	0002      	movs	r2, r0
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	701a      	strb	r2, [r3, #0]
    int dig_size = HASH_TYPE_E; /* Default to hash type error */
 8001430:	23e8      	movs	r3, #232	; 0xe8
 8001432:	425b      	negs	r3, r3
 8001434:	60fb      	str	r3, [r7, #12]
    switch(hash_type)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b11      	cmp	r3, #17
 800143c:	d80a      	bhi.n	8001454 <wc_HashGetDigestSize+0x30>
 800143e:	009a      	lsls	r2, r3, #2
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <wc_HashGetDigestSize+0x44>)
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	469f      	mov	pc, r3
            dig_size = MD4_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_MD5:
        #ifndef NO_MD5
            dig_size = WC_MD5_DIGEST_SIZE;
 8001448:	2310      	movs	r3, #16
 800144a:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 800144c:	e007      	b.n	800145e <wc_HashGetDigestSize+0x3a>
            dig_size = WC_SHA224_DIGEST_SIZE;
        #endif
            break;
        case WC_HASH_TYPE_SHA256:
        #ifndef NO_SHA256
            dig_size = WC_SHA256_DIGEST_SIZE;
 800144e:	2320      	movs	r3, #32
 8001450:	60fb      	str	r3, [r7, #12]
        #endif
            break;
 8001452:	e004      	b.n	800145e <wc_HashGetDigestSize+0x3a>
    #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
        case WC_HASH_TYPE_SHAKE256:
    #endif
        case WC_HASH_TYPE_NONE:
        default:
            dig_size = BAD_FUNC_ARG;
 8001454:	23ad      	movs	r3, #173	; 0xad
 8001456:	425b      	negs	r3, r3
 8001458:	60fb      	str	r3, [r7, #12]
            break;
 800145a:	e000      	b.n	800145e <wc_HashGetDigestSize+0x3a>
            break;
 800145c:	46c0      	nop			; (mov r8, r8)
    }
    return dig_size;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	080053c8 	.word	0x080053c8

0800146c <_InitHmac>:

    return ret;
}

int _InitHmac(Hmac* hmac, int type, void* heap)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
#ifdef WOLF_CRYPTO_CB
    int devId = hmac->devId;
#else
    int devId = INVALID_DEVID;
 800147c:	2302      	movs	r3, #2
 800147e:	425b      	negs	r3, r3
 8001480:	613b      	str	r3, [r7, #16]
#endif
    switch (type) {
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d003      	beq.n	8001490 <_InitHmac+0x24>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d009      	beq.n	80014a2 <_InitHmac+0x36>
 800148e:	e011      	b.n	80014b4 <_InitHmac+0x48>
    #ifndef NO_MD5
        case WC_MD5:
            ret = wc_InitMd5_ex(&hmac->hash.md5, heap, devId);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	0018      	movs	r0, r3
 8001498:	f001 f9ca 	bl	8002830 <wc_InitMd5_ex>
 800149c:	0003      	movs	r3, r0
 800149e:	617b      	str	r3, [r7, #20]
            break;
 80014a0:	e00c      	b.n	80014bc <_InitHmac+0x50>
            break;
    #endif /* WOLFSSL_SHA224 */

    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_InitSha256_ex(&hmac->hash.sha256, heap, devId);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fd7d 	bl	8002fa8 <wc_InitSha256_ex>
 80014ae:	0003      	movs	r3, r0
 80014b0:	617b      	str	r3, [r7, #20]
            break;
 80014b2:	e003      	b.n	80014bc <_InitHmac+0x50>
            break;
    #endif
    #endif

        default:
            ret = BAD_FUNC_ARG;
 80014b4:	23ad      	movs	r3, #173	; 0xad
 80014b6:	425b      	negs	r3, r3
 80014b8:	617b      	str	r3, [r7, #20]
            break;
 80014ba:	46c0      	nop			; (mov r8, r8)

    /* default to NULL heap hint or test value */
#ifdef WOLFSSL_HEAP_TEST
    hmac->heap = (void*)WOLFSSL_HEAP_TEST;
#else
    hmac->heap = heap;
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	2388      	movs	r3, #136	; 0x88
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	50d1      	str	r1, [r2, r3]
#endif /* WOLFSSL_HEAP_TEST */

    return ret;
 80014c6:	697b      	ldr	r3, [r7, #20]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b006      	add	sp, #24
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <wc_HmacSetKey>:


int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
#ifndef WOLFSSL_MAXQ108X
    byte*  ip;
    byte*  op;
    word32 i, hmac_block_size = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
#endif
    int    ret = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    void*  heap = NULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]

    if (hmac == NULL || (key == NULL && length != 0) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <wc_HmacSetKey+0x68>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <wc_HmacSetKey+0x2c>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11d      	bne.n	8001538 <wc_HmacSetKey+0x68>
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d01d      	beq.n	800153e <wc_HmacSetKey+0x6e>
       !(type == WC_MD5 || type == WC_SHA ||
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d01a      	beq.n	800153e <wc_HmacSetKey+0x6e>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d017      	beq.n	800153e <wc_HmacSetKey+0x6e>
            type == WC_SHA224 || type == WC_SHA256 ||
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b06      	cmp	r3, #6
 8001512:	d014      	beq.n	800153e <wc_HmacSetKey+0x6e>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b07      	cmp	r3, #7
 8001518:	d011      	beq.n	800153e <wc_HmacSetKey+0x6e>
            type == WC_SHA384 || type == WC_SHA512 ||
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d00e      	beq.n	800153e <wc_HmacSetKey+0x6e>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d00b      	beq.n	800153e <wc_HmacSetKey+0x6e>
            type == WC_SHA3_224 || type == WC_SHA3_256 ||
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2b0b      	cmp	r3, #11
 800152a:	d008      	beq.n	800153e <wc_HmacSetKey+0x6e>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d005      	beq.n	800153e <wc_HmacSetKey+0x6e>
       !(type == WC_MD5 || type == WC_SHA ||
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b0d      	cmp	r3, #13
 8001536:	d002      	beq.n	800153e <wc_HmacSetKey+0x6e>
            type == WC_SHA3_384 || type == WC_SHA3_512)) {
        return BAD_FUNC_ARG;
 8001538:	23ad      	movs	r3, #173	; 0xad
 800153a:	425b      	negs	r3, r3
 800153c:	e0c0      	b.n	80016c0 <wc_HmacSetKey+0x1f0>
    /* if set key has already been run then make sure and free existing */
    /* This is for async and PIC32MZ situations, and just normally OK,
       provided the user calls wc_HmacInit() first. That function is not
       available in FIPS builds. In current FIPS builds, the hashes are
       not allocating resources. */
    if (hmac->macType != WC_HASH_TYPE_NONE) {
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	238a      	movs	r3, #138	; 0x8a
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	5cd3      	ldrb	r3, [r2, r3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <wc_HmacSetKey+0x82>
        wc_HmacFree(hmac);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0018      	movs	r0, r3
 800154e:	f000 f9f2 	bl	8001936 <wc_HmacFree>
    }
#endif

    hmac->innerHashKeyed = 0;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	2316      	movs	r3, #22
 8001556:	33ff      	adds	r3, #255	; 0xff
 8001558:	2100      	movs	r1, #0
 800155a:	54d1      	strb	r1, [r2, r3]
    hmac->macType = (byte)type;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	b2d9      	uxtb	r1, r3
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	238a      	movs	r3, #138	; 0x8a
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	54d1      	strb	r1, [r2, r3]

    ret = _InitHmac(hmac, type, heap);
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff7c 	bl	800146c <_InitHmac>
 8001574:	0003      	movs	r3, r0
 8001576:	61fb      	str	r3, [r7, #28]
    if (ret != 0)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <wc_HmacSetKey+0xb2>
        return ret;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	e09e      	b.n	80016c0 <wc_HmacSetKey+0x1f0>
#ifdef WOLFSSL_MAXQ108X
    /* For MAXQ108x, nothing left to do. */
    return 0;
#else

    ip = (byte*)hmac->ipad;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3370      	adds	r3, #112	; 0x70
 8001586:	617b      	str	r3, [r7, #20]
    op = (byte*)hmac->opad;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	33b0      	adds	r3, #176	; 0xb0
 800158c:	613b      	str	r3, [r7, #16]

    switch (hmac->macType) {
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	238a      	movs	r3, #138	; 0x8a
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d002      	beq.n	80015a0 <wc_HmacSetKey+0xd0>
 800159a:	2b06      	cmp	r3, #6
 800159c:	d028      	beq.n	80015f0 <wc_HmacSetKey+0x120>
 800159e:	e04f      	b.n	8001640 <wc_HmacSetKey+0x170>
    #ifndef NO_MD5
        case WC_MD5:
            hmac_block_size = WC_MD5_BLOCK_SIZE;
 80015a0:	2340      	movs	r3, #64	; 0x40
 80015a2:	623b      	str	r3, [r7, #32]
            if (length <= WC_MD5_BLOCK_SIZE) {
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b40      	cmp	r3, #64	; 0x40
 80015a8:	d809      	bhi.n	80015be <wc_HmacSetKey+0xee>
                if (key != NULL) {
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d04a      	beq.n	8001646 <wc_HmacSetKey+0x176>
                    XMEMCPY(ip, key, length);
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f002 ffff 	bl	80045ba <memcpy>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
                if (ret != 0)
                    break;
                length = WC_MD5_DIGEST_SIZE;
            }
            break;
 80015bc:	e043      	b.n	8001646 <wc_HmacSetKey+0x176>
                ret = wc_Md5Update(&hmac->hash.md5, key, length);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 f954 	bl	8002872 <wc_Md5Update>
 80015ca:	0003      	movs	r3, r0
 80015cc:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13a      	bne.n	800164a <wc_HmacSetKey+0x17a>
                ret = wc_Md5Final(&hmac->hash.md5, ip);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 f9db 	bl	8002996 <wc_Md5Final>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d131      	bne.n	800164e <wc_HmacSetKey+0x17e>
                length = WC_MD5_DIGEST_SIZE;
 80015ea:	2310      	movs	r3, #16
 80015ec:	603b      	str	r3, [r7, #0]
            break;
 80015ee:	e02a      	b.n	8001646 <wc_HmacSetKey+0x176>
            }
            break;
    #endif /* WOLFSSL_SHA224 */
    #ifndef NO_SHA256
        case WC_SHA256:
            hmac_block_size = WC_SHA256_BLOCK_SIZE;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	623b      	str	r3, [r7, #32]
            if (length <= WC_SHA256_BLOCK_SIZE) {
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b40      	cmp	r3, #64	; 0x40
 80015f8:	d809      	bhi.n	800160e <wc_HmacSetKey+0x13e>
                if (key != NULL) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d028      	beq.n	8001652 <wc_HmacSetKey+0x182>
                    XMEMCPY(ip, key, length);
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	0018      	movs	r0, r3
 8001608:	f002 ffd7 	bl	80045ba <memcpy>
                if (ret != 0)
                    break;

                length = WC_SHA256_DIGEST_SIZE;
            }
            break;
 800160c:	e021      	b.n	8001652 <wc_HmacSetKey+0x182>
                ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f002 f9df 	bl	80039d8 <wc_Sha256Update>
 800161a:	0003      	movs	r3, r0
 800161c:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d118      	bne.n	8001656 <wc_HmacSetKey+0x186>
                ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	0011      	movs	r1, r2
 800162a:	0018      	movs	r0, r3
 800162c:	f002 fa7d 	bl	8003b2a <wc_Sha256Final>
 8001630:	0003      	movs	r3, r0
 8001632:	61fb      	str	r3, [r7, #28]
                if (ret != 0)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <wc_HmacSetKey+0x18a>
                length = WC_SHA256_DIGEST_SIZE;
 800163a:	2320      	movs	r3, #32
 800163c:	603b      	str	r3, [r7, #0]
            break;
 800163e:	e008      	b.n	8001652 <wc_HmacSetKey+0x182>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            return BAD_FUNC_ARG;
 8001640:	23ad      	movs	r3, #173	; 0xad
 8001642:	425b      	negs	r3, r3
 8001644:	e03c      	b.n	80016c0 <wc_HmacSetKey+0x1f0>
            break;
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	e008      	b.n	800165c <wc_HmacSetKey+0x18c>
                    break;
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	e006      	b.n	800165c <wc_HmacSetKey+0x18c>
                    break;
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	e004      	b.n	800165c <wc_HmacSetKey+0x18c>
            break;
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	e002      	b.n	800165c <wc_HmacSetKey+0x18c>
                    break;
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	e000      	b.n	800165c <wc_HmacSetKey+0x18c>
                    break;
 800165a:	46c0      	nop			; (mov r8, r8)
        /* no need to pad below */
    #endif
    }
#endif

    if (ret == 0) {
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d12d      	bne.n	80016be <wc_HmacSetKey+0x1ee>
        if (length < hmac_block_size)
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	429a      	cmp	r2, r3
 8001668:	d209      	bcs.n	800167e <wc_HmacSetKey+0x1ae>
            XMEMSET(ip + length, 0, hmac_block_size - length);
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	18d0      	adds	r0, r2, r3
 8001670:	6a3a      	ldr	r2, [r7, #32]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f002 ff08 	bl	800448e <memset>

        for(i = 0; i < hmac_block_size; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e018      	b.n	80016b6 <wc_HmacSetKey+0x1e6>
            op[i] = ip[i] ^ OPAD;
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	18cb      	adds	r3, r1, r3
 8001692:	215c      	movs	r1, #92	; 0x5c
 8001694:	404a      	eors	r2, r1
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]
            ip[i] ^= IPAD;
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	18d3      	adds	r3, r2, r3
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	6979      	ldr	r1, [r7, #20]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	18cb      	adds	r3, r1, r3
 80016a8:	2136      	movs	r1, #54	; 0x36
 80016aa:	404a      	eors	r2, r1
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < hmac_block_size; i++) {
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3301      	adds	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3e2      	bcc.n	8001684 <wc_HmacSetKey+0x1b4>
        }
    }

    return ret;
 80016be:	69fb      	ldr	r3, [r7, #28]
#endif /* WOLFSSL_MAXQ108X */
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b00a      	add	sp, #40	; 0x28
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HmacKeyInnerHash>:


static int HmacKeyInnerHash(Hmac* hmac)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    int ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]

    switch (hmac->macType) {
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	238a      	movs	r3, #138	; 0x8a
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d002      	beq.n	80016e6 <HmacKeyInnerHash+0x1e>
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d00a      	beq.n	80016fa <HmacKeyInnerHash+0x32>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
 80016e4:	e013      	b.n	800170e <HmacKeyInnerHash+0x46>
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3370      	adds	r3, #112	; 0x70
 80016ec:	2240      	movs	r2, #64	; 0x40
 80016ee:	0019      	movs	r1, r3
 80016f0:	f001 f8bf 	bl	8002872 <wc_Md5Update>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
            break;
 80016f8:	e009      	b.n	800170e <HmacKeyInnerHash+0x46>
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3370      	adds	r3, #112	; 0x70
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	0019      	movs	r1, r3
 8001704:	f002 f968 	bl	80039d8 <wc_Sha256Update>
 8001708:	0003      	movs	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]
            break;
 800170c:	46c0      	nop			; (mov r8, r8)
    }

    if (ret == 0)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <HmacKeyInnerHash+0x56>
        hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	2316      	movs	r3, #22
 8001718:	33ff      	adds	r3, #255	; 0xff
 800171a:	2101      	movs	r1, #1
 800171c:	54d1      	strb	r1, [r2, r3]

    return ret;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}

08001728 <wc_HmacUpdate>:


int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

    if (hmac == NULL || (msg == NULL && length > 0)) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <wc_HmacUpdate+0x22>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <wc_HmacUpdate+0x28>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <wc_HmacUpdate+0x28>
        return BAD_FUNC_ARG;
 800174a:	23ad      	movs	r3, #173	; 0xad
 800174c:	425b      	negs	r3, r3
 800174e:	e02c      	b.n	80017aa <wc_HmacUpdate+0x82>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	2316      	movs	r3, #22
 8001754:	33ff      	adds	r3, #255	; 0xff
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10a      	bne.n	8001772 <wc_HmacUpdate+0x4a>
        ret = HmacKeyInnerHash(hmac);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	0018      	movs	r0, r3
 8001760:	f7ff ffb2 	bl	80016c8 <HmacKeyInnerHash>
 8001764:	0003      	movs	r3, r0
 8001766:	617b      	str	r3, [r7, #20]
        if (ret != 0)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <wc_HmacUpdate+0x4a>
            return ret;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	e01b      	b.n	80017aa <wc_HmacUpdate+0x82>
    }

    switch (hmac->macType) {
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	238a      	movs	r3, #138	; 0x8a
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d002      	beq.n	8001784 <wc_HmacUpdate+0x5c>
 800177e:	2b06      	cmp	r3, #6
 8001780:	d009      	beq.n	8001796 <wc_HmacUpdate+0x6e>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
 8001782:	e011      	b.n	80017a8 <wc_HmacUpdate+0x80>
            ret = wc_Md5Update(&hmac->hash.md5, msg, length);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	0018      	movs	r0, r3
 800178c:	f001 f871 	bl	8002872 <wc_Md5Update>
 8001790:	0003      	movs	r3, r0
 8001792:	617b      	str	r3, [r7, #20]
            break;
 8001794:	e008      	b.n	80017a8 <wc_HmacUpdate+0x80>
            ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	0018      	movs	r0, r3
 800179e:	f002 f91b 	bl	80039d8 <wc_Sha256Update>
 80017a2:	0003      	movs	r3, r0
 80017a4:	617b      	str	r3, [r7, #20]
            break;
 80017a6:	46c0      	nop			; (mov r8, r8)
    }

    return ret;
 80017a8:	697b      	ldr	r3, [r7, #20]
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b006      	add	sp, #24
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <wc_HmacFinal>:


int wc_HmacFinal(Hmac* hmac, byte* hash)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
    int ret;

    if (hmac == NULL || hash == NULL) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <wc_HmacFinal+0x16>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <wc_HmacFinal+0x1c>
        return BAD_FUNC_ARG;
 80017c8:	23ad      	movs	r3, #173	; 0xad
 80017ca:	425b      	negs	r3, r3
 80017cc:	e08b      	b.n	80018e6 <wc_HmacFinal+0x134>
        }
    #endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    if (!hmac->innerHashKeyed) {
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	2316      	movs	r3, #22
 80017d2:	33ff      	adds	r3, #255	; 0xff
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <wc_HmacFinal+0x3e>
        ret = HmacKeyInnerHash(hmac);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff ff73 	bl	80016c8 <HmacKeyInnerHash>
 80017e2:	0003      	movs	r3, r0
 80017e4:	60fb      	str	r3, [r7, #12]
        if (ret != 0)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <wc_HmacFinal+0x3e>
            return ret;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	e07a      	b.n	80018e6 <wc_HmacFinal+0x134>
    }

    switch (hmac->macType) {
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	238a      	movs	r3, #138	; 0x8a
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d002      	beq.n	8001802 <wc_HmacFinal+0x50>
 80017fc:	2b06      	cmp	r3, #6
 80017fe:	d02d      	beq.n	800185c <wc_HmacFinal+0xaa>
 8001800:	e059      	b.n	80018b6 <wc_HmacFinal+0x104>
    #ifndef NO_MD5
        case WC_MD5:
            ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	33f0      	adds	r3, #240	; 0xf0
 8001808:	0019      	movs	r1, r3
 800180a:	0010      	movs	r0, r2
 800180c:	f001 f8c3 	bl	8002996 <wc_Md5Final>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]
            if (ret != 0)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d151      	bne.n	80018be <wc_HmacFinal+0x10c>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	33b0      	adds	r3, #176	; 0xb0
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	0019      	movs	r1, r3
 8001824:	f001 f825 	bl	8002872 <wc_Md5Update>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
                                                             WC_MD5_BLOCK_SIZE);
            if (ret != 0)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d147      	bne.n	80018c2 <wc_HmacFinal+0x110>
                break;
            ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	33f0      	adds	r3, #240	; 0xf0
 8001838:	2210      	movs	r2, #16
 800183a:	0019      	movs	r1, r3
 800183c:	f001 f819 	bl	8002872 <wc_Md5Update>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
                                                            WC_MD5_DIGEST_SIZE);
            if (ret != 0)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13d      	bne.n	80018c6 <wc_HmacFinal+0x114>
                break;
            ret = wc_Md5Final(&hmac->hash.md5, hash);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	0011      	movs	r1, r2
 8001850:	0018      	movs	r0, r3
 8001852:	f001 f8a0 	bl	8002996 <wc_Md5Final>
 8001856:	0003      	movs	r3, r0
 8001858:	60fb      	str	r3, [r7, #12]
            break;
 800185a:	e03b      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
            break;
    #endif /* WOLFSSL_SHA224 */
    #ifndef NO_SHA256
        case WC_SHA256:
            ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	33f0      	adds	r3, #240	; 0xf0
 8001862:	0019      	movs	r1, r3
 8001864:	0010      	movs	r0, r2
 8001866:	f002 f960 	bl	8003b2a <wc_Sha256Final>
 800186a:	0003      	movs	r3, r0
 800186c:	60fb      	str	r3, [r7, #12]
            if (ret != 0)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d12a      	bne.n	80018ca <wc_HmacFinal+0x118>
                break;
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	33b0      	adds	r3, #176	; 0xb0
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	0019      	movs	r1, r3
 800187e:	f002 f8ab 	bl	80039d8 <wc_Sha256Update>
 8001882:	0003      	movs	r3, r0
 8001884:	60fb      	str	r3, [r7, #12]
                                                          WC_SHA256_BLOCK_SIZE);
            if (ret != 0)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d120      	bne.n	80018ce <wc_HmacFinal+0x11c>
                break;
            ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	33f0      	adds	r3, #240	; 0xf0
 8001892:	2220      	movs	r2, #32
 8001894:	0019      	movs	r1, r3
 8001896:	f002 f89f 	bl	80039d8 <wc_Sha256Update>
 800189a:	0003      	movs	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]
                                                         WC_SHA256_DIGEST_SIZE);
            if (ret != 0)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <wc_HmacFinal+0x120>
                break;
            ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	0011      	movs	r1, r2
 80018aa:	0018      	movs	r0, r3
 80018ac:	f002 f93d 	bl	8003b2a <wc_Sha256Final>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
            break;
 80018b4:	e00e      	b.n	80018d4 <wc_HmacFinal+0x122>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            ret = BAD_FUNC_ARG;
 80018b6:	23ad      	movs	r3, #173	; 0xad
 80018b8:	425b      	negs	r3, r3
 80018ba:	60fb      	str	r3, [r7, #12]
            break;
 80018bc:	e00a      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	e008      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	e006      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	e004      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	e002      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	e000      	b.n	80018d4 <wc_HmacFinal+0x122>
                break;
 80018d2:	46c0      	nop			; (mov r8, r8)
    }

    if (ret == 0) {
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <wc_HmacFinal+0x132>
        hmac->innerHashKeyed = 0;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	2316      	movs	r3, #22
 80018de:	33ff      	adds	r3, #255	; 0xff
 80018e0:	2100      	movs	r1, #0
 80018e2:	54d1      	strb	r1, [r2, r3]
    }

    return ret;
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}

080018ee <wc_HmacInit>:
    #undef wc_HmacFinal

#else
/* Initialize Hmac for use with async device */
int wc_HmacInit(Hmac* hmac, void* heap, int devId)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
    int ret = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

    if (hmac == NULL)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <wc_HmacInit+0x1c>
        return BAD_FUNC_ARG;
 8001904:	23ad      	movs	r3, #173	; 0xad
 8001906:	425b      	negs	r3, r3
 8001908:	e011      	b.n	800192e <wc_HmacInit+0x40>

    XMEMSET(hmac, 0, sizeof(Hmac));
 800190a:	238c      	movs	r3, #140	; 0x8c
 800190c:	005a      	lsls	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2100      	movs	r1, #0
 8001912:	0018      	movs	r0, r3
 8001914:	f002 fdbb 	bl	800448e <memset>
    hmac->macType = WC_HASH_TYPE_NONE;
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	238a      	movs	r3, #138	; 0x8a
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2100      	movs	r1, #0
 8001920:	54d1      	strb	r1, [r2, r3]
    hmac->heap = heap;
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	2388      	movs	r3, #136	; 0x88
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	50d1      	str	r1, [r2, r3]
                                                         hmac->heap, devId);
#else
    (void)devId;
#endif /* WOLFSSL_ASYNC_CRYPT */

    return ret;
 800192c:	697b      	ldr	r3, [r7, #20]
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b006      	add	sp, #24
 8001934:	bd80      	pop	{r7, pc}

08001936 <wc_HmacFree>:
}
#endif /* WOLF_PRIVATE_KEY_ID */

/* Free Hmac from use with async device */
void wc_HmacFree(Hmac* hmac)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
    if (hmac == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d012      	beq.n	800196a <wc_HmacFree+0x34>

#if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
    wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
#endif /* WOLFSSL_ASYNC_CRYPT */

    switch (hmac->macType) {
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	238a      	movs	r3, #138	; 0x8a
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d002      	beq.n	8001956 <wc_HmacFree+0x20>
 8001950:	2b06      	cmp	r3, #6
 8001952:	d005      	beq.n	8001960 <wc_HmacFree+0x2a>
            break;
    #endif
    #endif /* WOLFSSL_SHA3 */

        default:
            break;
 8001954:	e00a      	b.n	800196c <wc_HmacFree+0x36>
            wc_Md5Free(&hmac->hash.md5);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f001 f895 	bl	8002a88 <wc_Md5Free>
            break;
 800195e:	e005      	b.n	800196c <wc_HmacFree+0x36>
            wc_Sha256Free(&hmac->hash.sha256);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0018      	movs	r0, r3
 8001964:	f002 f90f 	bl	8003b86 <wc_Sha256Free>
            break;
 8001968:	e000      	b.n	800196c <wc_HmacFree+0x36>
        return;
 800196a:	46c0      	nop			; (mov r8, r8)
    }
}
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <wolfssl_log>:
#ifdef HAVE_STACK_SIZE_VERBOSE
#include <wolfssl/wolfcrypt/mem_track.h>
#endif

static void wolfssl_log(const int logLevel, const char *const logMessage)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
    if (log_function)
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <wolfssl_log+0x38>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <wolfssl_log+0x20>
        log_function(logLevel, logMessage);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <wolfssl_log+0x38>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	0010      	movs	r0, r2
 8001990:	4798      	blx	r3
        STACK_SIZE_CHECKPOINT_MSG(logMessage);
#else
        fprintf(stderr, "%s\n", logMessage);
#endif
    }
}
 8001992:	e007      	b.n	80019a4 <wolfssl_log+0x30>
        fprintf(stderr, "%s\n", logMessage);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <wolfssl_log+0x3c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	4905      	ldr	r1, [pc, #20]	; (80019b4 <wolfssl_log+0x40>)
 800199e:	0018      	movs	r0, r3
 80019a0:	f002 fbb0 	bl	8004104 <fiprintf>
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000008c 	.word	0x2000008c
 80019b0:	20000064 	.word	0x20000064
 80019b4:	0800504c 	.word	0x0800504c

080019b8 <WOLFSSL_MSG>:
    }
}
#endif

void WOLFSSL_MSG(const char* msg)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    if (loggingEnabled)
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <WOLFSSL_MSG+0x24>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <WOLFSSL_MSG+0x1a>
        wolfssl_log(INFO_LOG , msg);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0019      	movs	r1, r3
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff ffd1 	bl	8001974 <wolfssl_log>
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	20000090 	.word	0x20000090

080019e0 <WOLFSSL_ENTER>:
    }
}


void WOLFSSL_ENTER(const char* msg)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b097      	sub	sp, #92	; 0x5c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    if (loggingEnabled) {
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <WOLFSSL_ENTER+0x30>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <WOLFSSL_ENTER+0x28>
        char buffer[WOLFSSL_MAX_ERROR_SZ];
        XSNPRINTF(buffer, sizeof(buffer), "wolfSSL Entering %s", msg);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <WOLFSSL_ENTER+0x34>)
 80019f4:	2408      	movs	r4, #8
 80019f6:	1938      	adds	r0, r7, r4
 80019f8:	2150      	movs	r1, #80	; 0x50
 80019fa:	f002 fc0f 	bl	800421c <sniprintf>
        wolfssl_log(ENTER_LOG , buffer);
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	0019      	movs	r1, r3
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7ff ffb6 	bl	8001974 <wolfssl_log>
    }
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b017      	add	sp, #92	; 0x5c
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	20000090 	.word	0x20000090
 8001a14:	08005070 	.word	0x08005070

08001a18 <wc_LoggingInit>:
#define ERRQ_LOCK()            wc_LockMutex(&wc_error_mutex)
#define ERRQ_UNLOCK()          wc_UnLockMutex(&wc_error_mutex)

/* Internal function that is called by wolfCrypt_Init() */
int wc_LoggingInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    if (ERRQ_MUTEX_INIT() != 0) {
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <wc_LoggingInit+0x40>)
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 f910 	bl	8003c44 <wc_InitMutex>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d006      	beq.n	8001a36 <wc_LoggingInit+0x1e>
        WOLFSSL_MSG("Bad Init Mutex");
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <wc_LoggingInit+0x44>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff ffc4 	bl	80019b8 <WOLFSSL_MSG>
        return BAD_MUTEX_E;
 8001a30:	236a      	movs	r3, #106	; 0x6a
 8001a32:	425b      	negs	r3, r3
 8001a34:	e00c      	b.n	8001a50 <wc_LoggingInit+0x38>
    }
    wc_errors_count = 0;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <wc_LoggingInit+0x48>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
    wc_errors          = NULL;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <wc_LoggingInit+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
    wc_current_node    = NULL;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <wc_LoggingInit+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
    wc_last_node       = NULL;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <wc_LoggingInit+0x54>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	200000a4 	.word	0x200000a4
 8001a5c:	080050a4 	.word	0x080050a4
 8001a60:	20000098 	.word	0x20000098
 8001a64:	20000094 	.word	0x20000094
 8001a68:	200000a0 	.word	0x200000a0
 8001a6c:	2000009c 	.word	0x2000009c

08001a70 <rotlFixed>:

#else /* generic */
/* This routine performs a left circular arithmetic shift of <x> by <y> value. */

    WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	41da      	rors	r2, r3
 8001a84:	0013      	movs	r3, r2
    }
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <min>:
    #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
        #define min min
    #endif
    /* returns the smaller of a and b */
    WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
    {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d900      	bls.n	8001aa2 <min+0x14>
 8001aa0:	0013      	movs	r3, r2
    }
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <Transform>:

#define MD5STEP(f, w, x, y, z, data, s) \
    (w) = (rotlFixed((w) + f(x, y, z) + (data), s) + (x))

static int Transform(wc_Md5* md5, const byte* data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    const word32* buffer = (const word32*)data;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	61fb      	str	r3, [r7, #28]
    /* Copy context->state[] to working vars  */
    word32 a = md5->digest[0];
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	61bb      	str	r3, [r7, #24]
    word32 b = md5->digest[1];
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac4:	617b      	str	r3, [r7, #20]
    word32 c = md5->digest[2];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	613b      	str	r3, [r7, #16]
    word32 d = md5->digest[3];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	60fb      	str	r3, [r7, #12]

    MD5STEP(F1, a, b, c, d, buffer[0]  + 0xd76aa478,  7);
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4053      	eors	r3, r2
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	401a      	ands	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	405a      	eors	r2, r3
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	18d2      	adds	r2, r2, r3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	4afe      	ldr	r2, [pc, #1016]	; (8001ee4 <Transform+0x438>)
 8001aec:	4694      	mov	ip, r2
 8001aee:	4463      	add	r3, ip
 8001af0:	2107      	movs	r1, #7
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ffbc 	bl	8001a70 <rotlFixed>
 8001af8:	0002      	movs	r2, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	189b      	adds	r3, r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[1]  + 0xe8c7b756, 12);
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4053      	eors	r3, r2
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	401a      	ands	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	405a      	eors	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	18d2      	adds	r2, r2, r3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	4af3      	ldr	r2, [pc, #972]	; (8001ee8 <Transform+0x43c>)
 8001b1c:	4694      	mov	ip, r2
 8001b1e:	4463      	add	r3, ip
 8001b20:	210c      	movs	r1, #12
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff ffa4 	bl	8001a70 <rotlFixed>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	189b      	adds	r3, r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[2]  + 0x242070db, 17);
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4053      	eors	r3, r2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	405a      	eors	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	18d2      	adds	r2, r2, r3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3308      	adds	r3, #8
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	4ae8      	ldr	r2, [pc, #928]	; (8001eec <Transform+0x440>)
 8001b4c:	4694      	mov	ip, r2
 8001b4e:	4463      	add	r3, ip
 8001b50:	2111      	movs	r1, #17
 8001b52:	0018      	movs	r0, r3
 8001b54:	f7ff ff8c 	bl	8001a70 <rotlFixed>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[3]  + 0xc1bdceee, 22);
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4053      	eors	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	401a      	ands	r2, r3
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	405a      	eors	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	18d2      	adds	r2, r2, r3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	330c      	adds	r3, #12
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	4add      	ldr	r2, [pc, #884]	; (8001ef0 <Transform+0x444>)
 8001b7c:	4694      	mov	ip, r2
 8001b7e:	4463      	add	r3, ip
 8001b80:	2116      	movs	r1, #22
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7ff ff74 	bl	8001a70 <rotlFixed>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	189b      	adds	r3, r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[4]  + 0xf57c0faf,  7);
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4053      	eors	r3, r2
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	401a      	ands	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	405a      	eors	r2, r3
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	18d2      	adds	r2, r2, r3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	4ad2      	ldr	r2, [pc, #840]	; (8001ef4 <Transform+0x448>)
 8001bac:	4694      	mov	ip, r2
 8001bae:	4463      	add	r3, ip
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff ff5c 	bl	8001a70 <rotlFixed>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	189b      	adds	r3, r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[5]  + 0x4787c62a, 12);
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4053      	eors	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	401a      	ands	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	405a      	eors	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	18d2      	adds	r2, r2, r3
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	4ac7      	ldr	r2, [pc, #796]	; (8001ef8 <Transform+0x44c>)
 8001bdc:	4694      	mov	ip, r2
 8001bde:	4463      	add	r3, ip
 8001be0:	210c      	movs	r1, #12
 8001be2:	0018      	movs	r0, r3
 8001be4:	f7ff ff44 	bl	8001a70 <rotlFixed>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	189b      	adds	r3, r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[6]  + 0xa8304613, 17);
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4053      	eors	r3, r2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	405a      	eors	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	18d2      	adds	r2, r2, r3
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3318      	adds	r3, #24
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	4abc      	ldr	r2, [pc, #752]	; (8001efc <Transform+0x450>)
 8001c0c:	4694      	mov	ip, r2
 8001c0e:	4463      	add	r3, ip
 8001c10:	2111      	movs	r1, #17
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7ff ff2c 	bl	8001a70 <rotlFixed>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	189b      	adds	r3, r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[7]  + 0xfd469501, 22);
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4053      	eors	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	401a      	ands	r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	405a      	eors	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	18d2      	adds	r2, r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	331c      	adds	r3, #28
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	4ab1      	ldr	r2, [pc, #708]	; (8001f00 <Transform+0x454>)
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4463      	add	r3, ip
 8001c40:	2116      	movs	r1, #22
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff ff14 	bl	8001a70 <rotlFixed>
 8001c48:	0002      	movs	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[8]  + 0x698098d8,  7);
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4053      	eors	r3, r2
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	401a      	ands	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	405a      	eors	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	18d2      	adds	r2, r2, r3
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3320      	adds	r3, #32
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	4aa6      	ldr	r2, [pc, #664]	; (8001f04 <Transform+0x458>)
 8001c6c:	4694      	mov	ip, r2
 8001c6e:	4463      	add	r3, ip
 8001c70:	2107      	movs	r1, #7
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fefc 	bl	8001a70 <rotlFixed>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	189b      	adds	r3, r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[9]  + 0x8b44f7af, 12);
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4053      	eors	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	401a      	ands	r2, r3
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	405a      	eors	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	18d2      	adds	r2, r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3324      	adds	r3, #36	; 0x24
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	4a9b      	ldr	r2, [pc, #620]	; (8001f08 <Transform+0x45c>)
 8001c9c:	4694      	mov	ip, r2
 8001c9e:	4463      	add	r3, ip
 8001ca0:	210c      	movs	r1, #12
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fee4 	bl	8001a70 <rotlFixed>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	189b      	adds	r3, r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[10] + 0xffff5bb1, 17);
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	401a      	ands	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	405a      	eors	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	18d2      	adds	r2, r2, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3328      	adds	r3, #40	; 0x28
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	4a90      	ldr	r2, [pc, #576]	; (8001f0c <Transform+0x460>)
 8001ccc:	4694      	mov	ip, r2
 8001cce:	4463      	add	r3, ip
 8001cd0:	2111      	movs	r1, #17
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f7ff fecc 	bl	8001a70 <rotlFixed>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	189b      	adds	r3, r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[11] + 0x895cd7be, 22);
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4053      	eors	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	401a      	ands	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	405a      	eors	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	18d2      	adds	r2, r2, r3
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	332c      	adds	r3, #44	; 0x2c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	18d3      	adds	r3, r2, r3
 8001cfa:	4a85      	ldr	r2, [pc, #532]	; (8001f10 <Transform+0x464>)
 8001cfc:	4694      	mov	ip, r2
 8001cfe:	4463      	add	r3, ip
 8001d00:	2116      	movs	r1, #22
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff feb4 	bl	8001a70 <rotlFixed>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    MD5STEP(F1, a, b, c, d, buffer[12] + 0x6b901122,  7);
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4053      	eors	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	401a      	ands	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	405a      	eors	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	18d2      	adds	r2, r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3330      	adds	r3, #48	; 0x30
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <Transform+0x468>)
 8001d2c:	4694      	mov	ip, r2
 8001d2e:	4463      	add	r3, ip
 8001d30:	2107      	movs	r1, #7
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff fe9c 	bl	8001a70 <rotlFixed>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
    MD5STEP(F1, d, a, b, c, buffer[13] + 0xfd987193, 12);
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4053      	eors	r3, r2
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	401a      	ands	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	405a      	eors	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	18d2      	adds	r2, r2, r3
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3334      	adds	r3, #52	; 0x34
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	18d3      	adds	r3, r2, r3
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	; (8001f18 <Transform+0x46c>)
 8001d5c:	4694      	mov	ip, r2
 8001d5e:	4463      	add	r3, ip
 8001d60:	210c      	movs	r1, #12
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff fe84 	bl	8001a70 <rotlFixed>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F1, c, d, a, b, buffer[14] + 0xa679438e, 17);
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4053      	eors	r3, r2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	401a      	ands	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	405a      	eors	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	18d2      	adds	r2, r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3338      	adds	r3, #56	; 0x38
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	18d3      	adds	r3, r2, r3
 8001d8a:	4a64      	ldr	r2, [pc, #400]	; (8001f1c <Transform+0x470>)
 8001d8c:	4694      	mov	ip, r2
 8001d8e:	4463      	add	r3, ip
 8001d90:	2111      	movs	r1, #17
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff fe6c 	bl	8001a70 <rotlFixed>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	189b      	adds	r3, r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
    MD5STEP(F1, b, c, d, a, buffer[15] + 0x49b40821, 22);
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4053      	eors	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	401a      	ands	r2, r3
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	405a      	eors	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	18d2      	adds	r2, r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	333c      	adds	r3, #60	; 0x3c
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	18d3      	adds	r3, r2, r3
 8001dba:	4a59      	ldr	r2, [pc, #356]	; (8001f20 <Transform+0x474>)
 8001dbc:	4694      	mov	ip, r2
 8001dbe:	4463      	add	r3, ip
 8001dc0:	2116      	movs	r1, #22
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fe54 	bl	8001a70 <rotlFixed>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	189b      	adds	r3, r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

    MD5STEP(F2, a, b, c, d, buffer[1]  + 0xf61e2562,  5);
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4053      	eors	r3, r2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	401a      	ands	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	405a      	eors	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	18d2      	adds	r2, r2, r3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <Transform+0x478>)
 8001dec:	4694      	mov	ip, r2
 8001dee:	4463      	add	r3, ip
 8001df0:	2105      	movs	r1, #5
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7ff fe3c 	bl	8001a70 <rotlFixed>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	189b      	adds	r3, r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[6]  + 0xc040b340,  9);
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	4053      	eors	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	401a      	ands	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	405a      	eors	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	18d2      	adds	r2, r2, r3
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3318      	adds	r3, #24
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	18d3      	adds	r3, r2, r3
 8001e1a:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <Transform+0x47c>)
 8001e1c:	4694      	mov	ip, r2
 8001e1e:	4463      	add	r3, ip
 8001e20:	2109      	movs	r1, #9
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fe24 	bl	8001a70 <rotlFixed>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	189b      	adds	r3, r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[11] + 0x265e5a51, 14);
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4053      	eors	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	401a      	ands	r2, r3
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	405a      	eors	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	18d2      	adds	r2, r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	332c      	adds	r3, #44	; 0x2c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <Transform+0x480>)
 8001e4c:	4694      	mov	ip, r2
 8001e4e:	4463      	add	r3, ip
 8001e50:	210e      	movs	r1, #14
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7ff fe0c 	bl	8001a70 <rotlFixed>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	189b      	adds	r3, r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[0]  + 0xe9b6c7aa, 20);
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4053      	eors	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	401a      	ands	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	405a      	eors	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	18d2      	adds	r2, r2, r3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <Transform+0x484>)
 8001e7a:	4694      	mov	ip, r2
 8001e7c:	4463      	add	r3, ip
 8001e7e:	2114      	movs	r1, #20
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fdf5 	bl	8001a70 <rotlFixed>
 8001e86:	0002      	movs	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[5]  + 0xd62f105d,  5);
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4053      	eors	r3, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	401a      	ands	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	405a      	eors	r2, r3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	18d2      	adds	r2, r2, r3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	18d3      	adds	r3, r2, r3
 8001ea8:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <Transform+0x488>)
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4463      	add	r3, ip
 8001eae:	2105      	movs	r1, #5
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff fddd 	bl	8001a70 <rotlFixed>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[10] + 0x02441453,  9);
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	4053      	eors	r3, r2
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	405a      	eors	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	18d2      	adds	r2, r2, r3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	3328      	adds	r3, #40	; 0x28
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	18d3      	adds	r3, r2, r3
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <Transform+0x48c>)
 8001eda:	4694      	mov	ip, r2
 8001edc:	4463      	add	r3, ip
 8001ede:	2109      	movs	r1, #9
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	e02b      	b.n	8001f3c <Transform+0x490>
 8001ee4:	d76aa478 	.word	0xd76aa478
 8001ee8:	e8c7b756 	.word	0xe8c7b756
 8001eec:	242070db 	.word	0x242070db
 8001ef0:	c1bdceee 	.word	0xc1bdceee
 8001ef4:	f57c0faf 	.word	0xf57c0faf
 8001ef8:	4787c62a 	.word	0x4787c62a
 8001efc:	a8304613 	.word	0xa8304613
 8001f00:	fd469501 	.word	0xfd469501
 8001f04:	698098d8 	.word	0x698098d8
 8001f08:	8b44f7af 	.word	0x8b44f7af
 8001f0c:	ffff5bb1 	.word	0xffff5bb1
 8001f10:	895cd7be 	.word	0x895cd7be
 8001f14:	6b901122 	.word	0x6b901122
 8001f18:	fd987193 	.word	0xfd987193
 8001f1c:	a679438e 	.word	0xa679438e
 8001f20:	49b40821 	.word	0x49b40821
 8001f24:	f61e2562 	.word	0xf61e2562
 8001f28:	c040b340 	.word	0xc040b340
 8001f2c:	265e5a51 	.word	0x265e5a51
 8001f30:	e9b6c7aa 	.word	0xe9b6c7aa
 8001f34:	d62f105d 	.word	0xd62f105d
 8001f38:	02441453 	.word	0x02441453
 8001f3c:	f7ff fd98 	bl	8001a70 <rotlFixed>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	189b      	adds	r3, r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[15] + 0xd8a1e681, 14);
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4053      	eors	r3, r2
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	401a      	ands	r2, r3
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	405a      	eors	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	18d2      	adds	r2, r2, r3
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	333c      	adds	r3, #60	; 0x3c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	18d3      	adds	r3, r2, r3
 8001f62:	4afe      	ldr	r2, [pc, #1016]	; (800235c <Transform+0x8b0>)
 8001f64:	4694      	mov	ip, r2
 8001f66:	4463      	add	r3, ip
 8001f68:	210e      	movs	r1, #14
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff fd80 	bl	8001a70 <rotlFixed>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	189b      	adds	r3, r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[4]  + 0xe7d3fbc8, 20);
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	401a      	ands	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	405a      	eors	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	18d2      	adds	r2, r2, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	4af3      	ldr	r2, [pc, #972]	; (8002360 <Transform+0x8b4>)
 8001f94:	4694      	mov	ip, r2
 8001f96:	4463      	add	r3, ip
 8001f98:	2114      	movs	r1, #20
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff fd68 	bl	8001a70 <rotlFixed>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	189b      	adds	r3, r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[9]  + 0x21e1cde6,  5);
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4053      	eors	r3, r2
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	405a      	eors	r2, r3
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	18d2      	adds	r2, r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3324      	adds	r3, #36	; 0x24
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	4ae8      	ldr	r2, [pc, #928]	; (8002364 <Transform+0x8b8>)
 8001fc4:	4694      	mov	ip, r2
 8001fc6:	4463      	add	r3, ip
 8001fc8:	2105      	movs	r1, #5
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff fd50 	bl	8001a70 <rotlFixed>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	189b      	adds	r3, r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[14] + 0xc33707d6,  9);
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4053      	eors	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	405a      	eors	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	18d2      	adds	r2, r2, r3
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	4add      	ldr	r2, [pc, #884]	; (8002368 <Transform+0x8bc>)
 8001ff4:	4694      	mov	ip, r2
 8001ff6:	4463      	add	r3, ip
 8001ff8:	2109      	movs	r1, #9
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fd38 	bl	8001a70 <rotlFixed>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	189b      	adds	r3, r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[3]  + 0xf4d50d87, 14);
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4053      	eors	r3, r2
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	401a      	ands	r2, r3
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	405a      	eors	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	18d2      	adds	r2, r2, r3
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	330c      	adds	r3, #12
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	18d3      	adds	r3, r2, r3
 8002022:	4ad2      	ldr	r2, [pc, #840]	; (800236c <Transform+0x8c0>)
 8002024:	4694      	mov	ip, r2
 8002026:	4463      	add	r3, ip
 8002028:	210e      	movs	r1, #14
 800202a:	0018      	movs	r0, r3
 800202c:	f7ff fd20 	bl	8001a70 <rotlFixed>
 8002030:	0002      	movs	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	189b      	adds	r3, r3, r2
 8002036:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[8]  + 0x455a14ed, 20);
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4053      	eors	r3, r2
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	401a      	ands	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	405a      	eors	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	18d2      	adds	r2, r2, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3320      	adds	r3, #32
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	4ac7      	ldr	r2, [pc, #796]	; (8002370 <Transform+0x8c4>)
 8002054:	4694      	mov	ip, r2
 8002056:	4463      	add	r3, ip
 8002058:	2114      	movs	r1, #20
 800205a:	0018      	movs	r0, r3
 800205c:	f7ff fd08 	bl	8001a70 <rotlFixed>
 8002060:	0002      	movs	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	189b      	adds	r3, r3, r2
 8002066:	617b      	str	r3, [r7, #20]
    MD5STEP(F2, a, b, c, d, buffer[13] + 0xa9e3e905,  5);
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4053      	eors	r3, r2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	401a      	ands	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	405a      	eors	r2, r3
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	18d2      	adds	r2, r2, r3
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3334      	adds	r3, #52	; 0x34
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	4abc      	ldr	r2, [pc, #752]	; (8002374 <Transform+0x8c8>)
 8002084:	4694      	mov	ip, r2
 8002086:	4463      	add	r3, ip
 8002088:	2105      	movs	r1, #5
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff fcf0 	bl	8001a70 <rotlFixed>
 8002090:	0002      	movs	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	189b      	adds	r3, r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
    MD5STEP(F2, d, a, b, c, buffer[2]  + 0xfcefa3f8,  9);
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4053      	eors	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	401a      	ands	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	405a      	eors	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	18d2      	adds	r2, r2, r3
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3308      	adds	r3, #8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	4ab1      	ldr	r2, [pc, #708]	; (8002378 <Transform+0x8cc>)
 80020b4:	4694      	mov	ip, r2
 80020b6:	4463      	add	r3, ip
 80020b8:	2109      	movs	r1, #9
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff fcd8 	bl	8001a70 <rotlFixed>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	189b      	adds	r3, r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    MD5STEP(F2, c, d, a, b, buffer[7]  + 0x676f02d9, 14);
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4053      	eors	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	401a      	ands	r2, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	405a      	eors	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	18d2      	adds	r2, r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	331c      	adds	r3, #28
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	4aa6      	ldr	r2, [pc, #664]	; (800237c <Transform+0x8d0>)
 80020e4:	4694      	mov	ip, r2
 80020e6:	4463      	add	r3, ip
 80020e8:	210e      	movs	r1, #14
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff fcc0 	bl	8001a70 <rotlFixed>
 80020f0:	0002      	movs	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    MD5STEP(F2, b, c, d, a, buffer[12] + 0x8d2a4c8a, 20);
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4053      	eors	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	401a      	ands	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	405a      	eors	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	18d2      	adds	r2, r2, r3
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3330      	adds	r3, #48	; 0x30
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	4a9b      	ldr	r2, [pc, #620]	; (8002380 <Transform+0x8d4>)
 8002114:	4694      	mov	ip, r2
 8002116:	4463      	add	r3, ip
 8002118:	2114      	movs	r1, #20
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fca8 	bl	8001a70 <rotlFixed>
 8002120:	0002      	movs	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	189b      	adds	r3, r3, r2
 8002126:	617b      	str	r3, [r7, #20]

    MD5STEP(F3, a, b, c, d, buffer[5]  + 0xfffa3942,  4);
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	405a      	eors	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	405a      	eors	r2, r3
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	18d2      	adds	r2, r2, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3314      	adds	r3, #20
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	4a91      	ldr	r2, [pc, #580]	; (8002384 <Transform+0x8d8>)
 8002140:	4694      	mov	ip, r2
 8002142:	4463      	add	r3, ip
 8002144:	2104      	movs	r1, #4
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff fc92 	bl	8001a70 <rotlFixed>
 800214c:	0002      	movs	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	189b      	adds	r3, r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[8]  + 0x8771f681, 11);
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	405a      	eors	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	405a      	eors	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	18d2      	adds	r2, r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3320      	adds	r3, #32
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	4a87      	ldr	r2, [pc, #540]	; (8002388 <Transform+0x8dc>)
 800216c:	4694      	mov	ip, r2
 800216e:	4463      	add	r3, ip
 8002170:	210b      	movs	r1, #11
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff fc7c 	bl	8001a70 <rotlFixed>
 8002178:	0002      	movs	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	189b      	adds	r3, r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[11] + 0x6d9d6122, 16);
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	405a      	eors	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	405a      	eors	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	18d2      	adds	r2, r2, r3
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	332c      	adds	r3, #44	; 0x2c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	18d3      	adds	r3, r2, r3
 8002196:	4a7d      	ldr	r2, [pc, #500]	; (800238c <Transform+0x8e0>)
 8002198:	4694      	mov	ip, r2
 800219a:	4463      	add	r3, ip
 800219c:	2110      	movs	r1, #16
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff fc66 	bl	8001a70 <rotlFixed>
 80021a4:	0002      	movs	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	189b      	adds	r3, r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[14] + 0xfde5380c, 23);
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	405a      	eors	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	405a      	eors	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	18d2      	adds	r2, r2, r3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3338      	adds	r3, #56	; 0x38
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	4a73      	ldr	r2, [pc, #460]	; (8002390 <Transform+0x8e4>)
 80021c4:	4694      	mov	ip, r2
 80021c6:	4463      	add	r3, ip
 80021c8:	2117      	movs	r1, #23
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fc50 	bl	8001a70 <rotlFixed>
 80021d0:	0002      	movs	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	189b      	adds	r3, r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[1]  + 0xa4beea44,  4);
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	405a      	eors	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	405a      	eors	r2, r3
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	18d2      	adds	r2, r2, r3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	4a69      	ldr	r2, [pc, #420]	; (8002394 <Transform+0x8e8>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	4463      	add	r3, ip
 80021f4:	2104      	movs	r1, #4
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7ff fc3a 	bl	8001a70 <rotlFixed>
 80021fc:	0002      	movs	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	189b      	adds	r3, r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[4]  + 0x4bdecfa9, 11);
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	405a      	eors	r2, r3
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	405a      	eors	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	18d2      	adds	r2, r2, r3
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3310      	adds	r3, #16
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <Transform+0x8ec>)
 800221c:	4694      	mov	ip, r2
 800221e:	4463      	add	r3, ip
 8002220:	210b      	movs	r1, #11
 8002222:	0018      	movs	r0, r3
 8002224:	f7ff fc24 	bl	8001a70 <rotlFixed>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	189b      	adds	r3, r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[7]  + 0xf6bb4b60, 16);
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	405a      	eors	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	405a      	eors	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	18d2      	adds	r2, r2, r3
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	331c      	adds	r3, #28
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	4a55      	ldr	r2, [pc, #340]	; (800239c <Transform+0x8f0>)
 8002248:	4694      	mov	ip, r2
 800224a:	4463      	add	r3, ip
 800224c:	2110      	movs	r1, #16
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff fc0e 	bl	8001a70 <rotlFixed>
 8002254:	0002      	movs	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	189b      	adds	r3, r3, r2
 800225a:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[10] + 0xbebfbc70, 23);
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	405a      	eors	r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	405a      	eors	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	18d2      	adds	r2, r2, r3
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3328      	adds	r3, #40	; 0x28
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	18d3      	adds	r3, r2, r3
 8002272:	4a4b      	ldr	r2, [pc, #300]	; (80023a0 <Transform+0x8f4>)
 8002274:	4694      	mov	ip, r2
 8002276:	4463      	add	r3, ip
 8002278:	2117      	movs	r1, #23
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fbf8 	bl	8001a70 <rotlFixed>
 8002280:	0002      	movs	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	189b      	adds	r3, r3, r2
 8002286:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[13] + 0x289b7ec6,  4);
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	405a      	eors	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	405a      	eors	r2, r3
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <Transform+0x8f8>)
 80022a0:	4694      	mov	ip, r2
 80022a2:	4463      	add	r3, ip
 80022a4:	2104      	movs	r1, #4
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7ff fbe2 	bl	8001a70 <rotlFixed>
 80022ac:	0002      	movs	r2, r0
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	189b      	adds	r3, r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[0]  + 0xeaa127fa, 11);
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	405a      	eors	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	405a      	eors	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	18d2      	adds	r2, r2, r3
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <Transform+0x8fc>)
 80022ca:	4694      	mov	ip, r2
 80022cc:	4463      	add	r3, ip
 80022ce:	210b      	movs	r1, #11
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fbcd 	bl	8001a70 <rotlFixed>
 80022d6:	0002      	movs	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[3]  + 0xd4ef3085, 16);
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	405a      	eors	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	405a      	eors	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	18d2      	adds	r2, r2, r3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	330c      	adds	r3, #12
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <Transform+0x900>)
 80022f6:	4694      	mov	ip, r2
 80022f8:	4463      	add	r3, ip
 80022fa:	2110      	movs	r1, #16
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fbb7 	bl	8001a70 <rotlFixed>
 8002302:	0002      	movs	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	189b      	adds	r3, r3, r2
 8002308:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[6]  + 0x04881d05, 23);
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	405a      	eors	r2, r3
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	405a      	eors	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	18d2      	adds	r2, r2, r3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3318      	adds	r3, #24
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <Transform+0x904>)
 8002322:	4694      	mov	ip, r2
 8002324:	4463      	add	r3, ip
 8002326:	2117      	movs	r1, #23
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff fba1 	bl	8001a70 <rotlFixed>
 800232e:	0002      	movs	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	189b      	adds	r3, r3, r2
 8002334:	617b      	str	r3, [r7, #20]
    MD5STEP(F3, a, b, c, d, buffer[9]  + 0xd9d4d039,  4);
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	405a      	eors	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	405a      	eors	r2, r3
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	18d2      	adds	r2, r2, r3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3324      	adds	r3, #36	; 0x24
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <Transform+0x908>)
 800234e:	4694      	mov	ip, r2
 8002350:	4463      	add	r3, ip
 8002352:	2104      	movs	r1, #4
 8002354:	0018      	movs	r0, r3
 8002356:	f7ff fb8b 	bl	8001a70 <rotlFixed>
 800235a:	e02d      	b.n	80023b8 <Transform+0x90c>
 800235c:	d8a1e681 	.word	0xd8a1e681
 8002360:	e7d3fbc8 	.word	0xe7d3fbc8
 8002364:	21e1cde6 	.word	0x21e1cde6
 8002368:	c33707d6 	.word	0xc33707d6
 800236c:	f4d50d87 	.word	0xf4d50d87
 8002370:	455a14ed 	.word	0x455a14ed
 8002374:	a9e3e905 	.word	0xa9e3e905
 8002378:	fcefa3f8 	.word	0xfcefa3f8
 800237c:	676f02d9 	.word	0x676f02d9
 8002380:	8d2a4c8a 	.word	0x8d2a4c8a
 8002384:	fffa3942 	.word	0xfffa3942
 8002388:	8771f681 	.word	0x8771f681
 800238c:	6d9d6122 	.word	0x6d9d6122
 8002390:	fde5380c 	.word	0xfde5380c
 8002394:	a4beea44 	.word	0xa4beea44
 8002398:	4bdecfa9 	.word	0x4bdecfa9
 800239c:	f6bb4b60 	.word	0xf6bb4b60
 80023a0:	bebfbc70 	.word	0xbebfbc70
 80023a4:	289b7ec6 	.word	0x289b7ec6
 80023a8:	eaa127fa 	.word	0xeaa127fa
 80023ac:	d4ef3085 	.word	0xd4ef3085
 80023b0:	04881d05 	.word	0x04881d05
 80023b4:	d9d4d039 	.word	0xd9d4d039
 80023b8:	0002      	movs	r2, r0
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
    MD5STEP(F3, d, a, b, c, buffer[12] + 0xe6db99e5, 11);
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	405a      	eors	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	405a      	eors	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	18d2      	adds	r2, r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3330      	adds	r3, #48	; 0x30
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	4ae1      	ldr	r2, [pc, #900]	; (800275c <Transform+0xcb0>)
 80023d8:	4694      	mov	ip, r2
 80023da:	4463      	add	r3, ip
 80023dc:	210b      	movs	r1, #11
 80023de:	0018      	movs	r0, r3
 80023e0:	f7ff fb46 	bl	8001a70 <rotlFixed>
 80023e4:	0002      	movs	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
    MD5STEP(F3, c, d, a, b, buffer[15] + 0x1fa27cf8, 16);
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	405a      	eors	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	405a      	eors	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	18d2      	adds	r2, r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	333c      	adds	r3, #60	; 0x3c
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	18d3      	adds	r3, r2, r3
 8002402:	4ad7      	ldr	r2, [pc, #860]	; (8002760 <Transform+0xcb4>)
 8002404:	4694      	mov	ip, r2
 8002406:	4463      	add	r3, ip
 8002408:	2110      	movs	r1, #16
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff fb30 	bl	8001a70 <rotlFixed>
 8002410:	0002      	movs	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	189b      	adds	r3, r3, r2
 8002416:	613b      	str	r3, [r7, #16]
    MD5STEP(F3, b, c, d, a, buffer[2]  + 0xc4ac5665, 23);
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	405a      	eors	r2, r3
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	405a      	eors	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	18d2      	adds	r2, r2, r3
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3308      	adds	r3, #8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	4acd      	ldr	r2, [pc, #820]	; (8002764 <Transform+0xcb8>)
 8002430:	4694      	mov	ip, r2
 8002432:	4463      	add	r3, ip
 8002434:	2117      	movs	r1, #23
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff fb1a 	bl	8001a70 <rotlFixed>
 800243c:	0002      	movs	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	189b      	adds	r3, r3, r2
 8002442:	617b      	str	r3, [r7, #20]

    MD5STEP(F4, a, b, c, d, buffer[0]  + 0xf4292244,  6);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43da      	mvns	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	431a      	orrs	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	405a      	eors	r2, r3
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	18d2      	adds	r2, r2, r3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	4ac3      	ldr	r2, [pc, #780]	; (8002768 <Transform+0xcbc>)
 800245c:	4694      	mov	ip, r2
 800245e:	4463      	add	r3, ip
 8002460:	2106      	movs	r1, #6
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fb04 	bl	8001a70 <rotlFixed>
 8002468:	0002      	movs	r2, r0
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	189b      	adds	r3, r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[7]  + 0x432aff97, 10);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43da      	mvns	r2, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	431a      	orrs	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	405a      	eors	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	18d2      	adds	r2, r2, r3
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	331c      	adds	r3, #28
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	18d3      	adds	r3, r2, r3
 8002488:	4ab8      	ldr	r2, [pc, #736]	; (800276c <Transform+0xcc0>)
 800248a:	4694      	mov	ip, r2
 800248c:	4463      	add	r3, ip
 800248e:	210a      	movs	r1, #10
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff faed 	bl	8001a70 <rotlFixed>
 8002496:	0002      	movs	r2, r0
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	189b      	adds	r3, r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[14] + 0xab9423a7, 15);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	405a      	eors	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	18d2      	adds	r2, r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3338      	adds	r3, #56	; 0x38
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	4aae      	ldr	r2, [pc, #696]	; (8002770 <Transform+0xcc4>)
 80024b8:	4694      	mov	ip, r2
 80024ba:	4463      	add	r3, ip
 80024bc:	210f      	movs	r1, #15
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff fad6 	bl	8001a70 <rotlFixed>
 80024c4:	0002      	movs	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	189b      	adds	r3, r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[5]  + 0xfc93a039, 21);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	43da      	mvns	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	405a      	eors	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	18d2      	adds	r2, r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3314      	adds	r3, #20
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	18d3      	adds	r3, r2, r3
 80024e4:	4aa3      	ldr	r2, [pc, #652]	; (8002774 <Transform+0xcc8>)
 80024e6:	4694      	mov	ip, r2
 80024e8:	4463      	add	r3, ip
 80024ea:	2115      	movs	r1, #21
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff fabf 	bl	8001a70 <rotlFixed>
 80024f2:	0002      	movs	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	189b      	adds	r3, r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[12] + 0x655b59c3,  6);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	431a      	orrs	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	405a      	eors	r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	18d2      	adds	r2, r2, r3
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3330      	adds	r3, #48	; 0x30
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	18d3      	adds	r3, r2, r3
 8002512:	4a99      	ldr	r2, [pc, #612]	; (8002778 <Transform+0xccc>)
 8002514:	4694      	mov	ip, r2
 8002516:	4463      	add	r3, ip
 8002518:	2106      	movs	r1, #6
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff faa8 	bl	8001a70 <rotlFixed>
 8002520:	0002      	movs	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	189b      	adds	r3, r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[3]  + 0x8f0ccc92, 10);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43da      	mvns	r2, r3
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	431a      	orrs	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	405a      	eors	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	18d2      	adds	r2, r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	330c      	adds	r3, #12
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	18d3      	adds	r3, r2, r3
 8002540:	4a8e      	ldr	r2, [pc, #568]	; (800277c <Transform+0xcd0>)
 8002542:	4694      	mov	ip, r2
 8002544:	4463      	add	r3, ip
 8002546:	210a      	movs	r1, #10
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fa91 	bl	8001a70 <rotlFixed>
 800254e:	0002      	movs	r2, r0
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	189b      	adds	r3, r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[10] + 0xffeff47d, 15);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	43da      	mvns	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	431a      	orrs	r2, r3
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	405a      	eors	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	18d2      	adds	r2, r2, r3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3328      	adds	r3, #40	; 0x28
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	4a84      	ldr	r2, [pc, #528]	; (8002780 <Transform+0xcd4>)
 8002570:	4694      	mov	ip, r2
 8002572:	4463      	add	r3, ip
 8002574:	210f      	movs	r1, #15
 8002576:	0018      	movs	r0, r3
 8002578:	f7ff fa7a 	bl	8001a70 <rotlFixed>
 800257c:	0002      	movs	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	189b      	adds	r3, r3, r2
 8002582:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[1]  + 0x85845dd1, 21);
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43da      	mvns	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	405a      	eors	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	18d2      	adds	r2, r2, r3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3304      	adds	r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	4a79      	ldr	r2, [pc, #484]	; (8002784 <Transform+0xcd8>)
 800259e:	4694      	mov	ip, r2
 80025a0:	4463      	add	r3, ip
 80025a2:	2115      	movs	r1, #21
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fa63 	bl	8001a70 <rotlFixed>
 80025aa:	0002      	movs	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[8]  + 0x6fa87e4f,  6);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	43da      	mvns	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	405a      	eors	r2, r3
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	18d2      	adds	r2, r2, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3320      	adds	r3, #32
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	4a6f      	ldr	r2, [pc, #444]	; (8002788 <Transform+0xcdc>)
 80025cc:	4694      	mov	ip, r2
 80025ce:	4463      	add	r3, ip
 80025d0:	2106      	movs	r1, #6
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff fa4c 	bl	8001a70 <rotlFixed>
 80025d8:	0002      	movs	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[15] + 0xfe2ce6e0, 10);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	431a      	orrs	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	405a      	eors	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	18d2      	adds	r2, r2, r3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	333c      	adds	r3, #60	; 0x3c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	4a64      	ldr	r2, [pc, #400]	; (800278c <Transform+0xce0>)
 80025fa:	4694      	mov	ip, r2
 80025fc:	4463      	add	r3, ip
 80025fe:	210a      	movs	r1, #10
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fa35 	bl	8001a70 <rotlFixed>
 8002606:	0002      	movs	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	189b      	adds	r3, r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[6]  + 0xa3014314, 15);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	43da      	mvns	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	431a      	orrs	r2, r3
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	405a      	eors	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	18d2      	adds	r2, r2, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3318      	adds	r3, #24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	4a5a      	ldr	r2, [pc, #360]	; (8002790 <Transform+0xce4>)
 8002628:	4694      	mov	ip, r2
 800262a:	4463      	add	r3, ip
 800262c:	210f      	movs	r1, #15
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fa1e 	bl	8001a70 <rotlFixed>
 8002634:	0002      	movs	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	189b      	adds	r3, r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[13] + 0x4e0811a1, 21);
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43da      	mvns	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	431a      	orrs	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	405a      	eors	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	18d2      	adds	r2, r2, r3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3334      	adds	r3, #52	; 0x34
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <Transform+0xce8>)
 8002656:	4694      	mov	ip, r2
 8002658:	4463      	add	r3, ip
 800265a:	2115      	movs	r1, #21
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff fa07 	bl	8001a70 <rotlFixed>
 8002662:	0002      	movs	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	189b      	adds	r3, r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    MD5STEP(F4, a, b, c, d, buffer[4]  + 0xf7537e82,  6);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43da      	mvns	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	431a      	orrs	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	405a      	eors	r2, r3
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	18d2      	adds	r2, r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3310      	adds	r3, #16
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	4a45      	ldr	r2, [pc, #276]	; (8002798 <Transform+0xcec>)
 8002684:	4694      	mov	ip, r2
 8002686:	4463      	add	r3, ip
 8002688:	2106      	movs	r1, #6
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff f9f0 	bl	8001a70 <rotlFixed>
 8002690:	0002      	movs	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	189b      	adds	r3, r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
    MD5STEP(F4, d, a, b, c, buffer[11] + 0xbd3af235, 10);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43da      	mvns	r2, r3
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	431a      	orrs	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	405a      	eors	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	18d2      	adds	r2, r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	332c      	adds	r3, #44	; 0x2c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	18d3      	adds	r3, r2, r3
 80026b0:	4a3a      	ldr	r2, [pc, #232]	; (800279c <Transform+0xcf0>)
 80026b2:	4694      	mov	ip, r2
 80026b4:	4463      	add	r3, ip
 80026b6:	210a      	movs	r1, #10
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff f9d9 	bl	8001a70 <rotlFixed>
 80026be:	0002      	movs	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    MD5STEP(F4, c, d, a, b, buffer[2]  + 0x2ad7d2bb, 15);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	43da      	mvns	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	405a      	eors	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	18d2      	adds	r2, r2, r3
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3308      	adds	r3, #8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	18d3      	adds	r3, r2, r3
 80026de:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <Transform+0xcf4>)
 80026e0:	4694      	mov	ip, r2
 80026e2:	4463      	add	r3, ip
 80026e4:	210f      	movs	r1, #15
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7ff f9c2 	bl	8001a70 <rotlFixed>
 80026ec:	0002      	movs	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    MD5STEP(F4, b, c, d, a, buffer[9]  + 0xeb86d391, 21);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	405a      	eors	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	18d2      	adds	r2, r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3324      	adds	r3, #36	; 0x24
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	18d3      	adds	r3, r2, r3
 800270c:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <Transform+0xcf8>)
 800270e:	4694      	mov	ip, r2
 8002710:	4463      	add	r3, ip
 8002712:	2115      	movs	r1, #21
 8002714:	0018      	movs	r0, r3
 8002716:	f7ff f9ab 	bl	8001a70 <rotlFixed>
 800271a:	0002      	movs	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	189b      	adds	r3, r3, r2
 8002720:	617b      	str	r3, [r7, #20]

    /* Add the working vars back into digest state[]  */
    md5->digest[0] += a;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	18d2      	adds	r2, r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	64da      	str	r2, [r3, #76]	; 0x4c
    md5->digest[1] += b;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	18d2      	adds	r2, r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	651a      	str	r2, [r3, #80]	; 0x50
    md5->digest[2] += c;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	18d2      	adds	r2, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    md5->digest[3] += d;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	18d2      	adds	r2, r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	; 0x58

    return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b008      	add	sp, #32
 800275a:	bd80      	pop	{r7, pc}
 800275c:	e6db99e5 	.word	0xe6db99e5
 8002760:	1fa27cf8 	.word	0x1fa27cf8
 8002764:	c4ac5665 	.word	0xc4ac5665
 8002768:	f4292244 	.word	0xf4292244
 800276c:	432aff97 	.word	0x432aff97
 8002770:	ab9423a7 	.word	0xab9423a7
 8002774:	fc93a039 	.word	0xfc93a039
 8002778:	655b59c3 	.word	0x655b59c3
 800277c:	8f0ccc92 	.word	0x8f0ccc92
 8002780:	ffeff47d 	.word	0xffeff47d
 8002784:	85845dd1 	.word	0x85845dd1
 8002788:	6fa87e4f 	.word	0x6fa87e4f
 800278c:	fe2ce6e0 	.word	0xfe2ce6e0
 8002790:	a3014314 	.word	0xa3014314
 8002794:	4e0811a1 	.word	0x4e0811a1
 8002798:	f7537e82 	.word	0xf7537e82
 800279c:	bd3af235 	.word	0xbd3af235
 80027a0:	2ad7d2bb 	.word	0x2ad7d2bb
 80027a4:	eb86d391 	.word	0xeb86d391

080027a8 <AddLength>:
#endif /* NEED_SOFT_MD5 */

#ifndef HAVE_MD5_CUST_API

static WC_INLINE void AddLength(wc_Md5* md5, word32 len)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    word32 tmp = md5->loLen;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]
    if ((md5->loLen += len) < tmp) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	18d2      	adds	r2, r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d904      	bls.n	80027d8 <AddLength+0x30>
        md5->hiLen++;                       /* carry low to high */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
    }
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_InitMd5>:

static int _InitMd5(wc_Md5* md5)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    int ret = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

    md5->digest[0] = 0x67452301L;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <_InitMd5+0x40>)
 80027f0:	64da      	str	r2, [r3, #76]	; 0x4c
    md5->digest[1] = 0xefcdab89L;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <_InitMd5+0x44>)
 80027f6:	651a      	str	r2, [r3, #80]	; 0x50
    md5->digest[2] = 0x98badcfeL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <_InitMd5+0x48>)
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    md5->digest[3] = 0x10325476L;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <_InitMd5+0x4c>)
 8002802:	659a      	str	r2, [r3, #88]	; 0x58

    md5->buffLen = 0;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    md5->loLen   = 0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
    md5->hiLen   = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
#ifdef WOLFSSL_HASH_FLAGS
    md5->flags = 0;
#endif

    return ret;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	67452301 	.word	0x67452301
 8002824:	efcdab89 	.word	0xefcdab89
 8002828:	98badcfe 	.word	0x98badcfe
 800282c:	10325476 	.word	0x10325476

08002830 <wc_InitMd5_ex>:

int wc_InitMd5_ex(wc_Md5* md5, void* heap, int devId)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

    if (md5 == NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <wc_InitMd5_ex+0x1c>
        return BAD_FUNC_ARG;
 8002846:	23ad      	movs	r3, #173	; 0xad
 8002848:	425b      	negs	r3, r3
 800284a:	e00e      	b.n	800286a <wc_InitMd5_ex+0x3a>

    md5->heap = heap;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	65da      	str	r2, [r3, #92]	; 0x5c

    ret = _InitMd5(md5);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ffc3 	bl	80027e0 <_InitMd5>
 800285a:	0003      	movs	r3, r0
 800285c:	617b      	str	r3, [r7, #20]
    if (ret != 0)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <wc_InitMd5_ex+0x38>
        return ret;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	e000      	b.n	800286a <wc_InitMd5_ex+0x3a>
    ret = wolfAsync_DevCtxInit(&md5->asyncDev, WOLFSSL_ASYNC_MARKER_MD5,
                               md5->heap, devId);
#else
    (void)devId;
#endif
    return ret;
 8002868:	697b      	ldr	r3, [r7, #20]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b006      	add	sp, #24
 8002870:	bd80      	pop	{r7, pc}

08002872 <wc_Md5Update>:

/* do block size increments/updates */
int wc_Md5Update(wc_Md5* md5, const byte* data, word32 len)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b088      	sub	sp, #32
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
    int ret = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    word32 blocksLen;
    byte* local;

    if (md5 == NULL || (data == NULL && len > 0)) {
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <wc_Md5Update+0x22>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <wc_Md5Update+0x28>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <wc_Md5Update+0x28>
        return BAD_FUNC_ARG;
 8002894:	23ad      	movs	r3, #173	; 0xad
 8002896:	425b      	negs	r3, r3
 8002898:	e079      	b.n	800298e <wc_Md5Update+0x11c>
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    /* check that internal buffLen is valid */
    if (md5->buffLen >= WC_MD5_BLOCK_SIZE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b3f      	cmp	r3, #63	; 0x3f
 80028a0:	d902      	bls.n	80028a8 <wc_Md5Update+0x36>
        return BUFFER_E;
 80028a2:	2384      	movs	r3, #132	; 0x84
 80028a4:	425b      	negs	r3, r3
 80028a6:	e072      	b.n	800298e <wc_Md5Update+0x11c>

    if (data == NULL && len == 0) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <wc_Md5Update+0x46>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <wc_Md5Update+0x46>
        /* valid, but do nothing */
        return 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e06a      	b.n	800298e <wc_Md5Update+0x11c>
    }

    /* add length for final */
    AddLength(md5, len);
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0011      	movs	r1, r2
 80028be:	0018      	movs	r0, r3
 80028c0:	f7ff ff72 	bl	80027a8 <AddLength>

    local = (byte*)md5->buffer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	330c      	adds	r3, #12
 80028c8:	61bb      	str	r3, [r7, #24]

    /* process any remainder from previous operation */
    if (md5->buffLen > 0) {
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04d      	beq.n	800296e <wc_Md5Update+0xfc>
        blocksLen = min(len, WC_MD5_BLOCK_SIZE - md5->buffLen);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	1ad2      	subs	r2, r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff f8d5 	bl	8001a8e <min>
 80028e4:	0003      	movs	r3, r0
 80028e6:	617b      	str	r3, [r7, #20]
        XMEMCPY(&local[md5->buffLen], data, blocksLen);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	18d3      	adds	r3, r2, r3
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f001 fe60 	bl	80045ba <memcpy>

        md5->buffLen += blocksLen;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	18d2      	adds	r2, r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	601a      	str	r2, [r3, #0]
        data         += blocksLen;
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	60bb      	str	r3, [r7, #8]
        len          -= blocksLen;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	607b      	str	r3, [r7, #4]

        if (md5->buffLen == WC_MD5_BLOCK_SIZE) {
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d127      	bne.n	800296e <wc_Md5Update+0xfc>
        #if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
            ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
        #endif

            ret = XTRANSFORM(md5, (const byte*)local);
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0011      	movs	r1, r2
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff f8c1 	bl	8001aac <Transform>
 800292a:	0003      	movs	r3, r0
 800292c:	61fb      	str	r3, [r7, #28]
            if (ret != 0)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <wc_Md5Update+0xc6>
                return ret;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	e02a      	b.n	800298e <wc_Md5Update+0x11c>

            md5->buffLen = 0;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
        XTRANSFORM_LEN(md5, data, blocksLen);
        data += blocksLen;
        len  -= blocksLen;
    }
#else
    while (len >= WC_MD5_BLOCK_SIZE) {
 800293e:	e016      	b.n	800296e <wc_Md5Update+0xfc>
        word32* local32 = md5->buffer;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	330c      	adds	r3, #12
 8002944:	613b      	str	r3, [r7, #16]
            local32 = (word32*)data;
        }
        else
    #endif
        {
            XMEMCPY(local32, data, WC_MD5_BLOCK_SIZE);
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	0018      	movs	r0, r3
 800294e:	f001 fe34 	bl	80045ba <memcpy>
        }

        data += WC_MD5_BLOCK_SIZE;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3340      	adds	r3, #64	; 0x40
 8002956:	60bb      	str	r3, [r7, #8]
        len  -= WC_MD5_BLOCK_SIZE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b40      	subs	r3, #64	; 0x40
 800295c:	607b      	str	r3, [r7, #4]

    #if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(local32, local32, WC_MD5_BLOCK_SIZE);
    #endif

        ret = XTRANSFORM(md5, (const byte*)local32);
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff f8a1 	bl	8001aac <Transform>
 800296a:	0003      	movs	r3, r0
 800296c:	61fb      	str	r3, [r7, #28]
    while (len >= WC_MD5_BLOCK_SIZE) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b3f      	cmp	r3, #63	; 0x3f
 8002972:	d8e5      	bhi.n	8002940 <wc_Md5Update+0xce>
    }
#endif /* XTRANSFORM_LEN */

    /* save remainder */
    if (len > 0) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <wc_Md5Update+0x11a>
        XMEMCPY(local, data, len);
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	0018      	movs	r0, r3
 8002982:	f001 fe1a 	bl	80045ba <memcpy>
        md5->buffLen = len;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]
    }

    return ret;
 800298c:	69fb      	ldr	r3, [r7, #28]
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b008      	add	sp, #32
 8002994:	bd80      	pop	{r7, pc}

08002996 <wc_Md5Final>:

int wc_Md5Final(wc_Md5* md5, byte* hash)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
    byte* local;

    if (md5 == NULL || hash == NULL) {
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <wc_Md5Final+0x16>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <wc_Md5Final+0x1c>
        return BAD_FUNC_ARG;
 80029ac:	23ad      	movs	r3, #173	; 0xad
 80029ae:	425b      	negs	r3, r3
 80029b0:	e066      	b.n	8002a80 <wc_Md5Final+0xea>
        return IntelQaSymMd5(&md5->asyncDev, hash, NULL, WC_MD5_DIGEST_SIZE);
#endif
    }
#endif /* WOLFSSL_ASYNC_CRYPT */

    local = (byte*)md5->buffer;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	330c      	adds	r3, #12
 80029b6:	60fb      	str	r3, [r7, #12]

    local[md5->buffLen++] = 0x80;  /* add 1 */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	701a      	strb	r2, [r3, #0]

    /* pad with zeros */
    if (md5->buffLen > WC_MD5_PAD_SIZE) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b38      	cmp	r3, #56	; 0x38
 80029d0:	d917      	bls.n	8002a02 <wc_Md5Final+0x6c>
        XMEMSET(&local[md5->buffLen], 0, WC_MD5_BLOCK_SIZE - md5->buffLen);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	18d0      	adds	r0, r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	001a      	movs	r2, r3
 80029e4:	2100      	movs	r1, #0
 80029e6:	f001 fd52 	bl	800448e <memset>
        md5->buffLen += WC_MD5_BLOCK_SIZE - md5->buffLen;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	601a      	str	r2, [r3, #0]

#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
        ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif
        XTRANSFORM(md5, local);
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0011      	movs	r1, r2
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff f858 	bl	8001aac <Transform>
        md5->buffLen = 0;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    }
    XMEMSET(&local[md5->buffLen], 0, WC_MD5_PAD_SIZE - md5->buffLen);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	18d0      	adds	r0, r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2238      	movs	r2, #56	; 0x38
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f001 fd3a 	bl	800448e <memset>
#if defined(BIG_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
    ByteReverseWords(md5->buffer, md5->buffer, WC_MD5_BLOCK_SIZE);
#endif

    /* put lengths in bits */
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0f5a      	lsrs	r2, r3, #29
                 (md5->hiLen << 3);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	00db      	lsls	r3, r3, #3
    md5->hiLen = (md5->loLen >> (8 * sizeof(md5->loLen) - 3)) +
 8002a26:	18d2      	adds	r2, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
    md5->loLen = md5->loLen << 3;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	00da      	lsls	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]

    /* store lengths */
    /* ! length ordering dependent on digest endian type ! */
    XMEMCPY(&local[WC_MD5_PAD_SIZE], &md5->loLen, sizeof(word32));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3338      	adds	r3, #56	; 0x38
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	2204      	movs	r2, #4
 8002a42:	0019      	movs	r1, r3
 8002a44:	f001 fdb9 	bl	80045ba <memcpy>
    XMEMCPY(&local[WC_MD5_PAD_SIZE + sizeof(word32)], &md5->hiLen, sizeof(word32));
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	333c      	adds	r3, #60	; 0x3c
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	2204      	movs	r2, #4
 8002a54:	0019      	movs	r1, r3
 8002a56:	f001 fdb0 	bl	80045ba <memcpy>

    /* final transform and result to hash */
    XTRANSFORM(md5, local);
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff f823 	bl	8001aac <Transform>
#ifdef BIG_ENDIAN_ORDER
    ByteReverseWords(md5->digest, md5->digest, WC_MD5_DIGEST_SIZE);
#endif
    XMEMCPY(hash, md5->digest, WC_MD5_DIGEST_SIZE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	334c      	adds	r3, #76	; 0x4c
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 fda2 	bl	80045ba <memcpy>

    return _InitMd5(md5); /* reset state */
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff feb1 	bl	80027e0 <_InitMd5>
 8002a7e:	0003      	movs	r3, r0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <wc_Md5Free>:
    }
    return wc_InitMd5_ex(md5, NULL, INVALID_DEVID);
}

void wc_Md5Free(wc_Md5* md5)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
#endif /* WOLFSSL_ASYNC_CRYPT */

#ifdef WOLFSSL_PIC32MZ_HASH
    wc_Md5Pic32Free(md5);
#endif
}
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <wolfSSL_Malloc>:
#ifdef WOLFSSL_DEBUG_MEMORY
void* wolfSSL_Malloc(size_t size, const char* func, unsigned int line)
#else
void* wolfSSL_Malloc(size_t size)
#endif
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    void* res = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
#ifdef WOLFSSL_CHECK_MEM_ZERO
    /* Space for requested size. */
    size += MEM_ALIGN;
#endif

    if (malloc_function) {
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <wolfSSL_Malloc+0x3c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <wolfSSL_Malloc+0x24>
    #ifdef WOLFSSL_DEBUG_MEMORY
        res = malloc_function(size, func, line);
    #else
        res = malloc_function(size);
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <wolfSSL_Malloc+0x3c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	4798      	blx	r3
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e005      	b.n	8002ac8 <wolfSSL_Malloc+0x30>
            WOLFSSL_MSG("Malloc too big!");
            return NULL;
        }
        #endif

        res = malloc(size);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f001 f8ca 	bl	8003c58 <malloc>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
        gMemFailCount = gMemFailCountSeed; /* reset */
        return NULL;
    }
#endif

    return res;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	200000a8 	.word	0x200000a8

08002ad8 <wolfSSL_Free>:
#ifdef WOLFSSL_DEBUG_MEMORY
void wolfSSL_Free(void *ptr, const char* func, unsigned int line)
#else
void wolfSSL_Free(void *ptr)
#endif
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    ptr = ((unsigned char*)ptr) - MEM_ALIGN;
    /* Check that the pointer is zero where required. */
    wc_MemZero_Check(((unsigned char*)ptr) + MEM_ALIGN, *(size_t*)ptr);
#endif

    if (free_function) {
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <wolfSSL_Free+0x2c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <wolfSSL_Free+0x1c>
    #ifdef WOLFSSL_DEBUG_MEMORY
        free_function(ptr, func, line);
    #else
        free_function(ptr);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <wolfSSL_Free+0x2c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	0010      	movs	r0, r2
 8002af0:	4798      	blx	r3
        free(ptr);
    #else
        WOLFSSL_MSG("No free available");
    #endif
    }
}
 8002af2:	e003      	b.n	8002afc <wolfSSL_Free+0x24>
        free(ptr);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f001 f8b8 	bl	8003c6c <free>
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200000ac 	.word	0x200000ac

08002b08 <XorWords>:
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
    for (i = 0; i < n; i++) r[i] ^= a[i];
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e012      	b.n	8002b40 <XorWords+0x38>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	18d3      	adds	r3, r2, r3
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	18c3      	adds	r3, r0, r3
 8002b36:	404a      	eors	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3e8      	bcc.n	8002b1a <XorWords+0x12>
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b006      	add	sp, #24
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <xorbuf>:
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
    if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <xorbuf+0x2c>
        XorWords( (wolfssl_word*)buf,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	089a      	lsrs	r2, r3, #2
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff ffc6 	bl	8002b08 <XorWords>
}
 8002b7c:	e01b      	b.n	8002bb6 <xorbuf+0x64>
        byte*       b = (byte*)buf;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        const byte* m = (const byte*)mask;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	617b      	str	r3, [r7, #20]
        for (i = 0; i < count; i++) b[i] ^= m[i];
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e010      	b.n	8002bae <xorbuf+0x5c>
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	7819      	ldrb	r1, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	69b8      	ldr	r0, [r7, #24]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	18c3      	adds	r3, r0, r3
 8002ba2:	404a      	eors	r2, r1
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3ea      	bcc.n	8002b8c <xorbuf+0x3a>
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <min>:
    {
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d900      	bls.n	8002bd2 <min+0x14>
 8002bd0:	0013      	movs	r3, r2
    }
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <wc_PBKDF2_ex>:

#if defined(HAVE_PBKDF2) && !defined(NO_HMAC)

int wc_PBKDF2_ex(byte* output, const byte* passwd, int pLen, const byte* salt,
           int sLen, int iterations, int kLen, int hashType, void* heap, int devId)
{
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b090      	sub	sp, #64	; 0x40
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
    word32 i = 1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    byte   buffer[WC_MAX_DIGEST_SIZE];
    Hmac   hmac[1];
#endif
    enum wc_HashType hashT;

    if (output == NULL || pLen < 0 || sLen < 0 || kLen < 0) {
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <wc_PBKDF2_ex+0x2a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db05      	blt.n	8002c04 <wc_PBKDF2_ex+0x2a>
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db02      	blt.n	8002c04 <wc_PBKDF2_ex+0x2a>
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da02      	bge.n	8002c0a <wc_PBKDF2_ex+0x30>
        return BAD_FUNC_ARG;
 8002c04:	23ad      	movs	r3, #173	; 0xad
 8002c06:	425b      	negs	r3, r3
 8002c08:	e0f6      	b.n	8002df8 <wc_PBKDF2_ex+0x21e>
    }

    if (iterations <= 0)
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	dc01      	bgt.n	8002c14 <wc_PBKDF2_ex+0x3a>
        iterations = 1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54

    hashT = wc_HashTypeConvert(hashType);
 8002c14:	2533      	movs	r5, #51	; 0x33
 8002c16:	197c      	adds	r4, r7, r5
 8002c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fe fbea 	bl	80013f4 <wc_HashTypeConvert>
 8002c20:	0003      	movs	r3, r0
 8002c22:	7023      	strb	r3, [r4, #0]
    hLen = wc_HashGetDigestSize(hashT);
 8002c24:	197b      	adds	r3, r7, r5
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe fbfb 	bl	8001424 <wc_HashGetDigestSize>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (hLen < 0)
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da02      	bge.n	8002c3e <wc_PBKDF2_ex+0x64>
        return BAD_FUNC_ARG;
 8002c38:	23ad      	movs	r3, #173	; 0xad
 8002c3a:	425b      	negs	r3, r3
 8002c3c:	e0dc      	b.n	8002df8 <wc_PBKDF2_ex+0x21e>

#ifdef WOLFSSL_SMALL_STACK
    buffer = (byte*)XMALLOC(WC_MAX_DIGEST_SIZE, heap, DYNAMIC_TYPE_TMP_BUFFER);
 8002c3e:	2020      	movs	r0, #32
 8002c40:	f7ff ff2a 	bl	8002a98 <wolfSSL_Malloc>
 8002c44:	0003      	movs	r3, r0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (buffer == NULL)
 8002c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <wc_PBKDF2_ex+0x7a>
        return MEMORY_E;
 8002c4e:	237d      	movs	r3, #125	; 0x7d
 8002c50:	425b      	negs	r3, r3
 8002c52:	e0d1      	b.n	8002df8 <wc_PBKDF2_ex+0x21e>
    hmac = (Hmac*)XMALLOC(sizeof(Hmac), heap, DYNAMIC_TYPE_HMAC);
 8002c54:	238c      	movs	r3, #140	; 0x8c
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7ff ff1d 	bl	8002a98 <wolfSSL_Malloc>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    if (hmac == NULL) {
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <wc_PBKDF2_ex+0xa6>
        XFREE(buffer, heap, DYNAMIC_TYPE_TMP_BUFFER);
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <wc_PBKDF2_ex+0xa0>
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff ff2f 	bl	8002ad8 <wolfSSL_Free>
        return MEMORY_E;
 8002c7a:	237d      	movs	r3, #125	; 0x7d
 8002c7c:	425b      	negs	r3, r3
 8002c7e:	e0bb      	b.n	8002df8 <wc_PBKDF2_ex+0x21e>
    }
#endif

    ret = wc_HmacInit(hmac, heap, devId);
 8002c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fe fe31 	bl	80018ee <wc_HmacInit>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    if (ret == 0) {
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d000      	beq.n	8002c98 <wc_PBKDF2_ex+0xbe>
 8002c96:	e09c      	b.n	8002dd2 <wc_PBKDF2_ex+0x1f8>
        /* use int hashType here, since HMAC FIPS uses the old unique value */
        ret = wc_HmacSetKey(hmac, hashType, passwd, pLen);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca0:	f7fe fc16 	bl	80014d0 <wc_HmacSetKey>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34

        while (ret == 0 && kLen) {
 8002ca8:	e080      	b.n	8002dac <wc_PBKDF2_ex+0x1d2>
            int currentLen;

            ret = wc_HmacUpdate(hmac, salt, sLen);
 8002caa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe fd39 	bl	8001728 <wc_HmacUpdate>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
            if (ret != 0)
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d000      	beq.n	8002cc2 <wc_PBKDF2_ex+0xe8>
 8002cc0:	e07c      	b.n	8002dbc <wc_PBKDF2_ex+0x1e2>
                break;

            /* encode i */
            for (j = 0; j < 4; j++) {
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cc6:	e018      	b.n	8002cfa <wc_PBKDF2_ex+0x120>
                byte b = (byte)(i >> ((3-j) * 8));
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	2203      	movs	r2, #3
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd2:	40da      	lsrs	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	2113      	movs	r1, #19
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	701a      	strb	r2, [r3, #0]

                ret = wc_HmacUpdate(hmac, &b, 1);
 8002cde:	1879      	adds	r1, r7, r1
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fe fd1f 	bl	8001728 <wc_HmacUpdate>
 8002cea:	0003      	movs	r3, r0
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
                if (ret != 0)
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <wc_PBKDF2_ex+0x128>
            for (j = 0; j < 4; j++) {
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	dde3      	ble.n	8002cc8 <wc_PBKDF2_ex+0xee>
 8002d00:	e000      	b.n	8002d04 <wc_PBKDF2_ex+0x12a>
                    break;
 8002d02:	46c0      	nop			; (mov r8, r8)
            }

            /* check ret from inside for loop */
            if (ret != 0)
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d15a      	bne.n	8002dc0 <wc_PBKDF2_ex+0x1e6>
                break;

            ret = wc_HmacFinal(hmac, buffer);
 8002d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	0011      	movs	r1, r2
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fe fd4e 	bl	80017b2 <wc_HmacFinal>
 8002d16:	0003      	movs	r3, r0
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
            if (ret != 0)
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d151      	bne.n	8002dc4 <wc_PBKDF2_ex+0x1ea>
                break;

            currentLen = min(kLen, hLen);
 8002d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff49 	bl	8002bbe <min>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	623b      	str	r3, [r7, #32]
            XMEMCPY(output, buffer, currentLen);
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fc3f 	bl	80045ba <memcpy>

            for (j = 1; j < iterations; j++) {
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d40:	e01e      	b.n	8002d80 <wc_PBKDF2_ex+0x1a6>
                ret = wc_HmacUpdate(hmac, buffer, hLen);
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe fced 	bl	8001728 <wc_HmacUpdate>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
                if (ret != 0)
 8002d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <wc_PBKDF2_ex+0x1b0>
                    break;
                ret = wc_HmacFinal(hmac, buffer);
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fe fd27 	bl	80017b2 <wc_HmacFinal>
 8002d64:	0003      	movs	r3, r0
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
                if (ret != 0)
 8002d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <wc_PBKDF2_ex+0x1b4>
                    break;
                xorbuf(output, buffer, currentLen);
 8002d6e:	6a3a      	ldr	r2, [r7, #32]
 8002d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff feec 	bl	8002b52 <xorbuf>
            for (j = 1; j < iterations; j++) {
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbdc      	blt.n	8002d42 <wc_PBKDF2_ex+0x168>
 8002d88:	e002      	b.n	8002d90 <wc_PBKDF2_ex+0x1b6>
                    break;
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	e000      	b.n	8002d90 <wc_PBKDF2_ex+0x1b6>
                    break;
 8002d8e:	46c0      	nop			; (mov r8, r8)
            }

            /* check ret from inside for loop */
            if (ret != 0)
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <wc_PBKDF2_ex+0x1ee>
                break;

            output += currentLen;
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	18d3      	adds	r3, r2, r3
 8002d9c:	60fb      	str	r3, [r7, #12]
            kLen   -= currentLen;
 8002d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	65bb      	str	r3, [r7, #88]	; 0x58
            i++;
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	3301      	adds	r3, #1
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (ret == 0 && kLen) {
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <wc_PBKDF2_ex+0x1f0>
 8002db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d000      	beq.n	8002dba <wc_PBKDF2_ex+0x1e0>
 8002db8:	e777      	b.n	8002caa <wc_PBKDF2_ex+0xd0>
 8002dba:	e006      	b.n	8002dca <wc_PBKDF2_ex+0x1f0>
                break;
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	e004      	b.n	8002dca <wc_PBKDF2_ex+0x1f0>
                break;
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	e002      	b.n	8002dca <wc_PBKDF2_ex+0x1f0>
                break;
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	e000      	b.n	8002dca <wc_PBKDF2_ex+0x1f0>
                break;
 8002dc8:	46c0      	nop			; (mov r8, r8)
        }
        wc_HmacFree(hmac);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fe fdb2 	bl	8001936 <wc_HmacFree>
    }

#ifdef WOLFSSL_SMALL_STACK
    XFREE(buffer, heap, DYNAMIC_TYPE_TMP_BUFFER);
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <wc_PBKDF2_ex+0x20a>
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff fe7a 	bl	8002ad8 <wolfSSL_Free>
    XFREE(hmac, heap, DYNAMIC_TYPE_HMAC);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <wc_PBKDF2_ex+0x21c>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff fe71 	bl	8002ad8 <wolfSSL_Free>
#endif

    return ret;
 8002df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b010      	add	sp, #64	; 0x40
 8002dfe:	bdb0      	pop	{r4, r5, r7, pc}

08002e00 <wc_PBKDF2>:

int wc_PBKDF2(byte* output, const byte* passwd, int pLen, const byte* salt,
           int sLen, int iterations, int kLen, int hashType)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b08b      	sub	sp, #44	; 0x2c
 8002e04:	af06      	add	r7, sp, #24
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
    return wc_PBKDF2_ex(output, passwd, pLen, salt, sLen, iterations, kLen,
 8002e0e:	683c      	ldr	r4, [r7, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	2302      	movs	r3, #2
 8002e18:	425b      	negs	r3, r3
 8002e1a:	9305      	str	r3, [sp, #20]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	9303      	str	r3, [sp, #12]
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	9302      	str	r3, [sp, #8]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	0023      	movs	r3, r4
 8002e32:	f7ff fed2 	bl	8002bda <wc_PBKDF2_ex>
 8002e36:	0003      	movs	r3, r0
        hashType, NULL, INVALID_DEVID);
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b005      	add	sp, #20
 8002e3e:	bd90      	pop	{r4, r7, pc}

08002e40 <rotlFixed>:
    {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(y) * 8 - y));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	41da      	rors	r2, r3
 8002e54:	0013      	movs	r3, r2
    }
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <rotrFixed>:
    {
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
        return (x >> y) | (x << (sizeof(y) * 8 - y));
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	41da      	rors	r2, r3
 8002e6e:	0013      	movs	r3, r2
    }
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <ByteReverseWord32>:
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <ByteReverseWord32+0x30>)
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	4907      	ldr	r1, [pc, #28]	; (8002eac <ByteReverseWord32+0x34>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2110      	movs	r1, #16
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ffd1 	bl	8002e40 <rotlFixed>
 8002e9e:	0003      	movs	r3, r0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	00ff00ff 	.word	0x00ff00ff
 8002eac:	ff00ff00 	.word	0xff00ff00

08002eb0 <ByteReverseWords>:
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
        count = byteCount/(word32)sizeof(word32);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	613b      	str	r3, [r7, #16]
        for (i = 0; i < count; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e010      	b.n	8002eea <ByteReverseWords+0x3a>
            out[i] = ByteReverseWord32(in[i]);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	18d3      	adds	r3, r2, r3
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	18d4      	adds	r4, r2, r3
 8002eda:	0008      	movs	r0, r1
 8002edc:	f7ff ffcc 	bl	8002e78 <ByteReverseWord32>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	6023      	str	r3, [r4, #0]
        for (i = 0; i < count; i++)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3ea      	bcc.n	8002ec8 <ByteReverseWords+0x18>
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b007      	add	sp, #28
 8002efa:	bd90      	pop	{r4, r7, pc}

08002efc <min>:
    {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
        return a > b ? b : a;
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d900      	bls.n	8002f10 <min+0x14>
 8002f0e:	0013      	movs	r3, r2
    }
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <InitSha256>:
    (!defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH))



static int InitSha256(wc_Sha256* sha256)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    int ret = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

    if (sha256 == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <InitSha256+0x18>
        return BAD_FUNC_ARG;
 8002f2a:	23ad      	movs	r3, #173	; 0xad
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	e027      	b.n	8002f80 <InitSha256+0x68>

    XMEMSET(sha256->digest, 0, sizeof(sha256->digest));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	2100      	movs	r1, #0
 8002f36:	0018      	movs	r0, r3
 8002f38:	f001 faa9 	bl	800448e <memset>
    sha256->digest[0] = 0x6A09E667L;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <InitSha256+0x70>)
 8002f40:	601a      	str	r2, [r3, #0]
    sha256->digest[1] = 0xBB67AE85L;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <InitSha256+0x74>)
 8002f46:	605a      	str	r2, [r3, #4]
    sha256->digest[2] = 0x3C6EF372L;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <InitSha256+0x78>)
 8002f4c:	609a      	str	r2, [r3, #8]
    sha256->digest[3] = 0xA54FF53AL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <InitSha256+0x7c>)
 8002f52:	60da      	str	r2, [r3, #12]
    sha256->digest[4] = 0x510E527FL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <InitSha256+0x80>)
 8002f58:	611a      	str	r2, [r3, #16]
    sha256->digest[5] = 0x9B05688CL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <InitSha256+0x84>)
 8002f5e:	615a      	str	r2, [r3, #20]
    sha256->digest[6] = 0x1F83D9ABL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <InitSha256+0x88>)
 8002f64:	619a      	str	r2, [r3, #24]
    sha256->digest[7] = 0x5BE0CD19L;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <InitSha256+0x8c>)
 8002f6a:	61da      	str	r2, [r3, #28]

    sha256->buffLen = 0;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
    sha256->loLen   = 0;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	665a      	str	r2, [r3, #100]	; 0x64
    sha256->hiLen   = 0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	669a      	str	r2, [r3, #104]	; 0x68

#ifdef WOLFSSL_MAXQ10XX_CRYPTO
    XMEMSET(&sha256->maxq_ctx, 0, sizeof(sha256->maxq_ctx));
#endif

    return ret;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	6a09e667 	.word	0x6a09e667
 8002f8c:	bb67ae85 	.word	0xbb67ae85
 8002f90:	3c6ef372 	.word	0x3c6ef372
 8002f94:	a54ff53a 	.word	0xa54ff53a
 8002f98:	510e527f 	.word	0x510e527f
 8002f9c:	9b05688c 	.word	0x9b05688c
 8002fa0:	1f83d9ab 	.word	0x1f83d9ab
 8002fa4:	5be0cd19 	.word	0x5be0cd19

08002fa8 <wc_InitSha256_ex>:

#else
    #define NEED_SOFT_SHA256

    int wc_InitSha256_ex(wc_Sha256* sha256, void* heap, int devId)
    {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
        if (sha256 == NULL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <wc_InitSha256_ex+0x1c>
            return BAD_FUNC_ARG;
 8002fbe:	23ad      	movs	r3, #173	; 0xad
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	e00e      	b.n	8002fe2 <wc_InitSha256_ex+0x3a>
        ret = InitSha256(sha256);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ffa6 	bl	8002f18 <InitSha256>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	617b      	str	r3, [r7, #20]
        if (ret != 0)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <wc_InitSha256_ex+0x32>
            return ret;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	e003      	b.n	8002fe2 <wc_InitSha256_ex+0x3a>

        sha256->heap = heap;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	66da      	str	r2, [r3, #108]	; 0x6c
                            WOLFSSL_ASYNC_MARKER_SHA256, sha256->heap, devId);
    #else
        (void)devId;
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return ret;
 8002fe0:	697b      	ldr	r3, [r7, #20]
    }
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b006      	add	sp, #24
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <Transform_Sha256>:
         t1 = Sigma0(a(j)) + Maj(a(j), b(j), c(j)); \
         d(j) += t0; \
         h(j)  = t0 + t1

    static int Transform_Sha256(wc_Sha256* sha256, const byte* data)
    {
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fee:	b091      	sub	sp, #68	; 0x44
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
                return MEMORY_E;
            sha256->W = W;
        }
    #elif defined(WOLFSSL_SMALL_STACK)
        word32* W;
        W = (word32*)XMALLOC(sizeof(word32) * WC_SHA256_BLOCK_SIZE, NULL,
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f7ff fd4c 	bl	8002a98 <wolfSSL_Malloc>
 8003000:	0003      	movs	r3, r0
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
                                                       DYNAMIC_TYPE_TMP_BUFFER);
        if (W == NULL)
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <Transform_Sha256+0x26>
            return MEMORY_E;
 800300a:	237d      	movs	r3, #125	; 0x7d
 800300c:	425b      	negs	r3, r3
 800300e:	f000 fc17 	bl	8003840 <Transform_Sha256+0x854>
    #else
        word32 W[WC_SHA256_BLOCK_SIZE];
    #endif

        /* Copy context->state[] to working vars */
        for (i = 0; i < 8; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003016:	e00b      	b.n	8003030 <Transform_Sha256+0x44>
            S[i] = sha256->digest[i];
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301c:	0092      	lsls	r2, r2, #2
 800301e:	58d1      	ldr	r1, [r2, r3]
 8003020:	230c      	movs	r3, #12
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003026:	0092      	lsls	r2, r2, #2
 8003028:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	3301      	adds	r3, #1
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003032:	2b07      	cmp	r3, #7
 8003034:	ddf0      	ble.n	8003018 <Transform_Sha256+0x2c>

        for (i = 0; i < 16; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303a:	e00c      	b.n	8003056 <Transform_Sha256+0x6a>
            W[i] = *((const word32*)&data[i*sizeof(word32)]);
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	18d2      	adds	r2, r2, r3
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800304a:	18cb      	adds	r3, r1, r3
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 16; i++)
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	3301      	adds	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003058:	2b0f      	cmp	r3, #15
 800305a:	ddef      	ble.n	800303c <Transform_Sha256+0x50>

        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800305c:	2310      	movs	r3, #16
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003060:	e066      	b.n	8003130 <Transform_Sha256+0x144>
            W[i] = Gamma1(W[i-2]) + W[i-7] + Gamma0(W[i-15]) + W[i-16];
 8003062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003064:	4a35      	ldr	r2, [pc, #212]	; (800313c <Transform_Sha256+0x150>)
 8003066:	4694      	mov	ip, r2
 8003068:	4463      	add	r3, ip
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800306e:	18d3      	adds	r3, r2, r3
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2111      	movs	r1, #17
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff fef2 	bl	8002e5e <rotrFixed>
 800307a:	0004      	movs	r4, r0
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <Transform_Sha256+0x150>)
 8003080:	4694      	mov	ip, r2
 8003082:	4463      	add	r3, ip
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003088:	18d3      	adds	r3, r2, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2113      	movs	r1, #19
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff fee5 	bl	8002e5e <rotrFixed>
 8003094:	0003      	movs	r3, r0
 8003096:	0022      	movs	r2, r4
 8003098:	405a      	eors	r2, r3
 800309a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309c:	4927      	ldr	r1, [pc, #156]	; (800313c <Transform_Sha256+0x150>)
 800309e:	468c      	mov	ip, r1
 80030a0:	4463      	add	r3, ip
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030a6:	18cb      	adds	r3, r1, r3
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	405a      	eors	r2, r3
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	4923      	ldr	r1, [pc, #140]	; (8003140 <Transform_Sha256+0x154>)
 80030b2:	468c      	mov	ip, r1
 80030b4:	4463      	add	r3, ip
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ba:	18cb      	adds	r3, r1, r3
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	18d4      	adds	r4, r2, r3
 80030c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c2:	4a20      	ldr	r2, [pc, #128]	; (8003144 <Transform_Sha256+0x158>)
 80030c4:	4694      	mov	ip, r2
 80030c6:	4463      	add	r3, ip
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2107      	movs	r1, #7
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff fec3 	bl	8002e5e <rotrFixed>
 80030d8:	0005      	movs	r5, r0
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <Transform_Sha256+0x158>)
 80030de:	4694      	mov	ip, r2
 80030e0:	4463      	add	r3, ip
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2112      	movs	r1, #18
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff feb6 	bl	8002e5e <rotrFixed>
 80030f2:	0003      	movs	r3, r0
 80030f4:	002a      	movs	r2, r5
 80030f6:	405a      	eors	r2, r3
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	4912      	ldr	r1, [pc, #72]	; (8003144 <Transform_Sha256+0x158>)
 80030fc:	468c      	mov	ip, r1
 80030fe:	4463      	add	r3, ip
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003104:	18cb      	adds	r3, r1, r3
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	4053      	eors	r3, r2
 800310c:	18e1      	adds	r1, r4, r3
 800310e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <Transform_Sha256+0x15c>)
 8003112:	4694      	mov	ip, r2
 8003114:	4463      	add	r3, ip
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800311a:	18d3      	adds	r3, r2, r3
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003124:	18c3      	adds	r3, r0, r3
 8003126:	188a      	adds	r2, r1, r2
 8003128:	601a      	str	r2, [r3, #0]
        for (i = 16; i < WC_SHA256_BLOCK_SIZE; i++)
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	3301      	adds	r3, #1
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	2b3f      	cmp	r3, #63	; 0x3f
 8003134:	dd95      	ble.n	8003062 <Transform_Sha256+0x76>
                RND(j);
            }
        }
    #else
        /* partially loop unrolled */
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 8003136:	2300      	movs	r3, #0
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313a:	e35c      	b.n	80037f6 <Transform_Sha256+0x80a>
 800313c:	3ffffffe 	.word	0x3ffffffe
 8003140:	3ffffff9 	.word	0x3ffffff9
 8003144:	3ffffff1 	.word	0x3ffffff1
 8003148:	3ffffff0 	.word	0x3ffffff0
            RND(0); RND(1); RND(2); RND(3);
 800314c:	260c      	movs	r6, #12
 800314e:	19bb      	adds	r3, r7, r6
 8003150:	69dc      	ldr	r4, [r3, #28]
 8003152:	19bb      	adds	r3, r7, r6
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2106      	movs	r1, #6
 8003158:	0018      	movs	r0, r3
 800315a:	f7ff fe80 	bl	8002e5e <rotrFixed>
 800315e:	0005      	movs	r5, r0
 8003160:	19bb      	adds	r3, r7, r6
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	210b      	movs	r1, #11
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff fe79 	bl	8002e5e <rotrFixed>
 800316c:	0003      	movs	r3, r0
 800316e:	405d      	eors	r5, r3
 8003170:	19bb      	adds	r3, r7, r6
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2119      	movs	r1, #25
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fe71 	bl	8002e5e <rotrFixed>
 800317c:	0003      	movs	r3, r0
 800317e:	406b      	eors	r3, r5
 8003180:	18e2      	adds	r2, r4, r3
 8003182:	0035      	movs	r5, r6
 8003184:	197b      	adds	r3, r7, r5
 8003186:	6999      	ldr	r1, [r3, #24]
 8003188:	197b      	adds	r3, r7, r5
 800318a:	6918      	ldr	r0, [r3, #16]
 800318c:	197b      	adds	r3, r7, r5
 800318e:	695c      	ldr	r4, [r3, #20]
 8003190:	197b      	adds	r3, r7, r5
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4063      	eors	r3, r4
 8003196:	4003      	ands	r3, r0
 8003198:	404b      	eors	r3, r1
 800319a:	18d2      	adds	r2, r2, r3
 800319c:	4bfe      	ldr	r3, [pc, #1016]	; (8003598 <Transform_Sha256+0x5ac>)
 800319e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031a0:	0089      	lsls	r1, r1, #2
 80031a2:	58cb      	ldr	r3, [r1, r3]
 80031a4:	18d2      	adds	r2, r2, r3
 80031a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ac:	18cb      	adds	r3, r1, r3
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
 80031b4:	197b      	adds	r3, r7, r5
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2102      	movs	r1, #2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7ff fe4f 	bl	8002e5e <rotrFixed>
 80031c0:	0004      	movs	r4, r0
 80031c2:	197b      	adds	r3, r7, r5
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	210d      	movs	r1, #13
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff fe48 	bl	8002e5e <rotrFixed>
 80031ce:	0003      	movs	r3, r0
 80031d0:	405c      	eors	r4, r3
 80031d2:	197b      	adds	r3, r7, r5
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2116      	movs	r1, #22
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff fe40 	bl	8002e5e <rotrFixed>
 80031de:	0003      	movs	r3, r0
 80031e0:	0022      	movs	r2, r4
 80031e2:	405a      	eors	r2, r3
 80031e4:	002c      	movs	r4, r5
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4319      	orrs	r1, r3
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4019      	ands	r1, r3
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4003      	ands	r3, r0
 8003200:	430b      	orrs	r3, r1
 8003202:	18d3      	adds	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	193b      	adds	r3, r7, r4
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	18d2      	adds	r2, r2, r3
 800320e:	193b      	adds	r3, r7, r4
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	18d2      	adds	r2, r2, r3
 8003218:	0026      	movs	r6, r4
 800321a:	19bb      	adds	r3, r7, r6
 800321c:	61da      	str	r2, [r3, #28]
 800321e:	19bb      	adds	r3, r7, r6
 8003220:	699c      	ldr	r4, [r3, #24]
 8003222:	19bb      	adds	r3, r7, r6
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2106      	movs	r1, #6
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff fe18 	bl	8002e5e <rotrFixed>
 800322e:	0005      	movs	r5, r0
 8003230:	19bb      	adds	r3, r7, r6
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	210b      	movs	r1, #11
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff fe11 	bl	8002e5e <rotrFixed>
 800323c:	0003      	movs	r3, r0
 800323e:	405d      	eors	r5, r3
 8003240:	19bb      	adds	r3, r7, r6
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2119      	movs	r1, #25
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff fe09 	bl	8002e5e <rotrFixed>
 800324c:	0003      	movs	r3, r0
 800324e:	406b      	eors	r3, r5
 8003250:	18e2      	adds	r2, r4, r3
 8003252:	0035      	movs	r5, r6
 8003254:	197b      	adds	r3, r7, r5
 8003256:	6959      	ldr	r1, [r3, #20]
 8003258:	197b      	adds	r3, r7, r5
 800325a:	68d8      	ldr	r0, [r3, #12]
 800325c:	197b      	adds	r3, r7, r5
 800325e:	691c      	ldr	r4, [r3, #16]
 8003260:	197b      	adds	r3, r7, r5
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4063      	eors	r3, r4
 8003266:	4003      	ands	r3, r0
 8003268:	404b      	eors	r3, r1
 800326a:	18d2      	adds	r2, r2, r3
 800326c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	4bc9      	ldr	r3, [pc, #804]	; (8003598 <Transform_Sha256+0x5ac>)
 8003272:	0089      	lsls	r1, r1, #2
 8003274:	58cb      	ldr	r3, [r1, r3]
 8003276:	18d2      	adds	r2, r2, r3
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	3301      	adds	r3, #1
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003280:	18cb      	adds	r3, r1, r3
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	18d3      	adds	r3, r2, r3
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
 8003288:	197b      	adds	r3, r7, r5
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2102      	movs	r1, #2
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff fde5 	bl	8002e5e <rotrFixed>
 8003294:	0004      	movs	r4, r0
 8003296:	197b      	adds	r3, r7, r5
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	210d      	movs	r1, #13
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fdde 	bl	8002e5e <rotrFixed>
 80032a2:	0003      	movs	r3, r0
 80032a4:	405c      	eors	r4, r3
 80032a6:	197b      	adds	r3, r7, r5
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2116      	movs	r1, #22
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff fdd6 	bl	8002e5e <rotrFixed>
 80032b2:	0003      	movs	r3, r0
 80032b4:	0022      	movs	r2, r4
 80032b6:	405a      	eors	r2, r3
 80032b8:	002c      	movs	r4, r5
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	69d9      	ldr	r1, [r3, #28]
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4319      	orrs	r1, r3
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4019      	ands	r1, r3
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	69d8      	ldr	r0, [r3, #28]
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4003      	ands	r3, r0
 80032d4:	430b      	orrs	r3, r1
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	18d2      	adds	r2, r2, r3
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	18d2      	adds	r2, r2, r3
 80032ec:	0026      	movs	r6, r4
 80032ee:	19bb      	adds	r3, r7, r6
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	19bb      	adds	r3, r7, r6
 80032f4:	695c      	ldr	r4, [r3, #20]
 80032f6:	19bb      	adds	r3, r7, r6
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2106      	movs	r1, #6
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff fdae 	bl	8002e5e <rotrFixed>
 8003302:	0005      	movs	r5, r0
 8003304:	19bb      	adds	r3, r7, r6
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	210b      	movs	r1, #11
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fda7 	bl	8002e5e <rotrFixed>
 8003310:	0003      	movs	r3, r0
 8003312:	405d      	eors	r5, r3
 8003314:	19bb      	adds	r3, r7, r6
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2119      	movs	r1, #25
 800331a:	0018      	movs	r0, r3
 800331c:	f7ff fd9f 	bl	8002e5e <rotrFixed>
 8003320:	0003      	movs	r3, r0
 8003322:	406b      	eors	r3, r5
 8003324:	18e2      	adds	r2, r4, r3
 8003326:	0035      	movs	r5, r6
 8003328:	197b      	adds	r3, r7, r5
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	197b      	adds	r3, r7, r5
 800332e:	6898      	ldr	r0, [r3, #8]
 8003330:	197b      	adds	r3, r7, r5
 8003332:	68dc      	ldr	r4, [r3, #12]
 8003334:	197b      	adds	r3, r7, r5
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	4063      	eors	r3, r4
 800333a:	4003      	ands	r3, r0
 800333c:	404b      	eors	r3, r1
 800333e:	18d2      	adds	r2, r2, r3
 8003340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003342:	1c99      	adds	r1, r3, #2
 8003344:	4b94      	ldr	r3, [pc, #592]	; (8003598 <Transform_Sha256+0x5ac>)
 8003346:	0089      	lsls	r1, r1, #2
 8003348:	58cb      	ldr	r3, [r1, r3]
 800334a:	18d2      	adds	r2, r2, r3
 800334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334e:	3302      	adds	r3, #2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003354:	18cb      	adds	r3, r1, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	18d3      	adds	r3, r2, r3
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
 800335c:	197b      	adds	r3, r7, r5
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2102      	movs	r1, #2
 8003362:	0018      	movs	r0, r3
 8003364:	f7ff fd7b 	bl	8002e5e <rotrFixed>
 8003368:	0004      	movs	r4, r0
 800336a:	197b      	adds	r3, r7, r5
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	210d      	movs	r1, #13
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff fd74 	bl	8002e5e <rotrFixed>
 8003376:	0003      	movs	r3, r0
 8003378:	405c      	eors	r4, r3
 800337a:	197b      	adds	r3, r7, r5
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2116      	movs	r1, #22
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fd6c 	bl	8002e5e <rotrFixed>
 8003386:	0003      	movs	r3, r0
 8003388:	0022      	movs	r2, r4
 800338a:	405a      	eors	r2, r3
 800338c:	002c      	movs	r4, r5
 800338e:	193b      	adds	r3, r7, r4
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	193b      	adds	r3, r7, r4
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4319      	orrs	r1, r3
 8003398:	193b      	adds	r3, r7, r4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4019      	ands	r1, r3
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	6998      	ldr	r0, [r3, #24]
 80033a2:	193b      	adds	r3, r7, r4
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4003      	ands	r3, r0
 80033a8:	430b      	orrs	r3, r1
 80033aa:	18d3      	adds	r3, r2, r3
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ae:	193b      	adds	r3, r7, r4
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	18d2      	adds	r2, r2, r3
 80033b6:	193b      	adds	r3, r7, r4
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	18d2      	adds	r2, r2, r3
 80033c0:	0026      	movs	r6, r4
 80033c2:	19bb      	adds	r3, r7, r6
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	19bb      	adds	r3, r7, r6
 80033c8:	691c      	ldr	r4, [r3, #16]
 80033ca:	19bb      	adds	r3, r7, r6
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2106      	movs	r1, #6
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff fd44 	bl	8002e5e <rotrFixed>
 80033d6:	0005      	movs	r5, r0
 80033d8:	19bb      	adds	r3, r7, r6
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	210b      	movs	r1, #11
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff fd3d 	bl	8002e5e <rotrFixed>
 80033e4:	0003      	movs	r3, r0
 80033e6:	405d      	eors	r5, r3
 80033e8:	19bb      	adds	r3, r7, r6
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2119      	movs	r1, #25
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fd35 	bl	8002e5e <rotrFixed>
 80033f4:	0003      	movs	r3, r0
 80033f6:	406b      	eors	r3, r5
 80033f8:	18e2      	adds	r2, r4, r3
 80033fa:	0035      	movs	r5, r6
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	68d9      	ldr	r1, [r3, #12]
 8003400:	197b      	adds	r3, r7, r5
 8003402:	6858      	ldr	r0, [r3, #4]
 8003404:	197b      	adds	r3, r7, r5
 8003406:	689c      	ldr	r4, [r3, #8]
 8003408:	197b      	adds	r3, r7, r5
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4063      	eors	r3, r4
 800340e:	4003      	ands	r3, r0
 8003410:	404b      	eors	r3, r1
 8003412:	18d2      	adds	r2, r2, r3
 8003414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003416:	1cd9      	adds	r1, r3, #3
 8003418:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <Transform_Sha256+0x5ac>)
 800341a:	0089      	lsls	r1, r1, #2
 800341c:	58cb      	ldr	r3, [r1, r3]
 800341e:	18d2      	adds	r2, r2, r3
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	3303      	adds	r3, #3
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003428:	18cb      	adds	r3, r1, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
 8003430:	197b      	adds	r3, r7, r5
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	2102      	movs	r1, #2
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff fd11 	bl	8002e5e <rotrFixed>
 800343c:	0004      	movs	r4, r0
 800343e:	197b      	adds	r3, r7, r5
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	210d      	movs	r1, #13
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fd0a 	bl	8002e5e <rotrFixed>
 800344a:	0003      	movs	r3, r0
 800344c:	405c      	eors	r4, r3
 800344e:	197b      	adds	r3, r7, r5
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2116      	movs	r1, #22
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fd02 	bl	8002e5e <rotrFixed>
 800345a:	0003      	movs	r3, r0
 800345c:	0022      	movs	r2, r4
 800345e:	405a      	eors	r2, r3
 8003460:	002c      	movs	r4, r5
 8003462:	193b      	adds	r3, r7, r4
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	193b      	adds	r3, r7, r4
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4319      	orrs	r1, r3
 800346c:	193b      	adds	r3, r7, r4
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4019      	ands	r1, r3
 8003472:	193b      	adds	r3, r7, r4
 8003474:	6958      	ldr	r0, [r3, #20]
 8003476:	193b      	adds	r3, r7, r4
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	4003      	ands	r3, r0
 800347c:	430b      	orrs	r3, r1
 800347e:	18d3      	adds	r3, r2, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	193b      	adds	r3, r7, r4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	18d2      	adds	r2, r2, r3
 800348a:	193b      	adds	r3, r7, r4
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003492:	18d2      	adds	r2, r2, r3
 8003494:	0026      	movs	r6, r4
 8003496:	19bb      	adds	r3, r7, r6
 8003498:	611a      	str	r2, [r3, #16]
            RND(4); RND(5); RND(6); RND(7);
 800349a:	19bb      	adds	r3, r7, r6
 800349c:	68dc      	ldr	r4, [r3, #12]
 800349e:	19bb      	adds	r3, r7, r6
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2106      	movs	r1, #6
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff fcda 	bl	8002e5e <rotrFixed>
 80034aa:	0005      	movs	r5, r0
 80034ac:	19bb      	adds	r3, r7, r6
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	210b      	movs	r1, #11
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fcd3 	bl	8002e5e <rotrFixed>
 80034b8:	0003      	movs	r3, r0
 80034ba:	405d      	eors	r5, r3
 80034bc:	19bb      	adds	r3, r7, r6
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2119      	movs	r1, #25
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fccb 	bl	8002e5e <rotrFixed>
 80034c8:	0003      	movs	r3, r0
 80034ca:	406b      	eors	r3, r5
 80034cc:	18e2      	adds	r2, r4, r3
 80034ce:	0035      	movs	r5, r6
 80034d0:	197b      	adds	r3, r7, r5
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	197b      	adds	r3, r7, r5
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	197b      	adds	r3, r7, r5
 80034da:	685c      	ldr	r4, [r3, #4]
 80034dc:	197b      	adds	r3, r7, r5
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4063      	eors	r3, r4
 80034e2:	4003      	ands	r3, r0
 80034e4:	404b      	eors	r3, r1
 80034e6:	18d2      	adds	r2, r2, r3
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	1d19      	adds	r1, r3, #4
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <Transform_Sha256+0x5ac>)
 80034ee:	0089      	lsls	r1, r1, #2
 80034f0:	58cb      	ldr	r3, [r1, r3]
 80034f2:	18d2      	adds	r2, r2, r3
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	3304      	adds	r3, #4
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034fc:	18cb      	adds	r3, r1, r3
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
 8003504:	197b      	adds	r3, r7, r5
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2102      	movs	r1, #2
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fca7 	bl	8002e5e <rotrFixed>
 8003510:	0004      	movs	r4, r0
 8003512:	197b      	adds	r3, r7, r5
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	210d      	movs	r1, #13
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff fca0 	bl	8002e5e <rotrFixed>
 800351e:	0003      	movs	r3, r0
 8003520:	405c      	eors	r4, r3
 8003522:	197b      	adds	r3, r7, r5
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2116      	movs	r1, #22
 8003528:	0018      	movs	r0, r3
 800352a:	f7ff fc98 	bl	8002e5e <rotrFixed>
 800352e:	0003      	movs	r3, r0
 8003530:	0022      	movs	r2, r4
 8003532:	405a      	eors	r2, r3
 8003534:	002c      	movs	r4, r5
 8003536:	193b      	adds	r3, r7, r4
 8003538:	6919      	ldr	r1, [r3, #16]
 800353a:	193b      	adds	r3, r7, r4
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4319      	orrs	r1, r3
 8003540:	193b      	adds	r3, r7, r4
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4019      	ands	r1, r3
 8003546:	193b      	adds	r3, r7, r4
 8003548:	6918      	ldr	r0, [r3, #16]
 800354a:	193b      	adds	r3, r7, r4
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4003      	ands	r3, r0
 8003550:	430b      	orrs	r3, r1
 8003552:	18d3      	adds	r3, r2, r3
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	193b      	adds	r3, r7, r4
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	18d2      	adds	r2, r2, r3
 800355e:	193b      	adds	r3, r7, r4
 8003560:	61da      	str	r2, [r3, #28]
 8003562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	18d2      	adds	r2, r2, r3
 8003568:	0026      	movs	r6, r4
 800356a:	19bb      	adds	r3, r7, r6
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	19bb      	adds	r3, r7, r6
 8003570:	689c      	ldr	r4, [r3, #8]
 8003572:	19bb      	adds	r3, r7, r6
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2106      	movs	r1, #6
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fc70 	bl	8002e5e <rotrFixed>
 800357e:	0005      	movs	r5, r0
 8003580:	19bb      	adds	r3, r7, r6
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	210b      	movs	r1, #11
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff fc69 	bl	8002e5e <rotrFixed>
 800358c:	0003      	movs	r3, r0
 800358e:	405d      	eors	r5, r3
 8003590:	19bb      	adds	r3, r7, r6
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	e002      	b.n	800359c <Transform_Sha256+0x5b0>
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	08005410 	.word	0x08005410
 800359c:	2119      	movs	r1, #25
 800359e:	0018      	movs	r0, r3
 80035a0:	f7ff fc5d 	bl	8002e5e <rotrFixed>
 80035a4:	0003      	movs	r3, r0
 80035a6:	406b      	eors	r3, r5
 80035a8:	18e2      	adds	r2, r4, r3
 80035aa:	0035      	movs	r5, r6
 80035ac:	197b      	adds	r3, r7, r5
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	197b      	adds	r3, r7, r5
 80035b2:	69d8      	ldr	r0, [r3, #28]
 80035b4:	197b      	adds	r3, r7, r5
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	197b      	adds	r3, r7, r5
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4063      	eors	r3, r4
 80035be:	4003      	ands	r3, r0
 80035c0:	404b      	eors	r3, r1
 80035c2:	18d2      	adds	r2, r2, r3
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	1d59      	adds	r1, r3, #5
 80035c8:	4b9f      	ldr	r3, [pc, #636]	; (8003848 <Transform_Sha256+0x85c>)
 80035ca:	0089      	lsls	r1, r1, #2
 80035cc:	58cb      	ldr	r3, [r1, r3]
 80035ce:	18d2      	adds	r2, r2, r3
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	3305      	adds	r3, #5
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035d8:	18cb      	adds	r3, r1, r3
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
 80035e0:	197b      	adds	r3, r7, r5
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2102      	movs	r1, #2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff fc39 	bl	8002e5e <rotrFixed>
 80035ec:	0004      	movs	r4, r0
 80035ee:	197b      	adds	r3, r7, r5
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	210d      	movs	r1, #13
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fc32 	bl	8002e5e <rotrFixed>
 80035fa:	0003      	movs	r3, r0
 80035fc:	405c      	eors	r4, r3
 80035fe:	197b      	adds	r3, r7, r5
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2116      	movs	r1, #22
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff fc2a 	bl	8002e5e <rotrFixed>
 800360a:	0003      	movs	r3, r0
 800360c:	0022      	movs	r2, r4
 800360e:	405a      	eors	r2, r3
 8003610:	002c      	movs	r4, r5
 8003612:	193b      	adds	r3, r7, r4
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	193b      	adds	r3, r7, r4
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4319      	orrs	r1, r3
 800361c:	193b      	adds	r3, r7, r4
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4019      	ands	r1, r3
 8003622:	193b      	adds	r3, r7, r4
 8003624:	68d8      	ldr	r0, [r3, #12]
 8003626:	193b      	adds	r3, r7, r4
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	4003      	ands	r3, r0
 800362c:	430b      	orrs	r3, r1
 800362e:	18d3      	adds	r3, r2, r3
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	193b      	adds	r3, r7, r4
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	18d2      	adds	r2, r2, r3
 800363a:	193b      	adds	r3, r7, r4
 800363c:	619a      	str	r2, [r3, #24]
 800363e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	18d2      	adds	r2, r2, r3
 8003644:	0026      	movs	r6, r4
 8003646:	19bb      	adds	r3, r7, r6
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	19bb      	adds	r3, r7, r6
 800364c:	685c      	ldr	r4, [r3, #4]
 800364e:	19bb      	adds	r3, r7, r6
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2106      	movs	r1, #6
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fc02 	bl	8002e5e <rotrFixed>
 800365a:	0005      	movs	r5, r0
 800365c:	19bb      	adds	r3, r7, r6
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	210b      	movs	r1, #11
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff fbfb 	bl	8002e5e <rotrFixed>
 8003668:	0003      	movs	r3, r0
 800366a:	405d      	eors	r5, r3
 800366c:	19bb      	adds	r3, r7, r6
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2119      	movs	r1, #25
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fbf3 	bl	8002e5e <rotrFixed>
 8003678:	0003      	movs	r3, r0
 800367a:	406b      	eors	r3, r5
 800367c:	18e2      	adds	r2, r4, r3
 800367e:	0035      	movs	r5, r6
 8003680:	197b      	adds	r3, r7, r5
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	197b      	adds	r3, r7, r5
 8003686:	6998      	ldr	r0, [r3, #24]
 8003688:	197b      	adds	r3, r7, r5
 800368a:	69dc      	ldr	r4, [r3, #28]
 800368c:	197b      	adds	r3, r7, r5
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4063      	eors	r3, r4
 8003692:	4003      	ands	r3, r0
 8003694:	404b      	eors	r3, r1
 8003696:	18d2      	adds	r2, r2, r3
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	1d99      	adds	r1, r3, #6
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <Transform_Sha256+0x85c>)
 800369e:	0089      	lsls	r1, r1, #2
 80036a0:	58cb      	ldr	r3, [r1, r3]
 80036a2:	18d2      	adds	r2, r2, r3
 80036a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a6:	3306      	adds	r3, #6
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ac:	18cb      	adds	r3, r1, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
 80036b4:	197b      	adds	r3, r7, r5
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2102      	movs	r1, #2
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff fbcf 	bl	8002e5e <rotrFixed>
 80036c0:	0004      	movs	r4, r0
 80036c2:	197b      	adds	r3, r7, r5
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	210d      	movs	r1, #13
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff fbc8 	bl	8002e5e <rotrFixed>
 80036ce:	0003      	movs	r3, r0
 80036d0:	405c      	eors	r4, r3
 80036d2:	197b      	adds	r3, r7, r5
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2116      	movs	r1, #22
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff fbc0 	bl	8002e5e <rotrFixed>
 80036de:	0003      	movs	r3, r0
 80036e0:	0022      	movs	r2, r4
 80036e2:	405a      	eors	r2, r3
 80036e4:	002c      	movs	r4, r5
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4319      	orrs	r1, r3
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4019      	ands	r1, r3
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	6898      	ldr	r0, [r3, #8]
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4003      	ands	r3, r0
 8003700:	430b      	orrs	r3, r1
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003706:	193b      	adds	r3, r7, r4
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	18d2      	adds	r2, r2, r3
 800370e:	193b      	adds	r3, r7, r4
 8003710:	615a      	str	r2, [r3, #20]
 8003712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	18d2      	adds	r2, r2, r3
 8003718:	0026      	movs	r6, r4
 800371a:	19bb      	adds	r3, r7, r6
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	19bb      	adds	r3, r7, r6
 8003720:	681c      	ldr	r4, [r3, #0]
 8003722:	19bb      	adds	r3, r7, r6
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2106      	movs	r1, #6
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff fb98 	bl	8002e5e <rotrFixed>
 800372e:	0005      	movs	r5, r0
 8003730:	19bb      	adds	r3, r7, r6
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	210b      	movs	r1, #11
 8003736:	0018      	movs	r0, r3
 8003738:	f7ff fb91 	bl	8002e5e <rotrFixed>
 800373c:	0003      	movs	r3, r0
 800373e:	405d      	eors	r5, r3
 8003740:	19bb      	adds	r3, r7, r6
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2119      	movs	r1, #25
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff fb89 	bl	8002e5e <rotrFixed>
 800374c:	0003      	movs	r3, r0
 800374e:	406b      	eors	r3, r5
 8003750:	18e2      	adds	r2, r4, r3
 8003752:	0035      	movs	r5, r6
 8003754:	197b      	adds	r3, r7, r5
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	197b      	adds	r3, r7, r5
 800375a:	6958      	ldr	r0, [r3, #20]
 800375c:	197b      	adds	r3, r7, r5
 800375e:	699c      	ldr	r4, [r3, #24]
 8003760:	197b      	adds	r3, r7, r5
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	4063      	eors	r3, r4
 8003766:	4003      	ands	r3, r0
 8003768:	404b      	eors	r3, r1
 800376a:	18d2      	adds	r2, r2, r3
 800376c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376e:	1dd9      	adds	r1, r3, #7
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <Transform_Sha256+0x85c>)
 8003772:	0089      	lsls	r1, r1, #2
 8003774:	58cb      	ldr	r3, [r1, r3]
 8003776:	18d2      	adds	r2, r2, r3
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	3307      	adds	r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003780:	18cb      	adds	r3, r1, r3
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
 8003788:	197b      	adds	r3, r7, r5
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2102      	movs	r1, #2
 800378e:	0018      	movs	r0, r3
 8003790:	f7ff fb65 	bl	8002e5e <rotrFixed>
 8003794:	0004      	movs	r4, r0
 8003796:	197b      	adds	r3, r7, r5
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	210d      	movs	r1, #13
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff fb5e 	bl	8002e5e <rotrFixed>
 80037a2:	0003      	movs	r3, r0
 80037a4:	405c      	eors	r4, r3
 80037a6:	197b      	adds	r3, r7, r5
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2116      	movs	r1, #22
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff fb56 	bl	8002e5e <rotrFixed>
 80037b2:	0003      	movs	r3, r0
 80037b4:	0022      	movs	r2, r4
 80037b6:	405a      	eors	r2, r3
 80037b8:	002c      	movs	r4, r5
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4319      	orrs	r1, r3
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4019      	ands	r1, r3
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	6858      	ldr	r0, [r3, #4]
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4003      	ands	r3, r0
 80037d4:	430b      	orrs	r3, r1
 80037d6:	18d3      	adds	r3, r2, r3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	193b      	adds	r3, r7, r4
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	18d2      	adds	r2, r2, r3
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	611a      	str	r2, [r3, #16]
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	18d2      	adds	r2, r2, r3
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	601a      	str	r2, [r3, #0]
        for (i = 0; i < WC_SHA256_BLOCK_SIZE; i += 8) {
 80037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f2:	3308      	adds	r3, #8
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f8:	2b3f      	cmp	r3, #63	; 0x3f
 80037fa:	dc00      	bgt.n	80037fe <Transform_Sha256+0x812>
 80037fc:	e4a6      	b.n	800314c <Transform_Sha256+0x160>
        }
    #endif /* USE_SLOW_SHA256 */

        /* Add the working vars back into digest state[] */
        for (i = 0; i < 8; i++) {
 80037fe:	2300      	movs	r3, #0
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003802:	e010      	b.n	8003826 <Transform_Sha256+0x83a>
            sha256->digest[i] += S[i];
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	58d2      	ldr	r2, [r2, r3]
 800380c:	230c      	movs	r3, #12
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003812:	0089      	lsls	r1, r1, #2
 8003814:	58cb      	ldr	r3, [r1, r3]
 8003816:	18d1      	adds	r1, r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800381c:	0092      	lsls	r2, r2, #2
 800381e:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++) {
 8003820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003822:	3301      	adds	r3, #1
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	2b07      	cmp	r3, #7
 800382a:	ddeb      	ble.n	8003804 <Transform_Sha256+0x818>
        }

    #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
        XFREE(W, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <Transform_Sha256+0x852>
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff f94d 	bl	8002ad8 <wolfSSL_Free>
    #endif
        return 0;
 800383e:	2300      	movs	r3, #0
    }
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b011      	add	sp, #68	; 0x44
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	08005410 	.word	0x08005410

0800384c <AddLength>:


#ifdef XTRANSFORM

    static WC_INLINE void AddLength(wc_Sha256* sha256, word32 len)
    {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
        word32 tmp = sha256->loLen;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385a:	60fb      	str	r3, [r7, #12]
        if ((sha256->loLen += len) < tmp) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	18d2      	adds	r2, r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	665a      	str	r2, [r3, #100]	; 0x64
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	429a      	cmp	r2, r3
 8003870:	d904      	bls.n	800387c <AddLength+0x30>
            sha256->hiLen++;                       /* carry low to high */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	669a      	str	r2, [r3, #104]	; 0x68
        }
    }
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b004      	add	sp, #16
 8003882:	bd80      	pop	{r7, pc}

08003884 <Sha256Update>:

    /* do block size increments/updates */
    static WC_INLINE int Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
        int ret = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
        word32 blocksLen;
        byte* local;

        if (sha256 == NULL || (data == NULL && len > 0)) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <Sha256Update+0x22>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <Sha256Update+0x28>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <Sha256Update+0x28>
            return BAD_FUNC_ARG;
 80038a6:	23ad      	movs	r3, #173	; 0xad
 80038a8:	425b      	negs	r3, r3
 80038aa:	e091      	b.n	80039d0 <Sha256Update+0x14c>
        }

        if (data == NULL && len == 0) {
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <Sha256Update+0x38>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <Sha256Update+0x38>
            /* valid, but do nothing */
            return 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e089      	b.n	80039d0 <Sha256Update+0x14c>
        }

        /* check that internal buffLen is valid */
        if (sha256->buffLen >= WC_SHA256_BLOCK_SIZE) {
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	2b3f      	cmp	r3, #63	; 0x3f
 80038c2:	d902      	bls.n	80038ca <Sha256Update+0x46>
            return BUFFER_E;
 80038c4:	2384      	movs	r3, #132	; 0x84
 80038c6:	425b      	negs	r3, r3
 80038c8:	e082      	b.n	80039d0 <Sha256Update+0x14c>
        }

        /* add length for final */
        AddLength(sha256, len);
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7ff ffbb 	bl	800384c <AddLength>

        local = (byte*)sha256->buffer;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3320      	adds	r3, #32
 80038da:	61bb      	str	r3, [r7, #24]

        /* process any remainder from previous operation */
        if (sha256->buffLen > 0) {
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d060      	beq.n	80039a6 <Sha256Update+0x122>
            blocksLen = min(len, WC_SHA256_BLOCK_SIZE - sha256->buffLen);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	2240      	movs	r2, #64	; 0x40
 80038ea:	1ad2      	subs	r2, r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0011      	movs	r1, r2
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7ff fb03 	bl	8002efc <min>
 80038f6:	0003      	movs	r3, r0
 80038f8:	617b      	str	r3, [r7, #20]
            XMEMCPY(&local[sha256->buffLen], data, blocksLen);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	18d3      	adds	r3, r2, r3
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fe57 	bl	80045ba <memcpy>

            sha256->buffLen += blocksLen;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	18d2      	adds	r2, r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	661a      	str	r2, [r3, #96]	; 0x60
            data            += blocksLen;
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	60bb      	str	r3, [r7, #8]
            len             -= blocksLen;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	607b      	str	r3, [r7, #4]

            if (sha256->buffLen == WC_SHA256_BLOCK_SIZE) {
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d13a      	bne.n	80039a6 <Sha256Update+0x122>
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(sha256->buffer, sha256->buffer,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3320      	adds	r3, #32
 8003934:	0018      	movs	r0, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3320      	adds	r3, #32
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	0019      	movs	r1, r3
 800393e:	f7ff fab7 	bl	8002eb0 <ByteReverseWords>
                }
                else {
                    esp_sha256_process(sha256, (const byte*)local);
                }
            #else
                ret = XTRANSFORM(sha256, (const byte*)local);
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff fb4f 	bl	8002fec <Transform_Sha256>
 800394e:	0003      	movs	r3, r0
 8003950:	61fb      	str	r3, [r7, #28]
            #endif

                if (ret == 0)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <Sha256Update+0xdc>
                    sha256->buffLen = 0;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
 800395e:	e022      	b.n	80039a6 <Sha256Update+0x122>
                else
                    len = 0; /* error */
 8003960:	2300      	movs	r3, #0
 8003962:	607b      	str	r3, [r7, #4]
    #endif /* XTRANSFORM_LEN */
    #if !defined(XTRANSFORM_LEN) || \
        (defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
        {
            while (len >= WC_SHA256_BLOCK_SIZE) {
 8003964:	e01f      	b.n	80039a6 <Sha256Update+0x122>
                word32* local32 = sha256->buffer;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3320      	adds	r3, #32
 800396a:	613b      	str	r3, [r7, #16]
                    local32 = (word32*)data;
                }
                else
            #endif
                {
                    XMEMCPY(local32, data, WC_SHA256_BLOCK_SIZE);
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2240      	movs	r2, #64	; 0x40
 8003972:	0018      	movs	r0, r3
 8003974:	f000 fe21 	bl	80045ba <memcpy>
                }

                data += WC_SHA256_BLOCK_SIZE;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3340      	adds	r3, #64	; 0x40
 800397c:	60bb      	str	r3, [r7, #8]
                len  -= WC_SHA256_BLOCK_SIZE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3b40      	subs	r3, #64	; 0x40
 8003982:	607b      	str	r3, [r7, #4]
                          defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
                if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
                #endif
                {
                    ByteReverseWords(local32, local32, WC_SHA256_BLOCK_SIZE);
 8003984:	6939      	ldr	r1, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2240      	movs	r2, #64	; 0x40
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff fa90 	bl	8002eb0 <ByteReverseWords>
                }
                else {
                    esp_sha256_process(sha256, (const byte*)local32);
                }
#else
                ret = XTRANSFORM(sha256, (const byte*)local32);
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0011      	movs	r1, r2
 8003996:	0018      	movs	r0, r3
 8003998:	f7ff fb28 	bl	8002fec <Transform_Sha256>
 800399c:	0003      	movs	r3, r0
 800399e:	61fb      	str	r3, [r7, #28]
            #endif

                if (ret != 0)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d103      	bne.n	80039ae <Sha256Update+0x12a>
            while (len >= WC_SHA256_BLOCK_SIZE) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b3f      	cmp	r3, #63	; 0x3f
 80039aa:	d8dc      	bhi.n	8003966 <Sha256Update+0xe2>
 80039ac:	e000      	b.n	80039b0 <Sha256Update+0x12c>
                    break;
 80039ae:	46c0      	nop			; (mov r8, r8)
            }
        }
    #endif

        /* save remainder */
        if (ret == 0 && len > 0) {
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <Sha256Update+0x14a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <Sha256Update+0x14a>
            XMEMCPY(local, data, len);
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fdf9 	bl	80045ba <memcpy>
            sha256->buffLen = len;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        return ret;
 80039ce:	69fb      	ldr	r3, [r7, #28]
    }
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b008      	add	sp, #32
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <wc_Sha256Update>:
#if defined(WOLFSSL_KCAPI_HASH)
    /* implemented in wolfcrypt/src/port/kcapi/kcapi_hash.c */

#else
    int wc_Sha256Update(wc_Sha256* sha256, const byte* data, word32 len)
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
        if (sha256 == NULL || (data == NULL && len > 0)) {
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <wc_Sha256Update+0x1e>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <wc_Sha256Update+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <wc_Sha256Update+0x24>
            return BAD_FUNC_ARG;
 80039f6:	23ad      	movs	r3, #173	; 0xad
 80039f8:	425b      	negs	r3, r3
 80039fa:	e00e      	b.n	8003a1a <wc_Sha256Update+0x42>
        }

        if (data == NULL && len == 0) {
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <wc_Sha256Update+0x34>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <wc_Sha256Update+0x34>
            /* valid, but do nothing */
            return 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e006      	b.n	8003a1a <wc_Sha256Update+0x42>
            return IntelQaSymSha256(&sha256->asyncDev, NULL, data, len);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        return Sha256Update(sha256, data, len);
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f7ff ff36 	bl	8003884 <Sha256Update>
 8003a18:	0003      	movs	r3, r0
    }
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <Sha256Final>:
#endif

    static WC_INLINE int Sha256Final(wc_Sha256* sha256)
    {
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]

        int ret;
        byte* local;

        if (sha256 == NULL) {
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <Sha256Final+0x14>
            return BAD_FUNC_ARG;
 8003a30:	23ad      	movs	r3, #173	; 0xad
 8003a32:	425b      	negs	r3, r3
 8003a34:	e075      	b.n	8003b22 <Sha256Final+0x100>
        }

        local = (byte*)sha256->buffer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	60fb      	str	r3, [r7, #12]
        local[sha256->buffLen++] = 0x80; /* add 1 */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a40:	1c59      	adds	r1, r3, #1
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6611      	str	r1, [r2, #96]	; 0x60
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	701a      	strb	r2, [r3, #0]

        /* pad with zeros */
        if (sha256->buffLen > WC_SHA256_PAD_SIZE) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	2b38      	cmp	r3, #56	; 0x38
 8003a54:	d927      	bls.n	8003aa6 <Sha256Final+0x84>
            XMEMSET(&local[sha256->buffLen], 0,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	18d0      	adds	r0, r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	001a      	movs	r2, r3
 8003a68:	2100      	movs	r1, #0
 8003a6a:	f000 fd10 	bl	800448e <memset>
                WC_SHA256_BLOCK_SIZE - sha256->buffLen);
            sha256->buffLen += WC_SHA256_BLOCK_SIZE - sha256->buffLen;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
            #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
            if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
            #endif
            {
                ByteReverseWords(sha256->buffer, sha256->buffer,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3320      	adds	r3, #32
 8003a78:	0018      	movs	r0, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	0019      	movs	r1, r3
 8003a82:	f7ff fa15 	bl	8002eb0 <ByteReverseWords>
            }
            else {
                ret = esp_sha256_process(sha256, (const byte*)local);
            }
        #else
            ret = XTRANSFORM(sha256, (const byte*)local);
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff faad 	bl	8002fec <Transform_Sha256>
 8003a92:	0003      	movs	r3, r0
 8003a94:	60bb      	str	r3, [r7, #8]
        #endif
            if (ret != 0)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <Sha256Final+0x7e>
                return ret;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	e040      	b.n	8003b22 <Sha256Final+0x100>

            sha256->buffLen = 0;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	661a      	str	r2, [r3, #96]	; 0x60
        }
        XMEMSET(&local[sha256->buffLen], 0,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	18d0      	adds	r0, r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab2:	2238      	movs	r2, #56	; 0x38
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f000 fce8 	bl	800448e <memset>
            WC_SHA256_PAD_SIZE - sha256->buffLen);

        /* put lengths in bits */
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac2:	0f5a      	lsrs	r2, r3, #29
                                                         (sha256->hiLen << 3);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac8:	00db      	lsls	r3, r3, #3
        sha256->hiLen = (sha256->loLen >> (8 * sizeof(sha256->loLen) - 3)) +
 8003aca:	18d2      	adds	r2, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	669a      	str	r2, [r3, #104]	; 0x68
        sha256->loLen = sha256->loLen << 3;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad4:	00da      	lsls	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	665a      	str	r2, [r3, #100]	; 0x64
        #if defined(WOLFSSL_X86_64_BUILD) && defined(USE_INTEL_SPEEDUP) && \
                          (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
        if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
        #endif
        {
            ByteReverseWords(sha256->buffer, sha256->buffer,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3320      	adds	r3, #32
 8003ade:	0018      	movs	r0, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3320      	adds	r3, #32
 8003ae4:	2240      	movs	r2, #64	; 0x40
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	f7ff f9e2 	bl	8002eb0 <ByteReverseWords>
                WC_SHA256_BLOCK_SIZE);
        }
    #endif
        /* ! length ordering dependent on digest endian type ! */
        XMEMCPY(&local[WC_SHA256_PAD_SIZE], &sha256->hiLen, sizeof(word32));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3338      	adds	r3, #56	; 0x38
 8003af0:	0018      	movs	r0, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3368      	adds	r3, #104	; 0x68
 8003af6:	2204      	movs	r2, #4
 8003af8:	0019      	movs	r1, r3
 8003afa:	f000 fd5e 	bl	80045ba <memcpy>
        XMEMCPY(&local[WC_SHA256_PAD_SIZE + sizeof(word32)], &sha256->loLen,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	333c      	adds	r3, #60	; 0x3c
 8003b02:	0018      	movs	r0, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3364      	adds	r3, #100	; 0x64
 8003b08:	2204      	movs	r2, #4
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	f000 fd55 	bl	80045ba <memcpy>
        }
        else {
            ret = esp_sha256_digest_process(sha256, 1);
        }
    #else
        ret = XTRANSFORM(sha256, (const byte*)local);
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7ff fa68 	bl	8002fec <Transform_Sha256>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	60bb      	str	r3, [r7, #8]
    #endif

        return ret;
 8003b20:	68bb      	ldr	r3, [r7, #8]
    }
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b004      	add	sp, #16
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <wc_Sha256Final>:

        return 0;
    }

    int wc_Sha256Final(wc_Sha256* sha256, byte* hash)
    {
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
        int ret;

        if (sha256 == NULL || hash == NULL) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <wc_Sha256Final+0x16>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <wc_Sha256Final+0x1c>
            return BAD_FUNC_ARG;
 8003b40:	23ad      	movs	r3, #173	; 0xad
 8003b42:	425b      	negs	r3, r3
 8003b44:	e01b      	b.n	8003b7e <wc_Sha256Final+0x54>
                                            WC_SHA256_DIGEST_SIZE);
        #endif
        }
    #endif /* WOLFSSL_ASYNC_CRYPT */

        ret = Sha256Final(sha256);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff ff6a 	bl	8003a22 <Sha256Final>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	60fb      	str	r3, [r7, #12]
        if (ret != 0)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <wc_Sha256Final+0x32>
            return ret;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	e010      	b.n	8003b7e <wc_Sha256Final+0x54>

    #if defined(LITTLE_ENDIAN_ORDER)
        ByteReverseWords(sha256->digest, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7ff f9a4 	bl	8002eb0 <ByteReverseWords>
    #endif
        XMEMCPY(hash, sha256->digest, WC_SHA256_DIGEST_SIZE);
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fd23 	bl	80045ba <memcpy>

        return InitSha256(sha256);  /* reset state */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff f9ce 	bl	8002f18 <InitSha256>
 8003b7c:	0003      	movs	r3, r0
    }
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b004      	add	sp, #16
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <wc_Sha256Free>:

#if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
    /* implemented in wolfcrypt/src/port/psa/psa_hash.c */

void wc_Sha256Free(wc_Sha256* sha256)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
    }
    else {
        ESP_LOGV("sha256", "Hardware unlock not needed in wc_Sha256Free.");
    }
#endif
}
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <wolfCrypt_Init>:
/* Used to initialize state for wolfcrypt
   return 0 on success
 */
WOLFSSL_ABI
int wolfCrypt_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
    int ret = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
    if (initRefCount == 0) {
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <wolfCrypt_Init+0x64>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11d      	bne.n	8003be2 <wolfCrypt_Init+0x4e>
        WOLFSSL_ENTER("wolfCrypt_Init");
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <wolfCrypt_Init+0x68>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fd ff19 	bl	80019e0 <WOLFSSL_ENTER>
        }
    #endif

    #if WOLFSSL_CRYPT_HW_MUTEX
        /* If crypto hardware mutex protection is enabled, then initialize it */
        ret = wolfSSL_CryptHwMutexInit();
 8003bae:	f000 f82b 	bl	8003c08 <wolfSSL_CryptHwMutexInit>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	607b      	str	r3, [r7, #4]
        if (ret != 0) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <wolfCrypt_Init+0x34>
            WOLFSSL_MSG("Hw crypt mutex init failed");
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <wolfCrypt_Init+0x6c>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7fd fefa 	bl	80019b8 <WOLFSSL_MSG>
            return ret;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	e012      	b.n	8003bee <wolfCrypt_Init+0x5a>
    #if !defined(WOLFCRYPT_ONLY) && defined(OPENSSL_EXTRA)
        wolfSSL_EVP_init();
    #endif

    #if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)
        if ((ret = wc_LoggingInit()) != 0) {
 8003bc8:	f7fd ff26 	bl	8001a18 <wc_LoggingInit>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <wolfCrypt_Init+0x4e>
            WOLFSSL_MSG("Error creating logging mutex");
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <wolfCrypt_Init+0x70>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fd feed 	bl	80019b8 <WOLFSSL_MSG>
            return ret;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	e005      	b.n	8003bee <wolfCrypt_Init+0x5a>
            return ret;
        }
        rpcmem_init();
#endif
    }
    initRefCount++;
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <wolfCrypt_Init+0x64>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <wolfCrypt_Init+0x64>)
 8003bea:	601a      	str	r2, [r3, #0]

    return ret;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	200000b0 	.word	0x200000b0
 8003bfc:	080052b8 	.word	0x080052b8
 8003c00:	080052c8 	.word	0x080052c8
 8003c04:	080052e4 	.word	0x080052e4

08003c08 <wolfSSL_CryptHwMutexInit>:
/* Mutex for protection of cryptography hardware */
static wolfSSL_Mutex wcCryptHwMutex;
static int wcCryptHwMutexInit = 0;

int wolfSSL_CryptHwMutexInit(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    int ret = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
    if (wcCryptHwMutexInit == 0) {
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <wolfSSL_CryptHwMutexInit+0x34>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <wolfSSL_CryptHwMutexInit+0x2a>
        ret = wc_InitMutex(&wcCryptHwMutex);
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <wolfSSL_CryptHwMutexInit+0x38>)
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 f811 	bl	8003c44 <wc_InitMutex>
 8003c22:	0003      	movs	r3, r0
 8003c24:	607b      	str	r3, [r7, #4]
        if (ret == 0) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <wolfSSL_CryptHwMutexInit+0x2a>
            wcCryptHwMutexInit = 1;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <wolfSSL_CryptHwMutexInit+0x34>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
        }
    }
    return ret;
 8003c32:	687b      	ldr	r3, [r7, #4]
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200000b8 	.word	0x200000b8
 8003c40:	200000b4 	.word	0x200000b4

08003c44 <wc_InitMutex>:
    }
#endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
#ifdef SINGLE_THREADED

    int wc_InitMutex(wolfSSL_Mutex* m)
    {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
        (void)m;
        return 0;
 8003c4c:	2300      	movs	r3, #0
    }
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b002      	add	sp, #8
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <malloc>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <malloc+0x10>)
 8003c5c:	0001      	movs	r1, r0
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	f000 f830 	bl	8003cc4 <_malloc_r>
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	20000064 	.word	0x20000064

08003c6c <free>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <free+0x10>)
 8003c70:	0001      	movs	r1, r0
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	f000 fcaa 	bl	80045cc <_free_r>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	20000064 	.word	0x20000064

08003c80 <sbrk_aligned>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4e0f      	ldr	r6, [pc, #60]	; (8003cc0 <sbrk_aligned+0x40>)
 8003c84:	000d      	movs	r5, r1
 8003c86:	6831      	ldr	r1, [r6, #0]
 8003c88:	0004      	movs	r4, r0
 8003c8a:	2900      	cmp	r1, #0
 8003c8c:	d102      	bne.n	8003c94 <sbrk_aligned+0x14>
 8003c8e:	f000 fc41 	bl	8004514 <_sbrk_r>
 8003c92:	6030      	str	r0, [r6, #0]
 8003c94:	0029      	movs	r1, r5
 8003c96:	0020      	movs	r0, r4
 8003c98:	f000 fc3c 	bl	8004514 <_sbrk_r>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d00a      	beq.n	8003cb6 <sbrk_aligned+0x36>
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	1cc5      	adds	r5, r0, #3
 8003ca4:	439d      	bics	r5, r3
 8003ca6:	42a8      	cmp	r0, r5
 8003ca8:	d007      	beq.n	8003cba <sbrk_aligned+0x3a>
 8003caa:	1a29      	subs	r1, r5, r0
 8003cac:	0020      	movs	r0, r4
 8003cae:	f000 fc31 	bl	8004514 <_sbrk_r>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d101      	bne.n	8003cba <sbrk_aligned+0x3a>
 8003cb6:	2501      	movs	r5, #1
 8003cb8:	426d      	negs	r5, r5
 8003cba:	0028      	movs	r0, r5
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	200000c0 	.word	0x200000c0

08003cc4 <_malloc_r>:
 8003cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	1ccb      	adds	r3, r1, #3
 8003cca:	4393      	bics	r3, r2
 8003ccc:	3308      	adds	r3, #8
 8003cce:	0006      	movs	r6, r0
 8003cd0:	001f      	movs	r7, r3
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d238      	bcs.n	8003d48 <_malloc_r+0x84>
 8003cd6:	270c      	movs	r7, #12
 8003cd8:	42b9      	cmp	r1, r7
 8003cda:	d837      	bhi.n	8003d4c <_malloc_r+0x88>
 8003cdc:	0030      	movs	r0, r6
 8003cde:	f000 f873 	bl	8003dc8 <__malloc_lock>
 8003ce2:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <_malloc_r+0x100>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	001c      	movs	r4, r3
 8003cea:	2c00      	cmp	r4, #0
 8003cec:	d133      	bne.n	8003d56 <_malloc_r+0x92>
 8003cee:	0039      	movs	r1, r7
 8003cf0:	0030      	movs	r0, r6
 8003cf2:	f7ff ffc5 	bl	8003c80 <sbrk_aligned>
 8003cf6:	0004      	movs	r4, r0
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d15e      	bne.n	8003dba <_malloc_r+0xf6>
 8003cfc:	9b00      	ldr	r3, [sp, #0]
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	0025      	movs	r5, r4
 8003d02:	2d00      	cmp	r5, #0
 8003d04:	d14e      	bne.n	8003da4 <_malloc_r+0xe0>
 8003d06:	2c00      	cmp	r4, #0
 8003d08:	d051      	beq.n	8003dae <_malloc_r+0xea>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0029      	movs	r1, r5
 8003d0e:	18e3      	adds	r3, r4, r3
 8003d10:	0030      	movs	r0, r6
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	f000 fbfe 	bl	8004514 <_sbrk_r>
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	4283      	cmp	r3, r0
 8003d1c:	d147      	bne.n	8003dae <_malloc_r+0xea>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	0030      	movs	r0, r6
 8003d22:	1aff      	subs	r7, r7, r3
 8003d24:	0039      	movs	r1, r7
 8003d26:	f7ff ffab 	bl	8003c80 <sbrk_aligned>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d03f      	beq.n	8003dae <_malloc_r+0xea>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	19db      	adds	r3, r3, r7
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	9b00      	ldr	r3, [sp, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d040      	beq.n	8003dbe <_malloc_r+0xfa>
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	42a2      	cmp	r2, r4
 8003d40:	d133      	bne.n	8003daa <_malloc_r+0xe6>
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e014      	b.n	8003d72 <_malloc_r+0xae>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dac5      	bge.n	8003cd8 <_malloc_r+0x14>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	2500      	movs	r5, #0
 8003d50:	6033      	str	r3, [r6, #0]
 8003d52:	0028      	movs	r0, r5
 8003d54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d56:	6821      	ldr	r1, [r4, #0]
 8003d58:	1bc9      	subs	r1, r1, r7
 8003d5a:	d420      	bmi.n	8003d9e <_malloc_r+0xda>
 8003d5c:	290b      	cmp	r1, #11
 8003d5e:	d918      	bls.n	8003d92 <_malloc_r+0xce>
 8003d60:	19e2      	adds	r2, r4, r7
 8003d62:	6027      	str	r7, [r4, #0]
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	d112      	bne.n	8003d8e <_malloc_r+0xca>
 8003d68:	9b00      	ldr	r3, [sp, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	6011      	str	r1, [r2, #0]
 8003d70:	6053      	str	r3, [r2, #4]
 8003d72:	0030      	movs	r0, r6
 8003d74:	0025      	movs	r5, r4
 8003d76:	f000 f82f 	bl	8003dd8 <__malloc_unlock>
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	350b      	adds	r5, #11
 8003d7e:	1d23      	adds	r3, r4, #4
 8003d80:	4395      	bics	r5, r2
 8003d82:	1aea      	subs	r2, r5, r3
 8003d84:	429d      	cmp	r5, r3
 8003d86:	d0e4      	beq.n	8003d52 <_malloc_r+0x8e>
 8003d88:	1b5b      	subs	r3, r3, r5
 8003d8a:	50a3      	str	r3, [r4, r2]
 8003d8c:	e7e1      	b.n	8003d52 <_malloc_r+0x8e>
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	e7ec      	b.n	8003d6c <_malloc_r+0xa8>
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	42a3      	cmp	r3, r4
 8003d96:	d1d5      	bne.n	8003d44 <_malloc_r+0x80>
 8003d98:	9b00      	ldr	r3, [sp, #0]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e7e9      	b.n	8003d72 <_malloc_r+0xae>
 8003d9e:	0023      	movs	r3, r4
 8003da0:	6864      	ldr	r4, [r4, #4]
 8003da2:	e7a2      	b.n	8003cea <_malloc_r+0x26>
 8003da4:	002c      	movs	r4, r5
 8003da6:	686d      	ldr	r5, [r5, #4]
 8003da8:	e7ab      	b.n	8003d02 <_malloc_r+0x3e>
 8003daa:	0013      	movs	r3, r2
 8003dac:	e7c4      	b.n	8003d38 <_malloc_r+0x74>
 8003dae:	230c      	movs	r3, #12
 8003db0:	0030      	movs	r0, r6
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	f000 f810 	bl	8003dd8 <__malloc_unlock>
 8003db8:	e7cb      	b.n	8003d52 <_malloc_r+0x8e>
 8003dba:	6027      	str	r7, [r4, #0]
 8003dbc:	e7d9      	b.n	8003d72 <_malloc_r+0xae>
 8003dbe:	605b      	str	r3, [r3, #4]
 8003dc0:	deff      	udf	#255	; 0xff
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	200000bc 	.word	0x200000bc

08003dc8 <__malloc_lock>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <__malloc_lock+0xc>)
 8003dcc:	f000 fbf3 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8003dd0:	bd10      	pop	{r4, pc}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	20000204 	.word	0x20000204

08003dd8 <__malloc_unlock>:
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4802      	ldr	r0, [pc, #8]	; (8003de4 <__malloc_unlock+0xc>)
 8003ddc:	f000 fbec 	bl	80045b8 <__retarget_lock_release_recursive>
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	20000204 	.word	0x20000204

08003de8 <_realloc_r>:
 8003de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dea:	0007      	movs	r7, r0
 8003dec:	000e      	movs	r6, r1
 8003dee:	0014      	movs	r4, r2
 8003df0:	2900      	cmp	r1, #0
 8003df2:	d105      	bne.n	8003e00 <_realloc_r+0x18>
 8003df4:	0011      	movs	r1, r2
 8003df6:	f7ff ff65 	bl	8003cc4 <_malloc_r>
 8003dfa:	0005      	movs	r5, r0
 8003dfc:	0028      	movs	r0, r5
 8003dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e00:	2a00      	cmp	r2, #0
 8003e02:	d103      	bne.n	8003e0c <_realloc_r+0x24>
 8003e04:	f000 fbe2 	bl	80045cc <_free_r>
 8003e08:	0025      	movs	r5, r4
 8003e0a:	e7f7      	b.n	8003dfc <_realloc_r+0x14>
 8003e0c:	f000 fc28 	bl	8004660 <_malloc_usable_size_r>
 8003e10:	9001      	str	r0, [sp, #4]
 8003e12:	4284      	cmp	r4, r0
 8003e14:	d803      	bhi.n	8003e1e <_realloc_r+0x36>
 8003e16:	0035      	movs	r5, r6
 8003e18:	0843      	lsrs	r3, r0, #1
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	d3ee      	bcc.n	8003dfc <_realloc_r+0x14>
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0038      	movs	r0, r7
 8003e22:	f7ff ff4f 	bl	8003cc4 <_malloc_r>
 8003e26:	1e05      	subs	r5, r0, #0
 8003e28:	d0e8      	beq.n	8003dfc <_realloc_r+0x14>
 8003e2a:	9b01      	ldr	r3, [sp, #4]
 8003e2c:	0022      	movs	r2, r4
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d900      	bls.n	8003e34 <_realloc_r+0x4c>
 8003e32:	001a      	movs	r2, r3
 8003e34:	0031      	movs	r1, r6
 8003e36:	0028      	movs	r0, r5
 8003e38:	f000 fbbf 	bl	80045ba <memcpy>
 8003e3c:	0031      	movs	r1, r6
 8003e3e:	0038      	movs	r0, r7
 8003e40:	f000 fbc4 	bl	80045cc <_free_r>
 8003e44:	e7da      	b.n	8003dfc <_realloc_r+0x14>
	...

08003e48 <__sflush_r>:
 8003e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4a:	898b      	ldrh	r3, [r1, #12]
 8003e4c:	0005      	movs	r5, r0
 8003e4e:	000c      	movs	r4, r1
 8003e50:	071a      	lsls	r2, r3, #28
 8003e52:	d45c      	bmi.n	8003f0e <__sflush_r+0xc6>
 8003e54:	684a      	ldr	r2, [r1, #4]
 8003e56:	2a00      	cmp	r2, #0
 8003e58:	dc04      	bgt.n	8003e64 <__sflush_r+0x1c>
 8003e5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	dc01      	bgt.n	8003e64 <__sflush_r+0x1c>
 8003e60:	2000      	movs	r0, #0
 8003e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e66:	2f00      	cmp	r7, #0
 8003e68:	d0fa      	beq.n	8003e60 <__sflush_r+0x18>
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2080      	movs	r0, #128	; 0x80
 8003e6e:	682e      	ldr	r6, [r5, #0]
 8003e70:	602a      	str	r2, [r5, #0]
 8003e72:	001a      	movs	r2, r3
 8003e74:	0140      	lsls	r0, r0, #5
 8003e76:	6a21      	ldr	r1, [r4, #32]
 8003e78:	4002      	ands	r2, r0
 8003e7a:	4203      	tst	r3, r0
 8003e7c:	d034      	beq.n	8003ee8 <__sflush_r+0xa0>
 8003e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	075b      	lsls	r3, r3, #29
 8003e84:	d506      	bpl.n	8003e94 <__sflush_r+0x4c>
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	1ac0      	subs	r0, r0, r3
 8003e8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <__sflush_r+0x4c>
 8003e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e92:	1ac0      	subs	r0, r0, r3
 8003e94:	0002      	movs	r2, r0
 8003e96:	2300      	movs	r3, #0
 8003e98:	0028      	movs	r0, r5
 8003e9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e9c:	6a21      	ldr	r1, [r4, #32]
 8003e9e:	47b8      	blx	r7
 8003ea0:	89a2      	ldrh	r2, [r4, #12]
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	d106      	bne.n	8003eb4 <__sflush_r+0x6c>
 8003ea6:	6829      	ldr	r1, [r5, #0]
 8003ea8:	291d      	cmp	r1, #29
 8003eaa:	d82c      	bhi.n	8003f06 <__sflush_r+0xbe>
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <__sflush_r+0x110>)
 8003eae:	410b      	asrs	r3, r1
 8003eb0:	07db      	lsls	r3, r3, #31
 8003eb2:	d428      	bmi.n	8003f06 <__sflush_r+0xbe>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6063      	str	r3, [r4, #4]
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	04d2      	lsls	r2, r2, #19
 8003ebe:	d505      	bpl.n	8003ecc <__sflush_r+0x84>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <__sflush_r+0x82>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d100      	bne.n	8003ecc <__sflush_r+0x84>
 8003eca:	6560      	str	r0, [r4, #84]	; 0x54
 8003ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ece:	602e      	str	r6, [r5, #0]
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d0c5      	beq.n	8003e60 <__sflush_r+0x18>
 8003ed4:	0023      	movs	r3, r4
 8003ed6:	3344      	adds	r3, #68	; 0x44
 8003ed8:	4299      	cmp	r1, r3
 8003eda:	d002      	beq.n	8003ee2 <__sflush_r+0x9a>
 8003edc:	0028      	movs	r0, r5
 8003ede:	f000 fb75 	bl	80045cc <_free_r>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ee6:	e7bc      	b.n	8003e62 <__sflush_r+0x1a>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	0028      	movs	r0, r5
 8003eec:	47b8      	blx	r7
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d1c6      	bne.n	8003e80 <__sflush_r+0x38>
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0c3      	beq.n	8003e80 <__sflush_r+0x38>
 8003ef8:	2b1d      	cmp	r3, #29
 8003efa:	d001      	beq.n	8003f00 <__sflush_r+0xb8>
 8003efc:	2b16      	cmp	r3, #22
 8003efe:	d101      	bne.n	8003f04 <__sflush_r+0xbc>
 8003f00:	602e      	str	r6, [r5, #0]
 8003f02:	e7ad      	b.n	8003e60 <__sflush_r+0x18>
 8003f04:	89a2      	ldrh	r2, [r4, #12]
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	e7a9      	b.n	8003e62 <__sflush_r+0x1a>
 8003f0e:	690e      	ldr	r6, [r1, #16]
 8003f10:	2e00      	cmp	r6, #0
 8003f12:	d0a5      	beq.n	8003e60 <__sflush_r+0x18>
 8003f14:	680f      	ldr	r7, [r1, #0]
 8003f16:	600e      	str	r6, [r1, #0]
 8003f18:	1bba      	subs	r2, r7, r6
 8003f1a:	9201      	str	r2, [sp, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	079b      	lsls	r3, r3, #30
 8003f20:	d100      	bne.n	8003f24 <__sflush_r+0xdc>
 8003f22:	694a      	ldr	r2, [r1, #20]
 8003f24:	60a2      	str	r2, [r4, #8]
 8003f26:	9b01      	ldr	r3, [sp, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	dd99      	ble.n	8003e60 <__sflush_r+0x18>
 8003f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f2e:	0032      	movs	r2, r6
 8003f30:	001f      	movs	r7, r3
 8003f32:	0028      	movs	r0, r5
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	6a21      	ldr	r1, [r4, #32]
 8003f38:	47b8      	blx	r7
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	dc06      	bgt.n	8003f4c <__sflush_r+0x104>
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	2001      	movs	r0, #1
 8003f42:	89a2      	ldrh	r2, [r4, #12]
 8003f44:	4240      	negs	r0, r0
 8003f46:	4313      	orrs	r3, r2
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	e78a      	b.n	8003e62 <__sflush_r+0x1a>
 8003f4c:	9b01      	ldr	r3, [sp, #4]
 8003f4e:	1836      	adds	r6, r6, r0
 8003f50:	1a1b      	subs	r3, r3, r0
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	e7e7      	b.n	8003f26 <__sflush_r+0xde>
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	dfbffffe 	.word	0xdfbffffe

08003f5c <_fflush_r>:
 8003f5c:	690b      	ldr	r3, [r1, #16]
 8003f5e:	b570      	push	{r4, r5, r6, lr}
 8003f60:	0005      	movs	r5, r0
 8003f62:	000c      	movs	r4, r1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <_fflush_r+0x12>
 8003f68:	2500      	movs	r5, #0
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d004      	beq.n	8003f7c <_fflush_r+0x20>
 8003f72:	6a03      	ldr	r3, [r0, #32]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <_fflush_r+0x20>
 8003f78:	f000 f8ac 	bl	80040d4 <__sinit>
 8003f7c:	220c      	movs	r2, #12
 8003f7e:	5ea3      	ldrsh	r3, [r4, r2]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f1      	beq.n	8003f68 <_fflush_r+0xc>
 8003f84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f86:	07d2      	lsls	r2, r2, #31
 8003f88:	d404      	bmi.n	8003f94 <_fflush_r+0x38>
 8003f8a:	059b      	lsls	r3, r3, #22
 8003f8c:	d402      	bmi.n	8003f94 <_fflush_r+0x38>
 8003f8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f90:	f000 fb11 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8003f94:	0028      	movs	r0, r5
 8003f96:	0021      	movs	r1, r4
 8003f98:	f7ff ff56 	bl	8003e48 <__sflush_r>
 8003f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f9e:	0005      	movs	r5, r0
 8003fa0:	07db      	lsls	r3, r3, #31
 8003fa2:	d4e2      	bmi.n	8003f6a <_fflush_r+0xe>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	059b      	lsls	r3, r3, #22
 8003fa8:	d4df      	bmi.n	8003f6a <_fflush_r+0xe>
 8003faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fac:	f000 fb04 	bl	80045b8 <__retarget_lock_release_recursive>
 8003fb0:	e7db      	b.n	8003f6a <_fflush_r+0xe>
	...

08003fb4 <std>:
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	0004      	movs	r4, r0
 8003fba:	6003      	str	r3, [r0, #0]
 8003fbc:	6043      	str	r3, [r0, #4]
 8003fbe:	6083      	str	r3, [r0, #8]
 8003fc0:	8181      	strh	r1, [r0, #12]
 8003fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003fc4:	81c2      	strh	r2, [r0, #14]
 8003fc6:	6103      	str	r3, [r0, #16]
 8003fc8:	6143      	str	r3, [r0, #20]
 8003fca:	6183      	str	r3, [r0, #24]
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2208      	movs	r2, #8
 8003fd0:	305c      	adds	r0, #92	; 0x5c
 8003fd2:	f000 fa5c 	bl	800448e <memset>
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <std+0x50>)
 8003fd8:	6224      	str	r4, [r4, #32]
 8003fda:	6263      	str	r3, [r4, #36]	; 0x24
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <std+0x54>)
 8003fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <std+0x58>)
 8003fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <std+0x5c>)
 8003fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <std+0x60>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d005      	beq.n	8003ffa <std+0x46>
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <std+0x64>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	d002      	beq.n	8003ffa <std+0x46>
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <std+0x68>)
 8003ff6:	429c      	cmp	r4, r3
 8003ff8:	d103      	bne.n	8004002 <std+0x4e>
 8003ffa:	0020      	movs	r0, r4
 8003ffc:	3058      	adds	r0, #88	; 0x58
 8003ffe:	f000 fad9 	bl	80045b4 <__retarget_lock_init_recursive>
 8004002:	bd10      	pop	{r4, pc}
 8004004:	08004285 	.word	0x08004285
 8004008:	080042ad 	.word	0x080042ad
 800400c:	080042e5 	.word	0x080042e5
 8004010:	08004311 	.word	0x08004311
 8004014:	200000c4 	.word	0x200000c4
 8004018:	2000012c 	.word	0x2000012c
 800401c:	20000194 	.word	0x20000194

08004020 <stdio_exit_handler>:
 8004020:	b510      	push	{r4, lr}
 8004022:	4a03      	ldr	r2, [pc, #12]	; (8004030 <stdio_exit_handler+0x10>)
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <stdio_exit_handler+0x14>)
 8004026:	4804      	ldr	r0, [pc, #16]	; (8004038 <stdio_exit_handler+0x18>)
 8004028:	f000 f87c 	bl	8004124 <_fwalk_sglue>
 800402c:	bd10      	pop	{r4, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	2000000c 	.word	0x2000000c
 8004034:	08003f5d 	.word	0x08003f5d
 8004038:	20000018 	.word	0x20000018

0800403c <cleanup_stdio>:
 800403c:	6841      	ldr	r1, [r0, #4]
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <cleanup_stdio+0x30>)
 8004040:	b510      	push	{r4, lr}
 8004042:	0004      	movs	r4, r0
 8004044:	4299      	cmp	r1, r3
 8004046:	d001      	beq.n	800404c <cleanup_stdio+0x10>
 8004048:	f7ff ff88 	bl	8003f5c <_fflush_r>
 800404c:	68a1      	ldr	r1, [r4, #8]
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <cleanup_stdio+0x34>)
 8004050:	4299      	cmp	r1, r3
 8004052:	d002      	beq.n	800405a <cleanup_stdio+0x1e>
 8004054:	0020      	movs	r0, r4
 8004056:	f7ff ff81 	bl	8003f5c <_fflush_r>
 800405a:	68e1      	ldr	r1, [r4, #12]
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <cleanup_stdio+0x38>)
 800405e:	4299      	cmp	r1, r3
 8004060:	d002      	beq.n	8004068 <cleanup_stdio+0x2c>
 8004062:	0020      	movs	r0, r4
 8004064:	f7ff ff7a 	bl	8003f5c <_fflush_r>
 8004068:	bd10      	pop	{r4, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	200000c4 	.word	0x200000c4
 8004070:	2000012c 	.word	0x2000012c
 8004074:	20000194 	.word	0x20000194

08004078 <global_stdio_init.part.0>:
 8004078:	b510      	push	{r4, lr}
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <global_stdio_init.part.0+0x28>)
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <global_stdio_init.part.0+0x2c>)
 800407e:	2104      	movs	r1, #4
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	4809      	ldr	r0, [pc, #36]	; (80040a8 <global_stdio_init.part.0+0x30>)
 8004084:	2200      	movs	r2, #0
 8004086:	f7ff ff95 	bl	8003fb4 <std>
 800408a:	2201      	movs	r2, #1
 800408c:	2109      	movs	r1, #9
 800408e:	4807      	ldr	r0, [pc, #28]	; (80040ac <global_stdio_init.part.0+0x34>)
 8004090:	f7ff ff90 	bl	8003fb4 <std>
 8004094:	2202      	movs	r2, #2
 8004096:	2112      	movs	r1, #18
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <global_stdio_init.part.0+0x38>)
 800409a:	f7ff ff8b 	bl	8003fb4 <std>
 800409e:	bd10      	pop	{r4, pc}
 80040a0:	200001fc 	.word	0x200001fc
 80040a4:	08004021 	.word	0x08004021
 80040a8:	200000c4 	.word	0x200000c4
 80040ac:	2000012c 	.word	0x2000012c
 80040b0:	20000194 	.word	0x20000194

080040b4 <__sfp_lock_acquire>:
 80040b4:	b510      	push	{r4, lr}
 80040b6:	4802      	ldr	r0, [pc, #8]	; (80040c0 <__sfp_lock_acquire+0xc>)
 80040b8:	f000 fa7d 	bl	80045b6 <__retarget_lock_acquire_recursive>
 80040bc:	bd10      	pop	{r4, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	20000205 	.word	0x20000205

080040c4 <__sfp_lock_release>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	4802      	ldr	r0, [pc, #8]	; (80040d0 <__sfp_lock_release+0xc>)
 80040c8:	f000 fa76 	bl	80045b8 <__retarget_lock_release_recursive>
 80040cc:	bd10      	pop	{r4, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	20000205 	.word	0x20000205

080040d4 <__sinit>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	0004      	movs	r4, r0
 80040d8:	f7ff ffec 	bl	80040b4 <__sfp_lock_acquire>
 80040dc:	6a23      	ldr	r3, [r4, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <__sinit+0x14>
 80040e2:	f7ff ffef 	bl	80040c4 <__sfp_lock_release>
 80040e6:	bd10      	pop	{r4, pc}
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <__sinit+0x28>)
 80040ea:	6223      	str	r3, [r4, #32]
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <__sinit+0x2c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f6      	bne.n	80040e2 <__sinit+0xe>
 80040f4:	f7ff ffc0 	bl	8004078 <global_stdio_init.part.0>
 80040f8:	e7f3      	b.n	80040e2 <__sinit+0xe>
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	0800403d 	.word	0x0800403d
 8004100:	200001fc 	.word	0x200001fc

08004104 <fiprintf>:
 8004104:	b40e      	push	{r1, r2, r3}
 8004106:	b517      	push	{r0, r1, r2, r4, lr}
 8004108:	4c05      	ldr	r4, [pc, #20]	; (8004120 <fiprintf+0x1c>)
 800410a:	ab05      	add	r3, sp, #20
 800410c:	cb04      	ldmia	r3!, {r2}
 800410e:	0001      	movs	r1, r0
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	f000 fc36 	bl	8004984 <_vfiprintf_r>
 8004118:	bc1e      	pop	{r1, r2, r3, r4}
 800411a:	bc08      	pop	{r3}
 800411c:	b003      	add	sp, #12
 800411e:	4718      	bx	r3
 8004120:	20000064 	.word	0x20000064

08004124 <_fwalk_sglue>:
 8004124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004126:	0014      	movs	r4, r2
 8004128:	2600      	movs	r6, #0
 800412a:	9000      	str	r0, [sp, #0]
 800412c:	9101      	str	r1, [sp, #4]
 800412e:	68a5      	ldr	r5, [r4, #8]
 8004130:	6867      	ldr	r7, [r4, #4]
 8004132:	3f01      	subs	r7, #1
 8004134:	d504      	bpl.n	8004140 <_fwalk_sglue+0x1c>
 8004136:	6824      	ldr	r4, [r4, #0]
 8004138:	2c00      	cmp	r4, #0
 800413a:	d1f8      	bne.n	800412e <_fwalk_sglue+0xa>
 800413c:	0030      	movs	r0, r6
 800413e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004140:	89ab      	ldrh	r3, [r5, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d908      	bls.n	8004158 <_fwalk_sglue+0x34>
 8004146:	220e      	movs	r2, #14
 8004148:	5eab      	ldrsh	r3, [r5, r2]
 800414a:	3301      	adds	r3, #1
 800414c:	d004      	beq.n	8004158 <_fwalk_sglue+0x34>
 800414e:	0029      	movs	r1, r5
 8004150:	9800      	ldr	r0, [sp, #0]
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	4798      	blx	r3
 8004156:	4306      	orrs	r6, r0
 8004158:	3568      	adds	r5, #104	; 0x68
 800415a:	e7ea      	b.n	8004132 <_fwalk_sglue+0xe>

0800415c <_puts_r>:
 800415c:	6a03      	ldr	r3, [r0, #32]
 800415e:	b570      	push	{r4, r5, r6, lr}
 8004160:	0005      	movs	r5, r0
 8004162:	000e      	movs	r6, r1
 8004164:	6884      	ldr	r4, [r0, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <_puts_r+0x12>
 800416a:	f7ff ffb3 	bl	80040d4 <__sinit>
 800416e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004170:	07db      	lsls	r3, r3, #31
 8004172:	d405      	bmi.n	8004180 <_puts_r+0x24>
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	059b      	lsls	r3, r3, #22
 8004178:	d402      	bmi.n	8004180 <_puts_r+0x24>
 800417a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800417c:	f000 fa1b 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	071b      	lsls	r3, r3, #28
 8004184:	d502      	bpl.n	800418c <_puts_r+0x30>
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d11f      	bne.n	80041cc <_puts_r+0x70>
 800418c:	0021      	movs	r1, r4
 800418e:	0028      	movs	r0, r5
 8004190:	f000 f906 	bl	80043a0 <__swsetup_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	d019      	beq.n	80041cc <_puts_r+0x70>
 8004198:	2501      	movs	r5, #1
 800419a:	426d      	negs	r5, r5
 800419c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800419e:	07db      	lsls	r3, r3, #31
 80041a0:	d405      	bmi.n	80041ae <_puts_r+0x52>
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	059b      	lsls	r3, r3, #22
 80041a6:	d402      	bmi.n	80041ae <_puts_r+0x52>
 80041a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041aa:	f000 fa05 	bl	80045b8 <__retarget_lock_release_recursive>
 80041ae:	0028      	movs	r0, r5
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
 80041b2:	3601      	adds	r6, #1
 80041b4:	60a3      	str	r3, [r4, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da04      	bge.n	80041c4 <_puts_r+0x68>
 80041ba:	69a2      	ldr	r2, [r4, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	dc16      	bgt.n	80041ee <_puts_r+0x92>
 80041c0:	290a      	cmp	r1, #10
 80041c2:	d014      	beq.n	80041ee <_puts_r+0x92>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	7019      	strb	r1, [r3, #0]
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	7831      	ldrb	r1, [r6, #0]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d1ed      	bne.n	80041b2 <_puts_r+0x56>
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0f      	bge.n	80041fc <_puts_r+0xa0>
 80041dc:	0028      	movs	r0, r5
 80041de:	0022      	movs	r2, r4
 80041e0:	310a      	adds	r1, #10
 80041e2:	f000 f89b 	bl	800431c <__swbuf_r>
 80041e6:	250a      	movs	r5, #10
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1d7      	bne.n	800419c <_puts_r+0x40>
 80041ec:	e7d4      	b.n	8004198 <_puts_r+0x3c>
 80041ee:	0022      	movs	r2, r4
 80041f0:	0028      	movs	r0, r5
 80041f2:	f000 f893 	bl	800431c <__swbuf_r>
 80041f6:	3001      	adds	r0, #1
 80041f8:	d1e8      	bne.n	80041cc <_puts_r+0x70>
 80041fa:	e7cd      	b.n	8004198 <_puts_r+0x3c>
 80041fc:	250a      	movs	r5, #10
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	6022      	str	r2, [r4, #0]
 8004204:	701d      	strb	r5, [r3, #0]
 8004206:	e7c9      	b.n	800419c <_puts_r+0x40>

08004208 <puts>:
 8004208:	b510      	push	{r4, lr}
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <puts+0x10>)
 800420c:	0001      	movs	r1, r0
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	f7ff ffa4 	bl	800415c <_puts_r>
 8004214:	bd10      	pop	{r4, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	20000064 	.word	0x20000064

0800421c <sniprintf>:
 800421c:	b40c      	push	{r2, r3}
 800421e:	b530      	push	{r4, r5, lr}
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <sniprintf+0x64>)
 8004222:	000c      	movs	r4, r1
 8004224:	681d      	ldr	r5, [r3, #0]
 8004226:	b09d      	sub	sp, #116	; 0x74
 8004228:	2900      	cmp	r1, #0
 800422a:	da08      	bge.n	800423e <sniprintf+0x22>
 800422c:	238b      	movs	r3, #139	; 0x8b
 800422e:	2001      	movs	r0, #1
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	4240      	negs	r0, r0
 8004234:	b01d      	add	sp, #116	; 0x74
 8004236:	bc30      	pop	{r4, r5}
 8004238:	bc08      	pop	{r3}
 800423a:	b002      	add	sp, #8
 800423c:	4718      	bx	r3
 800423e:	2382      	movs	r3, #130	; 0x82
 8004240:	466a      	mov	r2, sp
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	8293      	strh	r3, [r2, #20]
 8004246:	2300      	movs	r3, #0
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	9006      	str	r0, [sp, #24]
 800424c:	4299      	cmp	r1, r3
 800424e:	d000      	beq.n	8004252 <sniprintf+0x36>
 8004250:	1e4b      	subs	r3, r1, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	2301      	movs	r3, #1
 8004258:	466a      	mov	r2, sp
 800425a:	425b      	negs	r3, r3
 800425c:	82d3      	strh	r3, [r2, #22]
 800425e:	0028      	movs	r0, r5
 8004260:	ab21      	add	r3, sp, #132	; 0x84
 8004262:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004264:	a902      	add	r1, sp, #8
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	f000 fa64 	bl	8004734 <_svfiprintf_r>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	da01      	bge.n	8004274 <sniprintf+0x58>
 8004270:	238b      	movs	r3, #139	; 0x8b
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	2c00      	cmp	r4, #0
 8004276:	d0dd      	beq.n	8004234 <sniprintf+0x18>
 8004278:	2200      	movs	r2, #0
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e7d9      	b.n	8004234 <sniprintf+0x18>
 8004280:	20000064 	.word	0x20000064

08004284 <__sread>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	000c      	movs	r4, r1
 8004288:	250e      	movs	r5, #14
 800428a:	5f49      	ldrsh	r1, [r1, r5]
 800428c:	f000 f92e 	bl	80044ec <_read_r>
 8004290:	2800      	cmp	r0, #0
 8004292:	db03      	blt.n	800429c <__sread+0x18>
 8004294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004296:	181b      	adds	r3, r3, r0
 8004298:	6563      	str	r3, [r4, #84]	; 0x54
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	4a02      	ldr	r2, [pc, #8]	; (80042a8 <__sread+0x24>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	e7f9      	b.n	800429a <__sread+0x16>
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	ffffefff 	.word	0xffffefff

080042ac <__swrite>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	001f      	movs	r7, r3
 80042b0:	898b      	ldrh	r3, [r1, #12]
 80042b2:	0005      	movs	r5, r0
 80042b4:	000c      	movs	r4, r1
 80042b6:	0016      	movs	r6, r2
 80042b8:	05db      	lsls	r3, r3, #23
 80042ba:	d505      	bpl.n	80042c8 <__swrite+0x1c>
 80042bc:	230e      	movs	r3, #14
 80042be:	5ec9      	ldrsh	r1, [r1, r3]
 80042c0:	2200      	movs	r2, #0
 80042c2:	2302      	movs	r3, #2
 80042c4:	f000 f8fe 	bl	80044c4 <_lseek_r>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <__swrite+0x34>)
 80042cc:	0028      	movs	r0, r5
 80042ce:	4013      	ands	r3, r2
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	0032      	movs	r2, r6
 80042d4:	230e      	movs	r3, #14
 80042d6:	5ee1      	ldrsh	r1, [r4, r3]
 80042d8:	003b      	movs	r3, r7
 80042da:	f000 f92d 	bl	8004538 <_write_r>
 80042de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e0:	ffffefff 	.word	0xffffefff

080042e4 <__sseek>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	000c      	movs	r4, r1
 80042e8:	250e      	movs	r5, #14
 80042ea:	5f49      	ldrsh	r1, [r1, r5]
 80042ec:	f000 f8ea 	bl	80044c4 <_lseek_r>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	1c42      	adds	r2, r0, #1
 80042f4:	d103      	bne.n	80042fe <__sseek+0x1a>
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <__sseek+0x28>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	0152      	lsls	r2, r2, #5
 8004302:	4313      	orrs	r3, r2
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	6560      	str	r0, [r4, #84]	; 0x54
 8004308:	e7f8      	b.n	80042fc <__sseek+0x18>
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	ffffefff 	.word	0xffffefff

08004310 <__sclose>:
 8004310:	b510      	push	{r4, lr}
 8004312:	230e      	movs	r3, #14
 8004314:	5ec9      	ldrsh	r1, [r1, r3]
 8004316:	f000 f8c3 	bl	80044a0 <_close_r>
 800431a:	bd10      	pop	{r4, pc}

0800431c <__swbuf_r>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	0006      	movs	r6, r0
 8004320:	000d      	movs	r5, r1
 8004322:	0014      	movs	r4, r2
 8004324:	2800      	cmp	r0, #0
 8004326:	d004      	beq.n	8004332 <__swbuf_r+0x16>
 8004328:	6a03      	ldr	r3, [r0, #32]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <__swbuf_r+0x16>
 800432e:	f7ff fed1 	bl	80040d4 <__sinit>
 8004332:	69a3      	ldr	r3, [r4, #24]
 8004334:	60a3      	str	r3, [r4, #8]
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	d528      	bpl.n	800438e <__swbuf_r+0x72>
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d025      	beq.n	800438e <__swbuf_r+0x72>
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	b2ef      	uxtb	r7, r5
 8004348:	1ac0      	subs	r0, r0, r3
 800434a:	6963      	ldr	r3, [r4, #20]
 800434c:	b2ed      	uxtb	r5, r5
 800434e:	4283      	cmp	r3, r0
 8004350:	dc05      	bgt.n	800435e <__swbuf_r+0x42>
 8004352:	0021      	movs	r1, r4
 8004354:	0030      	movs	r0, r6
 8004356:	f7ff fe01 	bl	8003f5c <_fflush_r>
 800435a:	2800      	cmp	r0, #0
 800435c:	d11d      	bne.n	800439a <__swbuf_r+0x7e>
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	3001      	adds	r0, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	6022      	str	r2, [r4, #0]
 800436c:	701f      	strb	r7, [r3, #0]
 800436e:	6963      	ldr	r3, [r4, #20]
 8004370:	4283      	cmp	r3, r0
 8004372:	d004      	beq.n	800437e <__swbuf_r+0x62>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	07db      	lsls	r3, r3, #31
 8004378:	d507      	bpl.n	800438a <__swbuf_r+0x6e>
 800437a:	2d0a      	cmp	r5, #10
 800437c:	d105      	bne.n	800438a <__swbuf_r+0x6e>
 800437e:	0021      	movs	r1, r4
 8004380:	0030      	movs	r0, r6
 8004382:	f7ff fdeb 	bl	8003f5c <_fflush_r>
 8004386:	2800      	cmp	r0, #0
 8004388:	d107      	bne.n	800439a <__swbuf_r+0x7e>
 800438a:	0028      	movs	r0, r5
 800438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f000 f805 	bl	80043a0 <__swsetup_r>
 8004396:	2800      	cmp	r0, #0
 8004398:	d0d3      	beq.n	8004342 <__swbuf_r+0x26>
 800439a:	2501      	movs	r5, #1
 800439c:	426d      	negs	r5, r5
 800439e:	e7f4      	b.n	800438a <__swbuf_r+0x6e>

080043a0 <__swsetup_r>:
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <__swsetup_r+0xc4>)
 80043a2:	b570      	push	{r4, r5, r6, lr}
 80043a4:	0005      	movs	r5, r0
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	000c      	movs	r4, r1
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d004      	beq.n	80043b8 <__swsetup_r+0x18>
 80043ae:	6a03      	ldr	r3, [r0, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <__swsetup_r+0x18>
 80043b4:	f7ff fe8e 	bl	80040d4 <__sinit>
 80043b8:	230c      	movs	r3, #12
 80043ba:	5ee2      	ldrsh	r2, [r4, r3]
 80043bc:	b293      	uxth	r3, r2
 80043be:	0711      	lsls	r1, r2, #28
 80043c0:	d423      	bmi.n	800440a <__swsetup_r+0x6a>
 80043c2:	06d9      	lsls	r1, r3, #27
 80043c4:	d407      	bmi.n	80043d6 <__swsetup_r+0x36>
 80043c6:	2309      	movs	r3, #9
 80043c8:	2001      	movs	r0, #1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	3337      	adds	r3, #55	; 0x37
 80043ce:	4313      	orrs	r3, r2
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	4240      	negs	r0, r0
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	075b      	lsls	r3, r3, #29
 80043d8:	d513      	bpl.n	8004402 <__swsetup_r+0x62>
 80043da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043dc:	2900      	cmp	r1, #0
 80043de:	d008      	beq.n	80043f2 <__swsetup_r+0x52>
 80043e0:	0023      	movs	r3, r4
 80043e2:	3344      	adds	r3, #68	; 0x44
 80043e4:	4299      	cmp	r1, r3
 80043e6:	d002      	beq.n	80043ee <__swsetup_r+0x4e>
 80043e8:	0028      	movs	r0, r5
 80043ea:	f000 f8ef 	bl	80045cc <_free_r>
 80043ee:	2300      	movs	r3, #0
 80043f0:	6363      	str	r3, [r4, #52]	; 0x34
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	4393      	bics	r3, r2
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6063      	str	r3, [r4, #4]
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	2308      	movs	r3, #8
 8004404:	89a2      	ldrh	r2, [r4, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	81a3      	strh	r3, [r4, #12]
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <__swsetup_r+0x88>
 8004410:	21a0      	movs	r1, #160	; 0xa0
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	0089      	lsls	r1, r1, #2
 8004418:	0092      	lsls	r2, r2, #2
 800441a:	400b      	ands	r3, r1
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <__swsetup_r+0x88>
 8004420:	0021      	movs	r1, r4
 8004422:	0028      	movs	r0, r5
 8004424:	f000 fd72 	bl	8004f0c <__smakebuf_r>
 8004428:	220c      	movs	r2, #12
 800442a:	5ea3      	ldrsh	r3, [r4, r2]
 800442c:	2001      	movs	r0, #1
 800442e:	001a      	movs	r2, r3
 8004430:	b299      	uxth	r1, r3
 8004432:	4002      	ands	r2, r0
 8004434:	4203      	tst	r3, r0
 8004436:	d00f      	beq.n	8004458 <__swsetup_r+0xb8>
 8004438:	2200      	movs	r2, #0
 800443a:	60a2      	str	r2, [r4, #8]
 800443c:	6962      	ldr	r2, [r4, #20]
 800443e:	4252      	negs	r2, r2
 8004440:	61a2      	str	r2, [r4, #24]
 8004442:	2000      	movs	r0, #0
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	4282      	cmp	r2, r0
 8004448:	d1c4      	bne.n	80043d4 <__swsetup_r+0x34>
 800444a:	0609      	lsls	r1, r1, #24
 800444c:	d5c2      	bpl.n	80043d4 <__swsetup_r+0x34>
 800444e:	2240      	movs	r2, #64	; 0x40
 8004450:	4313      	orrs	r3, r2
 8004452:	81a3      	strh	r3, [r4, #12]
 8004454:	3801      	subs	r0, #1
 8004456:	e7bd      	b.n	80043d4 <__swsetup_r+0x34>
 8004458:	0788      	lsls	r0, r1, #30
 800445a:	d400      	bmi.n	800445e <__swsetup_r+0xbe>
 800445c:	6962      	ldr	r2, [r4, #20]
 800445e:	60a2      	str	r2, [r4, #8]
 8004460:	e7ef      	b.n	8004442 <__swsetup_r+0xa2>
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	20000064 	.word	0x20000064

08004468 <memmove>:
 8004468:	b510      	push	{r4, lr}
 800446a:	4288      	cmp	r0, r1
 800446c:	d902      	bls.n	8004474 <memmove+0xc>
 800446e:	188b      	adds	r3, r1, r2
 8004470:	4298      	cmp	r0, r3
 8004472:	d303      	bcc.n	800447c <memmove+0x14>
 8004474:	2300      	movs	r3, #0
 8004476:	e007      	b.n	8004488 <memmove+0x20>
 8004478:	5c8b      	ldrb	r3, [r1, r2]
 800447a:	5483      	strb	r3, [r0, r2]
 800447c:	3a01      	subs	r2, #1
 800447e:	d2fb      	bcs.n	8004478 <memmove+0x10>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	5ccc      	ldrb	r4, [r1, r3]
 8004484:	54c4      	strb	r4, [r0, r3]
 8004486:	3301      	adds	r3, #1
 8004488:	429a      	cmp	r2, r3
 800448a:	d1fa      	bne.n	8004482 <memmove+0x1a>
 800448c:	e7f8      	b.n	8004480 <memmove+0x18>

0800448e <memset>:
 800448e:	0003      	movs	r3, r0
 8004490:	1882      	adds	r2, r0, r2
 8004492:	4293      	cmp	r3, r2
 8004494:	d100      	bne.n	8004498 <memset+0xa>
 8004496:	4770      	bx	lr
 8004498:	7019      	strb	r1, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	e7f9      	b.n	8004492 <memset+0x4>
	...

080044a0 <_close_r>:
 80044a0:	2300      	movs	r3, #0
 80044a2:	b570      	push	{r4, r5, r6, lr}
 80044a4:	4d06      	ldr	r5, [pc, #24]	; (80044c0 <_close_r+0x20>)
 80044a6:	0004      	movs	r4, r0
 80044a8:	0008      	movs	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc f896 	bl	80005dc <_close>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d103      	bne.n	80044bc <_close_r+0x1c>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d000      	beq.n	80044bc <_close_r+0x1c>
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20000200 	.word	0x20000200

080044c4 <_lseek_r>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	0004      	movs	r4, r0
 80044c8:	0008      	movs	r0, r1
 80044ca:	0011      	movs	r1, r2
 80044cc:	001a      	movs	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	4d05      	ldr	r5, [pc, #20]	; (80044e8 <_lseek_r+0x24>)
 80044d2:	602b      	str	r3, [r5, #0]
 80044d4:	f7fc f8a3 	bl	800061e <_lseek>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d103      	bne.n	80044e4 <_lseek_r+0x20>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d000      	beq.n	80044e4 <_lseek_r+0x20>
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000200 	.word	0x20000200

080044ec <_read_r>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	0004      	movs	r4, r0
 80044f0:	0008      	movs	r0, r1
 80044f2:	0011      	movs	r1, r2
 80044f4:	001a      	movs	r2, r3
 80044f6:	2300      	movs	r3, #0
 80044f8:	4d05      	ldr	r5, [pc, #20]	; (8004510 <_read_r+0x24>)
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	f7fc f835 	bl	800056a <_read>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d103      	bne.n	800450c <_read_r+0x20>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d000      	beq.n	800450c <_read_r+0x20>
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	20000200 	.word	0x20000200

08004514 <_sbrk_r>:
 8004514:	2300      	movs	r3, #0
 8004516:	b570      	push	{r4, r5, r6, lr}
 8004518:	4d06      	ldr	r5, [pc, #24]	; (8004534 <_sbrk_r+0x20>)
 800451a:	0004      	movs	r4, r0
 800451c:	0008      	movs	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc f888 	bl	8000634 <_sbrk>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d103      	bne.n	8004530 <_sbrk_r+0x1c>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d000      	beq.n	8004530 <_sbrk_r+0x1c>
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	20000200 	.word	0x20000200

08004538 <_write_r>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	0004      	movs	r4, r0
 800453c:	0008      	movs	r0, r1
 800453e:	0011      	movs	r1, r2
 8004540:	001a      	movs	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	4d05      	ldr	r5, [pc, #20]	; (800455c <_write_r+0x24>)
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fc f82c 	bl	80005a4 <_write>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d103      	bne.n	8004558 <_write_r+0x20>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d000      	beq.n	8004558 <_write_r+0x20>
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	bd70      	pop	{r4, r5, r6, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	20000200 	.word	0x20000200

08004560 <__errno>:
 8004560:	4b01      	ldr	r3, [pc, #4]	; (8004568 <__errno+0x8>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	4770      	bx	lr
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	20000064 	.word	0x20000064

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	2600      	movs	r6, #0
 8004570:	4c0c      	ldr	r4, [pc, #48]	; (80045a4 <__libc_init_array+0x38>)
 8004572:	4d0d      	ldr	r5, [pc, #52]	; (80045a8 <__libc_init_array+0x3c>)
 8004574:	1b64      	subs	r4, r4, r5
 8004576:	10a4      	asrs	r4, r4, #2
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	2600      	movs	r6, #0
 800457e:	f000 fd33 	bl	8004fe8 <_init>
 8004582:	4c0a      	ldr	r4, [pc, #40]	; (80045ac <__libc_init_array+0x40>)
 8004584:	4d0a      	ldr	r5, [pc, #40]	; (80045b0 <__libc_init_array+0x44>)
 8004586:	1b64      	subs	r4, r4, r5
 8004588:	10a4      	asrs	r4, r4, #2
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	00b3      	lsls	r3, r6, #2
 8004592:	58eb      	ldr	r3, [r5, r3]
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	00b3      	lsls	r3, r6, #2
 800459c:	58eb      	ldr	r3, [r5, r3]
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	08005544 	.word	0x08005544
 80045a8:	08005544 	.word	0x08005544
 80045ac:	08005548 	.word	0x08005548
 80045b0:	08005544 	.word	0x08005544

080045b4 <__retarget_lock_init_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_acquire_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <__retarget_lock_release_recursive>:
 80045b8:	4770      	bx	lr

080045ba <memcpy>:
 80045ba:	2300      	movs	r3, #0
 80045bc:	b510      	push	{r4, lr}
 80045be:	429a      	cmp	r2, r3
 80045c0:	d100      	bne.n	80045c4 <memcpy+0xa>
 80045c2:	bd10      	pop	{r4, pc}
 80045c4:	5ccc      	ldrb	r4, [r1, r3]
 80045c6:	54c4      	strb	r4, [r0, r3]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e7f8      	b.n	80045be <memcpy+0x4>

080045cc <_free_r>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	0005      	movs	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d010      	beq.n	80045f6 <_free_r+0x2a>
 80045d4:	1f0c      	subs	r4, r1, #4
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da00      	bge.n	80045de <_free_r+0x12>
 80045dc:	18e4      	adds	r4, r4, r3
 80045de:	0028      	movs	r0, r5
 80045e0:	f7ff fbf2 	bl	8003dc8 <__malloc_lock>
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <_free_r+0x90>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <_free_r+0x2c>
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	6014      	str	r4, [r2, #0]
 80045f0:	0028      	movs	r0, r5
 80045f2:	f7ff fbf1 	bl	8003dd8 <__malloc_unlock>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x42>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	428b      	cmp	r3, r1
 8004602:	d1f3      	bne.n	80045ec <_free_r+0x20>
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	1809      	adds	r1, r1, r0
 800460a:	6021      	str	r1, [r4, #0]
 800460c:	e7ee      	b.n	80045ec <_free_r+0x20>
 800460e:	001a      	movs	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <_free_r+0x4e>
 8004616:	42a3      	cmp	r3, r4
 8004618:	d9f9      	bls.n	800460e <_free_r+0x42>
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	1850      	adds	r0, r2, r1
 800461e:	42a0      	cmp	r0, r4
 8004620:	d10b      	bne.n	800463a <_free_r+0x6e>
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	1809      	adds	r1, r1, r0
 8004626:	1850      	adds	r0, r2, r1
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	4283      	cmp	r3, r0
 800462c:	d1e0      	bne.n	80045f0 <_free_r+0x24>
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	1841      	adds	r1, r0, r1
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	6053      	str	r3, [r2, #4]
 8004638:	e7da      	b.n	80045f0 <_free_r+0x24>
 800463a:	42a0      	cmp	r0, r4
 800463c:	d902      	bls.n	8004644 <_free_r+0x78>
 800463e:	230c      	movs	r3, #12
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	e7d5      	b.n	80045f0 <_free_r+0x24>
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	1821      	adds	r1, r4, r0
 8004648:	428b      	cmp	r3, r1
 800464a:	d103      	bne.n	8004654 <_free_r+0x88>
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	1809      	adds	r1, r1, r0
 8004652:	6021      	str	r1, [r4, #0]
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6054      	str	r4, [r2, #4]
 8004658:	e7ca      	b.n	80045f0 <_free_r+0x24>
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	200000bc 	.word	0x200000bc

08004660 <_malloc_usable_size_r>:
 8004660:	1f0b      	subs	r3, r1, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	1f18      	subs	r0, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	da01      	bge.n	800466e <_malloc_usable_size_r+0xe>
 800466a:	580b      	ldr	r3, [r1, r0]
 800466c:	18c0      	adds	r0, r0, r3
 800466e:	4770      	bx	lr

08004670 <__ssputs_r>:
 8004670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	9203      	str	r2, [sp, #12]
 8004678:	688e      	ldr	r6, [r1, #8]
 800467a:	9a01      	ldr	r2, [sp, #4]
 800467c:	0007      	movs	r7, r0
 800467e:	000c      	movs	r4, r1
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	4296      	cmp	r6, r2
 8004684:	d831      	bhi.n	80046ea <__ssputs_r+0x7a>
 8004686:	898a      	ldrh	r2, [r1, #12]
 8004688:	2190      	movs	r1, #144	; 0x90
 800468a:	00c9      	lsls	r1, r1, #3
 800468c:	420a      	tst	r2, r1
 800468e:	d029      	beq.n	80046e4 <__ssputs_r+0x74>
 8004690:	2003      	movs	r0, #3
 8004692:	6921      	ldr	r1, [r4, #16]
 8004694:	1a5b      	subs	r3, r3, r1
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	6963      	ldr	r3, [r4, #20]
 800469a:	4343      	muls	r3, r0
 800469c:	0fdd      	lsrs	r5, r3, #31
 800469e:	18ed      	adds	r5, r5, r3
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	9802      	ldr	r0, [sp, #8]
 80046a4:	3301      	adds	r3, #1
 80046a6:	181b      	adds	r3, r3, r0
 80046a8:	106d      	asrs	r5, r5, #1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	d900      	bls.n	80046b0 <__ssputs_r+0x40>
 80046ae:	001d      	movs	r5, r3
 80046b0:	0552      	lsls	r2, r2, #21
 80046b2:	d529      	bpl.n	8004708 <__ssputs_r+0x98>
 80046b4:	0029      	movs	r1, r5
 80046b6:	0038      	movs	r0, r7
 80046b8:	f7ff fb04 	bl	8003cc4 <_malloc_r>
 80046bc:	1e06      	subs	r6, r0, #0
 80046be:	d02d      	beq.n	800471c <__ssputs_r+0xac>
 80046c0:	9a02      	ldr	r2, [sp, #8]
 80046c2:	6921      	ldr	r1, [r4, #16]
 80046c4:	f7ff ff79 	bl	80045ba <memcpy>
 80046c8:	89a2      	ldrh	r2, [r4, #12]
 80046ca:	4b19      	ldr	r3, [pc, #100]	; (8004730 <__ssputs_r+0xc0>)
 80046cc:	401a      	ands	r2, r3
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	4313      	orrs	r3, r2
 80046d2:	81a3      	strh	r3, [r4, #12]
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	6126      	str	r6, [r4, #16]
 80046d8:	18f6      	adds	r6, r6, r3
 80046da:	6026      	str	r6, [r4, #0]
 80046dc:	6165      	str	r5, [r4, #20]
 80046de:	9e01      	ldr	r6, [sp, #4]
 80046e0:	1aed      	subs	r5, r5, r3
 80046e2:	60a5      	str	r5, [r4, #8]
 80046e4:	9b01      	ldr	r3, [sp, #4]
 80046e6:	429e      	cmp	r6, r3
 80046e8:	d900      	bls.n	80046ec <__ssputs_r+0x7c>
 80046ea:	9e01      	ldr	r6, [sp, #4]
 80046ec:	0032      	movs	r2, r6
 80046ee:	9903      	ldr	r1, [sp, #12]
 80046f0:	6820      	ldr	r0, [r4, #0]
 80046f2:	f7ff feb9 	bl	8004468 <memmove>
 80046f6:	2000      	movs	r0, #0
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	1b9b      	subs	r3, r3, r6
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	199b      	adds	r3, r3, r6
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	b005      	add	sp, #20
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	002a      	movs	r2, r5
 800470a:	0038      	movs	r0, r7
 800470c:	f7ff fb6c 	bl	8003de8 <_realloc_r>
 8004710:	1e06      	subs	r6, r0, #0
 8004712:	d1df      	bne.n	80046d4 <__ssputs_r+0x64>
 8004714:	0038      	movs	r0, r7
 8004716:	6921      	ldr	r1, [r4, #16]
 8004718:	f7ff ff58 	bl	80045cc <_free_r>
 800471c:	230c      	movs	r3, #12
 800471e:	2001      	movs	r0, #1
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	89a2      	ldrh	r2, [r4, #12]
 8004724:	3334      	adds	r3, #52	; 0x34
 8004726:	4313      	orrs	r3, r2
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	4240      	negs	r0, r0
 800472c:	e7ea      	b.n	8004704 <__ssputs_r+0x94>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	fffffb7f 	.word	0xfffffb7f

08004734 <_svfiprintf_r>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b0a1      	sub	sp, #132	; 0x84
 8004738:	9003      	str	r0, [sp, #12]
 800473a:	001d      	movs	r5, r3
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	000f      	movs	r7, r1
 8004740:	0016      	movs	r6, r2
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	d511      	bpl.n	800476a <_svfiprintf_r+0x36>
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10e      	bne.n	800476a <_svfiprintf_r+0x36>
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	f7ff fab9 	bl	8003cc4 <_malloc_r>
 8004752:	6038      	str	r0, [r7, #0]
 8004754:	6138      	str	r0, [r7, #16]
 8004756:	2800      	cmp	r0, #0
 8004758:	d105      	bne.n	8004766 <_svfiprintf_r+0x32>
 800475a:	230c      	movs	r3, #12
 800475c:	9a03      	ldr	r2, [sp, #12]
 800475e:	3801      	subs	r0, #1
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	b021      	add	sp, #132	; 0x84
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	ac08      	add	r4, sp, #32
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	3320      	adds	r3, #32
 8004772:	7663      	strb	r3, [r4, #25]
 8004774:	3310      	adds	r3, #16
 8004776:	76a3      	strb	r3, [r4, #26]
 8004778:	9507      	str	r5, [sp, #28]
 800477a:	0035      	movs	r5, r6
 800477c:	782b      	ldrb	r3, [r5, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <_svfiprintf_r+0x52>
 8004782:	2b25      	cmp	r3, #37	; 0x25
 8004784:	d148      	bne.n	8004818 <_svfiprintf_r+0xe4>
 8004786:	1bab      	subs	r3, r5, r6
 8004788:	9305      	str	r3, [sp, #20]
 800478a:	42b5      	cmp	r5, r6
 800478c:	d00b      	beq.n	80047a6 <_svfiprintf_r+0x72>
 800478e:	0032      	movs	r2, r6
 8004790:	0039      	movs	r1, r7
 8004792:	9803      	ldr	r0, [sp, #12]
 8004794:	f7ff ff6c 	bl	8004670 <__ssputs_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d100      	bne.n	800479e <_svfiprintf_r+0x6a>
 800479c:	e0af      	b.n	80048fe <_svfiprintf_r+0x1ca>
 800479e:	6963      	ldr	r3, [r4, #20]
 80047a0:	9a05      	ldr	r2, [sp, #20]
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	6163      	str	r3, [r4, #20]
 80047a6:	782b      	ldrb	r3, [r5, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d100      	bne.n	80047ae <_svfiprintf_r+0x7a>
 80047ac:	e0a7      	b.n	80048fe <_svfiprintf_r+0x1ca>
 80047ae:	2201      	movs	r2, #1
 80047b0:	2300      	movs	r3, #0
 80047b2:	4252      	negs	r2, r2
 80047b4:	6062      	str	r2, [r4, #4]
 80047b6:	a904      	add	r1, sp, #16
 80047b8:	3254      	adds	r2, #84	; 0x54
 80047ba:	1852      	adds	r2, r2, r1
 80047bc:	1c6e      	adds	r6, r5, #1
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	60e3      	str	r3, [r4, #12]
 80047c2:	60a3      	str	r3, [r4, #8]
 80047c4:	7013      	strb	r3, [r2, #0]
 80047c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80047c8:	4b55      	ldr	r3, [pc, #340]	; (8004920 <_svfiprintf_r+0x1ec>)
 80047ca:	2205      	movs	r2, #5
 80047cc:	0018      	movs	r0, r3
 80047ce:	7831      	ldrb	r1, [r6, #0]
 80047d0:	9305      	str	r3, [sp, #20]
 80047d2:	f000 fbfd 	bl	8004fd0 <memchr>
 80047d6:	1c75      	adds	r5, r6, #1
 80047d8:	2800      	cmp	r0, #0
 80047da:	d11f      	bne.n	800481c <_svfiprintf_r+0xe8>
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	06d3      	lsls	r3, r2, #27
 80047e0:	d504      	bpl.n	80047ec <_svfiprintf_r+0xb8>
 80047e2:	2353      	movs	r3, #83	; 0x53
 80047e4:	a904      	add	r1, sp, #16
 80047e6:	185b      	adds	r3, r3, r1
 80047e8:	2120      	movs	r1, #32
 80047ea:	7019      	strb	r1, [r3, #0]
 80047ec:	0713      	lsls	r3, r2, #28
 80047ee:	d504      	bpl.n	80047fa <_svfiprintf_r+0xc6>
 80047f0:	2353      	movs	r3, #83	; 0x53
 80047f2:	a904      	add	r1, sp, #16
 80047f4:	185b      	adds	r3, r3, r1
 80047f6:	212b      	movs	r1, #43	; 0x2b
 80047f8:	7019      	strb	r1, [r3, #0]
 80047fa:	7833      	ldrb	r3, [r6, #0]
 80047fc:	2b2a      	cmp	r3, #42	; 0x2a
 80047fe:	d016      	beq.n	800482e <_svfiprintf_r+0xfa>
 8004800:	0035      	movs	r5, r6
 8004802:	2100      	movs	r1, #0
 8004804:	200a      	movs	r0, #10
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	782a      	ldrb	r2, [r5, #0]
 800480a:	1c6e      	adds	r6, r5, #1
 800480c:	3a30      	subs	r2, #48	; 0x30
 800480e:	2a09      	cmp	r2, #9
 8004810:	d94e      	bls.n	80048b0 <_svfiprintf_r+0x17c>
 8004812:	2900      	cmp	r1, #0
 8004814:	d111      	bne.n	800483a <_svfiprintf_r+0x106>
 8004816:	e017      	b.n	8004848 <_svfiprintf_r+0x114>
 8004818:	3501      	adds	r5, #1
 800481a:	e7af      	b.n	800477c <_svfiprintf_r+0x48>
 800481c:	9b05      	ldr	r3, [sp, #20]
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	1ac0      	subs	r0, r0, r3
 8004822:	2301      	movs	r3, #1
 8004824:	4083      	lsls	r3, r0
 8004826:	4313      	orrs	r3, r2
 8004828:	002e      	movs	r6, r5
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	e7cc      	b.n	80047c8 <_svfiprintf_r+0x94>
 800482e:	9b07      	ldr	r3, [sp, #28]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9107      	str	r1, [sp, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db01      	blt.n	800483e <_svfiprintf_r+0x10a>
 800483a:	930b      	str	r3, [sp, #44]	; 0x2c
 800483c:	e004      	b.n	8004848 <_svfiprintf_r+0x114>
 800483e:	425b      	negs	r3, r3
 8004840:	60e3      	str	r3, [r4, #12]
 8004842:	2302      	movs	r3, #2
 8004844:	4313      	orrs	r3, r2
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	782b      	ldrb	r3, [r5, #0]
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d10a      	bne.n	8004864 <_svfiprintf_r+0x130>
 800484e:	786b      	ldrb	r3, [r5, #1]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d135      	bne.n	80048c0 <_svfiprintf_r+0x18c>
 8004854:	9b07      	ldr	r3, [sp, #28]
 8004856:	3502      	adds	r5, #2
 8004858:	1d1a      	adds	r2, r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	9207      	str	r2, [sp, #28]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db2b      	blt.n	80048ba <_svfiprintf_r+0x186>
 8004862:	9309      	str	r3, [sp, #36]	; 0x24
 8004864:	4e2f      	ldr	r6, [pc, #188]	; (8004924 <_svfiprintf_r+0x1f0>)
 8004866:	2203      	movs	r2, #3
 8004868:	0030      	movs	r0, r6
 800486a:	7829      	ldrb	r1, [r5, #0]
 800486c:	f000 fbb0 	bl	8004fd0 <memchr>
 8004870:	2800      	cmp	r0, #0
 8004872:	d006      	beq.n	8004882 <_svfiprintf_r+0x14e>
 8004874:	2340      	movs	r3, #64	; 0x40
 8004876:	1b80      	subs	r0, r0, r6
 8004878:	4083      	lsls	r3, r0
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	3501      	adds	r5, #1
 800487e:	4313      	orrs	r3, r2
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	7829      	ldrb	r1, [r5, #0]
 8004884:	2206      	movs	r2, #6
 8004886:	4828      	ldr	r0, [pc, #160]	; (8004928 <_svfiprintf_r+0x1f4>)
 8004888:	1c6e      	adds	r6, r5, #1
 800488a:	7621      	strb	r1, [r4, #24]
 800488c:	f000 fba0 	bl	8004fd0 <memchr>
 8004890:	2800      	cmp	r0, #0
 8004892:	d03c      	beq.n	800490e <_svfiprintf_r+0x1da>
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <_svfiprintf_r+0x1f8>)
 8004896:	2b00      	cmp	r3, #0
 8004898:	d125      	bne.n	80048e6 <_svfiprintf_r+0x1b2>
 800489a:	2207      	movs	r2, #7
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	3307      	adds	r3, #7
 80048a0:	4393      	bics	r3, r2
 80048a2:	3308      	adds	r3, #8
 80048a4:	9307      	str	r3, [sp, #28]
 80048a6:	6963      	ldr	r3, [r4, #20]
 80048a8:	9a04      	ldr	r2, [sp, #16]
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	6163      	str	r3, [r4, #20]
 80048ae:	e764      	b.n	800477a <_svfiprintf_r+0x46>
 80048b0:	4343      	muls	r3, r0
 80048b2:	0035      	movs	r5, r6
 80048b4:	2101      	movs	r1, #1
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	e7a6      	b.n	8004808 <_svfiprintf_r+0xd4>
 80048ba:	2301      	movs	r3, #1
 80048bc:	425b      	negs	r3, r3
 80048be:	e7d0      	b.n	8004862 <_svfiprintf_r+0x12e>
 80048c0:	2300      	movs	r3, #0
 80048c2:	200a      	movs	r0, #10
 80048c4:	001a      	movs	r2, r3
 80048c6:	3501      	adds	r5, #1
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	7829      	ldrb	r1, [r5, #0]
 80048cc:	1c6e      	adds	r6, r5, #1
 80048ce:	3930      	subs	r1, #48	; 0x30
 80048d0:	2909      	cmp	r1, #9
 80048d2:	d903      	bls.n	80048dc <_svfiprintf_r+0x1a8>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0c5      	beq.n	8004864 <_svfiprintf_r+0x130>
 80048d8:	9209      	str	r2, [sp, #36]	; 0x24
 80048da:	e7c3      	b.n	8004864 <_svfiprintf_r+0x130>
 80048dc:	4342      	muls	r2, r0
 80048de:	0035      	movs	r5, r6
 80048e0:	2301      	movs	r3, #1
 80048e2:	1852      	adds	r2, r2, r1
 80048e4:	e7f1      	b.n	80048ca <_svfiprintf_r+0x196>
 80048e6:	aa07      	add	r2, sp, #28
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	0021      	movs	r1, r4
 80048ec:	003a      	movs	r2, r7
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <_svfiprintf_r+0x1fc>)
 80048f0:	9803      	ldr	r0, [sp, #12]
 80048f2:	e000      	b.n	80048f6 <_svfiprintf_r+0x1c2>
 80048f4:	bf00      	nop
 80048f6:	9004      	str	r0, [sp, #16]
 80048f8:	9b04      	ldr	r3, [sp, #16]
 80048fa:	3301      	adds	r3, #1
 80048fc:	d1d3      	bne.n	80048a6 <_svfiprintf_r+0x172>
 80048fe:	89bb      	ldrh	r3, [r7, #12]
 8004900:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	d400      	bmi.n	8004908 <_svfiprintf_r+0x1d4>
 8004906:	e72c      	b.n	8004762 <_svfiprintf_r+0x2e>
 8004908:	2001      	movs	r0, #1
 800490a:	4240      	negs	r0, r0
 800490c:	e729      	b.n	8004762 <_svfiprintf_r+0x2e>
 800490e:	aa07      	add	r2, sp, #28
 8004910:	9200      	str	r2, [sp, #0]
 8004912:	0021      	movs	r1, r4
 8004914:	003a      	movs	r2, r7
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <_svfiprintf_r+0x1fc>)
 8004918:	9803      	ldr	r0, [sp, #12]
 800491a:	f000 f9bf 	bl	8004c9c <_printf_i>
 800491e:	e7ea      	b.n	80048f6 <_svfiprintf_r+0x1c2>
 8004920:	08005510 	.word	0x08005510
 8004924:	08005516 	.word	0x08005516
 8004928:	0800551a 	.word	0x0800551a
 800492c:	00000000 	.word	0x00000000
 8004930:	08004671 	.word	0x08004671

08004934 <__sfputc_r>:
 8004934:	6893      	ldr	r3, [r2, #8]
 8004936:	b510      	push	{r4, lr}
 8004938:	3b01      	subs	r3, #1
 800493a:	6093      	str	r3, [r2, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	da04      	bge.n	800494a <__sfputc_r+0x16>
 8004940:	6994      	ldr	r4, [r2, #24]
 8004942:	42a3      	cmp	r3, r4
 8004944:	db07      	blt.n	8004956 <__sfputc_r+0x22>
 8004946:	290a      	cmp	r1, #10
 8004948:	d005      	beq.n	8004956 <__sfputc_r+0x22>
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	1c58      	adds	r0, r3, #1
 800494e:	6010      	str	r0, [r2, #0]
 8004950:	7019      	strb	r1, [r3, #0]
 8004952:	0008      	movs	r0, r1
 8004954:	bd10      	pop	{r4, pc}
 8004956:	f7ff fce1 	bl	800431c <__swbuf_r>
 800495a:	0001      	movs	r1, r0
 800495c:	e7f9      	b.n	8004952 <__sfputc_r+0x1e>

0800495e <__sfputs_r>:
 800495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004960:	0006      	movs	r6, r0
 8004962:	000f      	movs	r7, r1
 8004964:	0014      	movs	r4, r2
 8004966:	18d5      	adds	r5, r2, r3
 8004968:	42ac      	cmp	r4, r5
 800496a:	d101      	bne.n	8004970 <__sfputs_r+0x12>
 800496c:	2000      	movs	r0, #0
 800496e:	e007      	b.n	8004980 <__sfputs_r+0x22>
 8004970:	7821      	ldrb	r1, [r4, #0]
 8004972:	003a      	movs	r2, r7
 8004974:	0030      	movs	r0, r6
 8004976:	f7ff ffdd 	bl	8004934 <__sfputc_r>
 800497a:	3401      	adds	r4, #1
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d1f3      	bne.n	8004968 <__sfputs_r+0xa>
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004984 <_vfiprintf_r>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b0a1      	sub	sp, #132	; 0x84
 8004988:	000f      	movs	r7, r1
 800498a:	0015      	movs	r5, r2
 800498c:	001e      	movs	r6, r3
 800498e:	9003      	str	r0, [sp, #12]
 8004990:	2800      	cmp	r0, #0
 8004992:	d004      	beq.n	800499e <_vfiprintf_r+0x1a>
 8004994:	6a03      	ldr	r3, [r0, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <_vfiprintf_r+0x1a>
 800499a:	f7ff fb9b 	bl	80040d4 <__sinit>
 800499e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a0:	07db      	lsls	r3, r3, #31
 80049a2:	d405      	bmi.n	80049b0 <_vfiprintf_r+0x2c>
 80049a4:	89bb      	ldrh	r3, [r7, #12]
 80049a6:	059b      	lsls	r3, r3, #22
 80049a8:	d402      	bmi.n	80049b0 <_vfiprintf_r+0x2c>
 80049aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049ac:	f7ff fe03 	bl	80045b6 <__retarget_lock_acquire_recursive>
 80049b0:	89bb      	ldrh	r3, [r7, #12]
 80049b2:	071b      	lsls	r3, r3, #28
 80049b4:	d502      	bpl.n	80049bc <_vfiprintf_r+0x38>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d113      	bne.n	80049e4 <_vfiprintf_r+0x60>
 80049bc:	0039      	movs	r1, r7
 80049be:	9803      	ldr	r0, [sp, #12]
 80049c0:	f7ff fcee 	bl	80043a0 <__swsetup_r>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d00d      	beq.n	80049e4 <_vfiprintf_r+0x60>
 80049c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ca:	07db      	lsls	r3, r3, #31
 80049cc:	d503      	bpl.n	80049d6 <_vfiprintf_r+0x52>
 80049ce:	2001      	movs	r0, #1
 80049d0:	4240      	negs	r0, r0
 80049d2:	b021      	add	sp, #132	; 0x84
 80049d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d6:	89bb      	ldrh	r3, [r7, #12]
 80049d8:	059b      	lsls	r3, r3, #22
 80049da:	d4f8      	bmi.n	80049ce <_vfiprintf_r+0x4a>
 80049dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80049de:	f7ff fdeb 	bl	80045b8 <__retarget_lock_release_recursive>
 80049e2:	e7f4      	b.n	80049ce <_vfiprintf_r+0x4a>
 80049e4:	2300      	movs	r3, #0
 80049e6:	ac08      	add	r4, sp, #32
 80049e8:	6163      	str	r3, [r4, #20]
 80049ea:	3320      	adds	r3, #32
 80049ec:	7663      	strb	r3, [r4, #25]
 80049ee:	3310      	adds	r3, #16
 80049f0:	76a3      	strb	r3, [r4, #26]
 80049f2:	9607      	str	r6, [sp, #28]
 80049f4:	002e      	movs	r6, r5
 80049f6:	7833      	ldrb	r3, [r6, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <_vfiprintf_r+0x7c>
 80049fc:	2b25      	cmp	r3, #37	; 0x25
 80049fe:	d148      	bne.n	8004a92 <_vfiprintf_r+0x10e>
 8004a00:	1b73      	subs	r3, r6, r5
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	42ae      	cmp	r6, r5
 8004a06:	d00b      	beq.n	8004a20 <_vfiprintf_r+0x9c>
 8004a08:	002a      	movs	r2, r5
 8004a0a:	0039      	movs	r1, r7
 8004a0c:	9803      	ldr	r0, [sp, #12]
 8004a0e:	f7ff ffa6 	bl	800495e <__sfputs_r>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d100      	bne.n	8004a18 <_vfiprintf_r+0x94>
 8004a16:	e0af      	b.n	8004b78 <_vfiprintf_r+0x1f4>
 8004a18:	6963      	ldr	r3, [r4, #20]
 8004a1a:	9a05      	ldr	r2, [sp, #20]
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	6163      	str	r3, [r4, #20]
 8004a20:	7833      	ldrb	r3, [r6, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <_vfiprintf_r+0xa4>
 8004a26:	e0a7      	b.n	8004b78 <_vfiprintf_r+0x1f4>
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4252      	negs	r2, r2
 8004a2e:	6062      	str	r2, [r4, #4]
 8004a30:	a904      	add	r1, sp, #16
 8004a32:	3254      	adds	r2, #84	; 0x54
 8004a34:	1852      	adds	r2, r2, r1
 8004a36:	1c75      	adds	r5, r6, #1
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	60e3      	str	r3, [r4, #12]
 8004a3c:	60a3      	str	r3, [r4, #8]
 8004a3e:	7013      	strb	r3, [r2, #0]
 8004a40:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a42:	4b59      	ldr	r3, [pc, #356]	; (8004ba8 <_vfiprintf_r+0x224>)
 8004a44:	2205      	movs	r2, #5
 8004a46:	0018      	movs	r0, r3
 8004a48:	7829      	ldrb	r1, [r5, #0]
 8004a4a:	9305      	str	r3, [sp, #20]
 8004a4c:	f000 fac0 	bl	8004fd0 <memchr>
 8004a50:	1c6e      	adds	r6, r5, #1
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d11f      	bne.n	8004a96 <_vfiprintf_r+0x112>
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	06d3      	lsls	r3, r2, #27
 8004a5a:	d504      	bpl.n	8004a66 <_vfiprintf_r+0xe2>
 8004a5c:	2353      	movs	r3, #83	; 0x53
 8004a5e:	a904      	add	r1, sp, #16
 8004a60:	185b      	adds	r3, r3, r1
 8004a62:	2120      	movs	r1, #32
 8004a64:	7019      	strb	r1, [r3, #0]
 8004a66:	0713      	lsls	r3, r2, #28
 8004a68:	d504      	bpl.n	8004a74 <_vfiprintf_r+0xf0>
 8004a6a:	2353      	movs	r3, #83	; 0x53
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	185b      	adds	r3, r3, r1
 8004a70:	212b      	movs	r1, #43	; 0x2b
 8004a72:	7019      	strb	r1, [r3, #0]
 8004a74:	782b      	ldrb	r3, [r5, #0]
 8004a76:	2b2a      	cmp	r3, #42	; 0x2a
 8004a78:	d016      	beq.n	8004aa8 <_vfiprintf_r+0x124>
 8004a7a:	002e      	movs	r6, r5
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200a      	movs	r0, #10
 8004a80:	68e3      	ldr	r3, [r4, #12]
 8004a82:	7832      	ldrb	r2, [r6, #0]
 8004a84:	1c75      	adds	r5, r6, #1
 8004a86:	3a30      	subs	r2, #48	; 0x30
 8004a88:	2a09      	cmp	r2, #9
 8004a8a:	d94e      	bls.n	8004b2a <_vfiprintf_r+0x1a6>
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d111      	bne.n	8004ab4 <_vfiprintf_r+0x130>
 8004a90:	e017      	b.n	8004ac2 <_vfiprintf_r+0x13e>
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7af      	b.n	80049f6 <_vfiprintf_r+0x72>
 8004a96:	9b05      	ldr	r3, [sp, #20]
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	1ac0      	subs	r0, r0, r3
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4083      	lsls	r3, r0
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	0035      	movs	r5, r6
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	e7cc      	b.n	8004a42 <_vfiprintf_r+0xbe>
 8004aa8:	9b07      	ldr	r3, [sp, #28]
 8004aaa:	1d19      	adds	r1, r3, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	9107      	str	r1, [sp, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	db01      	blt.n	8004ab8 <_vfiprintf_r+0x134>
 8004ab4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ab6:	e004      	b.n	8004ac2 <_vfiprintf_r+0x13e>
 8004ab8:	425b      	negs	r3, r3
 8004aba:	60e3      	str	r3, [r4, #12]
 8004abc:	2302      	movs	r3, #2
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	7833      	ldrb	r3, [r6, #0]
 8004ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac6:	d10a      	bne.n	8004ade <_vfiprintf_r+0x15a>
 8004ac8:	7873      	ldrb	r3, [r6, #1]
 8004aca:	2b2a      	cmp	r3, #42	; 0x2a
 8004acc:	d135      	bne.n	8004b3a <_vfiprintf_r+0x1b6>
 8004ace:	9b07      	ldr	r3, [sp, #28]
 8004ad0:	3602      	adds	r6, #2
 8004ad2:	1d1a      	adds	r2, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	9207      	str	r2, [sp, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	db2b      	blt.n	8004b34 <_vfiprintf_r+0x1b0>
 8004adc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ade:	4d33      	ldr	r5, [pc, #204]	; (8004bac <_vfiprintf_r+0x228>)
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	0028      	movs	r0, r5
 8004ae4:	7831      	ldrb	r1, [r6, #0]
 8004ae6:	f000 fa73 	bl	8004fd0 <memchr>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d006      	beq.n	8004afc <_vfiprintf_r+0x178>
 8004aee:	2340      	movs	r3, #64	; 0x40
 8004af0:	1b40      	subs	r0, r0, r5
 8004af2:	4083      	lsls	r3, r0
 8004af4:	6822      	ldr	r2, [r4, #0]
 8004af6:	3601      	adds	r6, #1
 8004af8:	4313      	orrs	r3, r2
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	7831      	ldrb	r1, [r6, #0]
 8004afe:	2206      	movs	r2, #6
 8004b00:	482b      	ldr	r0, [pc, #172]	; (8004bb0 <_vfiprintf_r+0x22c>)
 8004b02:	1c75      	adds	r5, r6, #1
 8004b04:	7621      	strb	r1, [r4, #24]
 8004b06:	f000 fa63 	bl	8004fd0 <memchr>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d043      	beq.n	8004b96 <_vfiprintf_r+0x212>
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <_vfiprintf_r+0x230>)
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d125      	bne.n	8004b60 <_vfiprintf_r+0x1dc>
 8004b14:	2207      	movs	r2, #7
 8004b16:	9b07      	ldr	r3, [sp, #28]
 8004b18:	3307      	adds	r3, #7
 8004b1a:	4393      	bics	r3, r2
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	9307      	str	r3, [sp, #28]
 8004b20:	6963      	ldr	r3, [r4, #20]
 8004b22:	9a04      	ldr	r2, [sp, #16]
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	6163      	str	r3, [r4, #20]
 8004b28:	e764      	b.n	80049f4 <_vfiprintf_r+0x70>
 8004b2a:	4343      	muls	r3, r0
 8004b2c:	002e      	movs	r6, r5
 8004b2e:	2101      	movs	r1, #1
 8004b30:	189b      	adds	r3, r3, r2
 8004b32:	e7a6      	b.n	8004a82 <_vfiprintf_r+0xfe>
 8004b34:	2301      	movs	r3, #1
 8004b36:	425b      	negs	r3, r3
 8004b38:	e7d0      	b.n	8004adc <_vfiprintf_r+0x158>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	001a      	movs	r2, r3
 8004b40:	3601      	adds	r6, #1
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	7831      	ldrb	r1, [r6, #0]
 8004b46:	1c75      	adds	r5, r6, #1
 8004b48:	3930      	subs	r1, #48	; 0x30
 8004b4a:	2909      	cmp	r1, #9
 8004b4c:	d903      	bls.n	8004b56 <_vfiprintf_r+0x1d2>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c5      	beq.n	8004ade <_vfiprintf_r+0x15a>
 8004b52:	9209      	str	r2, [sp, #36]	; 0x24
 8004b54:	e7c3      	b.n	8004ade <_vfiprintf_r+0x15a>
 8004b56:	4342      	muls	r2, r0
 8004b58:	002e      	movs	r6, r5
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	1852      	adds	r2, r2, r1
 8004b5e:	e7f1      	b.n	8004b44 <_vfiprintf_r+0x1c0>
 8004b60:	aa07      	add	r2, sp, #28
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	0021      	movs	r1, r4
 8004b66:	003a      	movs	r2, r7
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <_vfiprintf_r+0x234>)
 8004b6a:	9803      	ldr	r0, [sp, #12]
 8004b6c:	e000      	b.n	8004b70 <_vfiprintf_r+0x1ec>
 8004b6e:	bf00      	nop
 8004b70:	9004      	str	r0, [sp, #16]
 8004b72:	9b04      	ldr	r3, [sp, #16]
 8004b74:	3301      	adds	r3, #1
 8004b76:	d1d3      	bne.n	8004b20 <_vfiprintf_r+0x19c>
 8004b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7a:	07db      	lsls	r3, r3, #31
 8004b7c:	d405      	bmi.n	8004b8a <_vfiprintf_r+0x206>
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	059b      	lsls	r3, r3, #22
 8004b82:	d402      	bmi.n	8004b8a <_vfiprintf_r+0x206>
 8004b84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004b86:	f7ff fd17 	bl	80045b8 <__retarget_lock_release_recursive>
 8004b8a:	89bb      	ldrh	r3, [r7, #12]
 8004b8c:	065b      	lsls	r3, r3, #25
 8004b8e:	d500      	bpl.n	8004b92 <_vfiprintf_r+0x20e>
 8004b90:	e71d      	b.n	80049ce <_vfiprintf_r+0x4a>
 8004b92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b94:	e71d      	b.n	80049d2 <_vfiprintf_r+0x4e>
 8004b96:	aa07      	add	r2, sp, #28
 8004b98:	9200      	str	r2, [sp, #0]
 8004b9a:	0021      	movs	r1, r4
 8004b9c:	003a      	movs	r2, r7
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <_vfiprintf_r+0x234>)
 8004ba0:	9803      	ldr	r0, [sp, #12]
 8004ba2:	f000 f87b 	bl	8004c9c <_printf_i>
 8004ba6:	e7e3      	b.n	8004b70 <_vfiprintf_r+0x1ec>
 8004ba8:	08005510 	.word	0x08005510
 8004bac:	08005516 	.word	0x08005516
 8004bb0:	0800551a 	.word	0x0800551a
 8004bb4:	00000000 	.word	0x00000000
 8004bb8:	0800495f 	.word	0x0800495f

08004bbc <_printf_common>:
 8004bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bbe:	0016      	movs	r6, r2
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	688a      	ldr	r2, [r1, #8]
 8004bc4:	690b      	ldr	r3, [r1, #16]
 8004bc6:	000c      	movs	r4, r1
 8004bc8:	9000      	str	r0, [sp, #0]
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	da00      	bge.n	8004bd0 <_printf_common+0x14>
 8004bce:	0013      	movs	r3, r2
 8004bd0:	0022      	movs	r2, r4
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	3243      	adds	r2, #67	; 0x43
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	d001      	beq.n	8004be0 <_printf_common+0x24>
 8004bdc:	3301      	adds	r3, #1
 8004bde:	6033      	str	r3, [r6, #0]
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	069b      	lsls	r3, r3, #26
 8004be4:	d502      	bpl.n	8004bec <_printf_common+0x30>
 8004be6:	6833      	ldr	r3, [r6, #0]
 8004be8:	3302      	adds	r3, #2
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	2306      	movs	r3, #6
 8004bf0:	0015      	movs	r5, r2
 8004bf2:	401d      	ands	r5, r3
 8004bf4:	421a      	tst	r2, r3
 8004bf6:	d027      	beq.n	8004c48 <_printf_common+0x8c>
 8004bf8:	0023      	movs	r3, r4
 8004bfa:	3343      	adds	r3, #67	; 0x43
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	1e5a      	subs	r2, r3, #1
 8004c00:	4193      	sbcs	r3, r2
 8004c02:	6822      	ldr	r2, [r4, #0]
 8004c04:	0692      	lsls	r2, r2, #26
 8004c06:	d430      	bmi.n	8004c6a <_printf_common+0xae>
 8004c08:	0022      	movs	r2, r4
 8004c0a:	9901      	ldr	r1, [sp, #4]
 8004c0c:	9800      	ldr	r0, [sp, #0]
 8004c0e:	9d08      	ldr	r5, [sp, #32]
 8004c10:	3243      	adds	r2, #67	; 0x43
 8004c12:	47a8      	blx	r5
 8004c14:	3001      	adds	r0, #1
 8004c16:	d025      	beq.n	8004c64 <_printf_common+0xa8>
 8004c18:	2206      	movs	r2, #6
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d105      	bne.n	8004c30 <_printf_common+0x74>
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	68e5      	ldr	r5, [r4, #12]
 8004c28:	1aed      	subs	r5, r5, r3
 8004c2a:	43eb      	mvns	r3, r5
 8004c2c:	17db      	asrs	r3, r3, #31
 8004c2e:	401d      	ands	r5, r3
 8004c30:	68a3      	ldr	r3, [r4, #8]
 8004c32:	6922      	ldr	r2, [r4, #16]
 8004c34:	4293      	cmp	r3, r2
 8004c36:	dd01      	ble.n	8004c3c <_printf_common+0x80>
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	18ed      	adds	r5, r5, r3
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	42b5      	cmp	r5, r6
 8004c40:	d120      	bne.n	8004c84 <_printf_common+0xc8>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e010      	b.n	8004c68 <_printf_common+0xac>
 8004c46:	3501      	adds	r5, #1
 8004c48:	68e3      	ldr	r3, [r4, #12]
 8004c4a:	6832      	ldr	r2, [r6, #0]
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	42ab      	cmp	r3, r5
 8004c50:	ddd2      	ble.n	8004bf8 <_printf_common+0x3c>
 8004c52:	0022      	movs	r2, r4
 8004c54:	2301      	movs	r3, #1
 8004c56:	9901      	ldr	r1, [sp, #4]
 8004c58:	9800      	ldr	r0, [sp, #0]
 8004c5a:	9f08      	ldr	r7, [sp, #32]
 8004c5c:	3219      	adds	r2, #25
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	d1f0      	bne.n	8004c46 <_printf_common+0x8a>
 8004c64:	2001      	movs	r0, #1
 8004c66:	4240      	negs	r0, r0
 8004c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c6a:	2030      	movs	r0, #48	; 0x30
 8004c6c:	18e1      	adds	r1, r4, r3
 8004c6e:	3143      	adds	r1, #67	; 0x43
 8004c70:	7008      	strb	r0, [r1, #0]
 8004c72:	0021      	movs	r1, r4
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	3145      	adds	r1, #69	; 0x45
 8004c78:	7809      	ldrb	r1, [r1, #0]
 8004c7a:	18a2      	adds	r2, r4, r2
 8004c7c:	3243      	adds	r2, #67	; 0x43
 8004c7e:	3302      	adds	r3, #2
 8004c80:	7011      	strb	r1, [r2, #0]
 8004c82:	e7c1      	b.n	8004c08 <_printf_common+0x4c>
 8004c84:	0022      	movs	r2, r4
 8004c86:	2301      	movs	r3, #1
 8004c88:	9901      	ldr	r1, [sp, #4]
 8004c8a:	9800      	ldr	r0, [sp, #0]
 8004c8c:	9f08      	ldr	r7, [sp, #32]
 8004c8e:	321a      	adds	r2, #26
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	d0e6      	beq.n	8004c64 <_printf_common+0xa8>
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7d1      	b.n	8004c3e <_printf_common+0x82>
	...

08004c9c <_printf_i>:
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b08b      	sub	sp, #44	; 0x2c
 8004ca0:	9206      	str	r2, [sp, #24]
 8004ca2:	000a      	movs	r2, r1
 8004ca4:	3243      	adds	r2, #67	; 0x43
 8004ca6:	9307      	str	r3, [sp, #28]
 8004ca8:	9005      	str	r0, [sp, #20]
 8004caa:	9204      	str	r2, [sp, #16]
 8004cac:	7e0a      	ldrb	r2, [r1, #24]
 8004cae:	000c      	movs	r4, r1
 8004cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cb2:	2a78      	cmp	r2, #120	; 0x78
 8004cb4:	d809      	bhi.n	8004cca <_printf_i+0x2e>
 8004cb6:	2a62      	cmp	r2, #98	; 0x62
 8004cb8:	d80b      	bhi.n	8004cd2 <_printf_i+0x36>
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	d100      	bne.n	8004cc0 <_printf_i+0x24>
 8004cbe:	e0be      	b.n	8004e3e <_printf_i+0x1a2>
 8004cc0:	497c      	ldr	r1, [pc, #496]	; (8004eb4 <_printf_i+0x218>)
 8004cc2:	9103      	str	r1, [sp, #12]
 8004cc4:	2a58      	cmp	r2, #88	; 0x58
 8004cc6:	d100      	bne.n	8004cca <_printf_i+0x2e>
 8004cc8:	e093      	b.n	8004df2 <_printf_i+0x156>
 8004cca:	0026      	movs	r6, r4
 8004ccc:	3642      	adds	r6, #66	; 0x42
 8004cce:	7032      	strb	r2, [r6, #0]
 8004cd0:	e022      	b.n	8004d18 <_printf_i+0x7c>
 8004cd2:	0010      	movs	r0, r2
 8004cd4:	3863      	subs	r0, #99	; 0x63
 8004cd6:	2815      	cmp	r0, #21
 8004cd8:	d8f7      	bhi.n	8004cca <_printf_i+0x2e>
 8004cda:	f7fb fa1b 	bl	8000114 <__gnu_thumb1_case_shi>
 8004cde:	0016      	.short	0x0016
 8004ce0:	fff6001f 	.word	0xfff6001f
 8004ce4:	fff6fff6 	.word	0xfff6fff6
 8004ce8:	001ffff6 	.word	0x001ffff6
 8004cec:	fff6fff6 	.word	0xfff6fff6
 8004cf0:	fff6fff6 	.word	0xfff6fff6
 8004cf4:	003600a3 	.word	0x003600a3
 8004cf8:	fff60083 	.word	0xfff60083
 8004cfc:	00b4fff6 	.word	0x00b4fff6
 8004d00:	0036fff6 	.word	0x0036fff6
 8004d04:	fff6fff6 	.word	0xfff6fff6
 8004d08:	0087      	.short	0x0087
 8004d0a:	0026      	movs	r6, r4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	3642      	adds	r6, #66	; 0x42
 8004d10:	1d11      	adds	r1, r2, #4
 8004d12:	6019      	str	r1, [r3, #0]
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	7033      	strb	r3, [r6, #0]
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0a2      	b.n	8004e62 <_printf_i+0x1c6>
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	6809      	ldr	r1, [r1, #0]
 8004d20:	1d02      	adds	r2, r0, #4
 8004d22:	060d      	lsls	r5, r1, #24
 8004d24:	d50b      	bpl.n	8004d3e <_printf_i+0xa2>
 8004d26:	6805      	ldr	r5, [r0, #0]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	da03      	bge.n	8004d36 <_printf_i+0x9a>
 8004d2e:	232d      	movs	r3, #45	; 0x2d
 8004d30:	9a04      	ldr	r2, [sp, #16]
 8004d32:	426d      	negs	r5, r5
 8004d34:	7013      	strb	r3, [r2, #0]
 8004d36:	4b5f      	ldr	r3, [pc, #380]	; (8004eb4 <_printf_i+0x218>)
 8004d38:	270a      	movs	r7, #10
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	e01b      	b.n	8004d76 <_printf_i+0xda>
 8004d3e:	6805      	ldr	r5, [r0, #0]
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	0649      	lsls	r1, r1, #25
 8004d44:	d5f1      	bpl.n	8004d2a <_printf_i+0x8e>
 8004d46:	b22d      	sxth	r5, r5
 8004d48:	e7ef      	b.n	8004d2a <_printf_i+0x8e>
 8004d4a:	680d      	ldr	r5, [r1, #0]
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	1d08      	adds	r0, r1, #4
 8004d50:	6018      	str	r0, [r3, #0]
 8004d52:	062e      	lsls	r6, r5, #24
 8004d54:	d501      	bpl.n	8004d5a <_printf_i+0xbe>
 8004d56:	680d      	ldr	r5, [r1, #0]
 8004d58:	e003      	b.n	8004d62 <_printf_i+0xc6>
 8004d5a:	066d      	lsls	r5, r5, #25
 8004d5c:	d5fb      	bpl.n	8004d56 <_printf_i+0xba>
 8004d5e:	680d      	ldr	r5, [r1, #0]
 8004d60:	b2ad      	uxth	r5, r5
 8004d62:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <_printf_i+0x218>)
 8004d64:	2708      	movs	r7, #8
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	2a6f      	cmp	r2, #111	; 0x6f
 8004d6a:	d000      	beq.n	8004d6e <_printf_i+0xd2>
 8004d6c:	3702      	adds	r7, #2
 8004d6e:	0023      	movs	r3, r4
 8004d70:	2200      	movs	r2, #0
 8004d72:	3343      	adds	r3, #67	; 0x43
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	60a3      	str	r3, [r4, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	db03      	blt.n	8004d86 <_printf_i+0xea>
 8004d7e:	2104      	movs	r1, #4
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	438a      	bics	r2, r1
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	d102      	bne.n	8004d90 <_printf_i+0xf4>
 8004d8a:	9e04      	ldr	r6, [sp, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <_printf_i+0x10e>
 8004d90:	9e04      	ldr	r6, [sp, #16]
 8004d92:	0028      	movs	r0, r5
 8004d94:	0039      	movs	r1, r7
 8004d96:	f7fb fa4d 	bl	8000234 <__aeabi_uidivmod>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	3e01      	subs	r6, #1
 8004d9e:	5c5b      	ldrb	r3, [r3, r1]
 8004da0:	7033      	strb	r3, [r6, #0]
 8004da2:	002b      	movs	r3, r5
 8004da4:	0005      	movs	r5, r0
 8004da6:	429f      	cmp	r7, r3
 8004da8:	d9f3      	bls.n	8004d92 <_printf_i+0xf6>
 8004daa:	2f08      	cmp	r7, #8
 8004dac:	d109      	bne.n	8004dc2 <_printf_i+0x126>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d506      	bpl.n	8004dc2 <_printf_i+0x126>
 8004db4:	6862      	ldr	r2, [r4, #4]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	dc02      	bgt.n	8004dc2 <_printf_i+0x126>
 8004dbc:	2330      	movs	r3, #48	; 0x30
 8004dbe:	3e01      	subs	r6, #1
 8004dc0:	7033      	strb	r3, [r6, #0]
 8004dc2:	9b04      	ldr	r3, [sp, #16]
 8004dc4:	1b9b      	subs	r3, r3, r6
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	9b07      	ldr	r3, [sp, #28]
 8004dca:	0021      	movs	r1, r4
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	9805      	ldr	r0, [sp, #20]
 8004dd0:	9b06      	ldr	r3, [sp, #24]
 8004dd2:	aa09      	add	r2, sp, #36	; 0x24
 8004dd4:	f7ff fef2 	bl	8004bbc <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d147      	bne.n	8004e6c <_printf_i+0x1d0>
 8004ddc:	2001      	movs	r0, #1
 8004dde:	4240      	negs	r0, r0
 8004de0:	b00b      	add	sp, #44	; 0x2c
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de4:	2220      	movs	r2, #32
 8004de6:	6809      	ldr	r1, [r1, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	2278      	movs	r2, #120	; 0x78
 8004dee:	4932      	ldr	r1, [pc, #200]	; (8004eb8 <_printf_i+0x21c>)
 8004df0:	9103      	str	r1, [sp, #12]
 8004df2:	0021      	movs	r1, r4
 8004df4:	3145      	adds	r1, #69	; 0x45
 8004df6:	700a      	strb	r2, [r1, #0]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	c920      	ldmia	r1!, {r5}
 8004dfe:	0610      	lsls	r0, r2, #24
 8004e00:	d402      	bmi.n	8004e08 <_printf_i+0x16c>
 8004e02:	0650      	lsls	r0, r2, #25
 8004e04:	d500      	bpl.n	8004e08 <_printf_i+0x16c>
 8004e06:	b2ad      	uxth	r5, r5
 8004e08:	6019      	str	r1, [r3, #0]
 8004e0a:	07d3      	lsls	r3, r2, #31
 8004e0c:	d502      	bpl.n	8004e14 <_printf_i+0x178>
 8004e0e:	2320      	movs	r3, #32
 8004e10:	4313      	orrs	r3, r2
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	2710      	movs	r7, #16
 8004e16:	2d00      	cmp	r5, #0
 8004e18:	d1a9      	bne.n	8004d6e <_printf_i+0xd2>
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	4393      	bics	r3, r2
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	e7a4      	b.n	8004d6e <_printf_i+0xd2>
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	680d      	ldr	r5, [r1, #0]
 8004e28:	1d10      	adds	r0, r2, #4
 8004e2a:	6949      	ldr	r1, [r1, #20]
 8004e2c:	6018      	str	r0, [r3, #0]
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	062e      	lsls	r6, r5, #24
 8004e32:	d501      	bpl.n	8004e38 <_printf_i+0x19c>
 8004e34:	6019      	str	r1, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <_printf_i+0x1a2>
 8004e38:	066d      	lsls	r5, r5, #25
 8004e3a:	d5fb      	bpl.n	8004e34 <_printf_i+0x198>
 8004e3c:	8019      	strh	r1, [r3, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9e04      	ldr	r6, [sp, #16]
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	e7c0      	b.n	8004dc8 <_printf_i+0x12c>
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	1d11      	adds	r1, r2, #4
 8004e4a:	6019      	str	r1, [r3, #0]
 8004e4c:	6816      	ldr	r6, [r2, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	0030      	movs	r0, r6
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	f000 f8bc 	bl	8004fd0 <memchr>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d001      	beq.n	8004e60 <_printf_i+0x1c4>
 8004e5c:	1b80      	subs	r0, r0, r6
 8004e5e:	6060      	str	r0, [r4, #4]
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9a04      	ldr	r2, [sp, #16]
 8004e68:	7013      	strb	r3, [r2, #0]
 8004e6a:	e7ad      	b.n	8004dc8 <_printf_i+0x12c>
 8004e6c:	0032      	movs	r2, r6
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	9906      	ldr	r1, [sp, #24]
 8004e72:	9805      	ldr	r0, [sp, #20]
 8004e74:	9d07      	ldr	r5, [sp, #28]
 8004e76:	47a8      	blx	r5
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d0af      	beq.n	8004ddc <_printf_i+0x140>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	079b      	lsls	r3, r3, #30
 8004e80:	d415      	bmi.n	8004eae <_printf_i+0x212>
 8004e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e84:	68e0      	ldr	r0, [r4, #12]
 8004e86:	4298      	cmp	r0, r3
 8004e88:	daaa      	bge.n	8004de0 <_printf_i+0x144>
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	e7a8      	b.n	8004de0 <_printf_i+0x144>
 8004e8e:	0022      	movs	r2, r4
 8004e90:	2301      	movs	r3, #1
 8004e92:	9906      	ldr	r1, [sp, #24]
 8004e94:	9805      	ldr	r0, [sp, #20]
 8004e96:	9e07      	ldr	r6, [sp, #28]
 8004e98:	3219      	adds	r2, #25
 8004e9a:	47b0      	blx	r6
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d09d      	beq.n	8004ddc <_printf_i+0x140>
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dcf0      	bgt.n	8004e8e <_printf_i+0x1f2>
 8004eac:	e7e9      	b.n	8004e82 <_printf_i+0x1e6>
 8004eae:	2500      	movs	r5, #0
 8004eb0:	e7f7      	b.n	8004ea2 <_printf_i+0x206>
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	08005521 	.word	0x08005521
 8004eb8:	08005532 	.word	0x08005532

08004ebc <__swhatbuf_r>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	000e      	movs	r6, r1
 8004ec0:	001d      	movs	r5, r3
 8004ec2:	230e      	movs	r3, #14
 8004ec4:	5ec9      	ldrsh	r1, [r1, r3]
 8004ec6:	0014      	movs	r4, r2
 8004ec8:	b096      	sub	sp, #88	; 0x58
 8004eca:	2900      	cmp	r1, #0
 8004ecc:	da0c      	bge.n	8004ee8 <__swhatbuf_r+0x2c>
 8004ece:	89b2      	ldrh	r2, [r6, #12]
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	4019      	ands	r1, r3
 8004ed6:	421a      	tst	r2, r3
 8004ed8:	d013      	beq.n	8004f02 <__swhatbuf_r+0x46>
 8004eda:	2100      	movs	r1, #0
 8004edc:	3b40      	subs	r3, #64	; 0x40
 8004ede:	2000      	movs	r0, #0
 8004ee0:	6029      	str	r1, [r5, #0]
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	b016      	add	sp, #88	; 0x58
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}
 8004ee8:	466a      	mov	r2, sp
 8004eea:	f000 f84d 	bl	8004f88 <_fstat_r>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	dbed      	blt.n	8004ece <__swhatbuf_r+0x12>
 8004ef2:	23f0      	movs	r3, #240	; 0xf0
 8004ef4:	9901      	ldr	r1, [sp, #4]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	4019      	ands	r1, r3
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <__swhatbuf_r+0x4c>)
 8004efc:	18c9      	adds	r1, r1, r3
 8004efe:	424b      	negs	r3, r1
 8004f00:	4159      	adcs	r1, r3
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	e7ea      	b.n	8004ede <__swhatbuf_r+0x22>
 8004f08:	ffffe000 	.word	0xffffe000

08004f0c <__smakebuf_r>:
 8004f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0e:	2602      	movs	r6, #2
 8004f10:	898b      	ldrh	r3, [r1, #12]
 8004f12:	0005      	movs	r5, r0
 8004f14:	000c      	movs	r4, r1
 8004f16:	4233      	tst	r3, r6
 8004f18:	d006      	beq.n	8004f28 <__smakebuf_r+0x1c>
 8004f1a:	0023      	movs	r3, r4
 8004f1c:	3347      	adds	r3, #71	; 0x47
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	2301      	movs	r3, #1
 8004f24:	6163      	str	r3, [r4, #20]
 8004f26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004f28:	466a      	mov	r2, sp
 8004f2a:	ab01      	add	r3, sp, #4
 8004f2c:	f7ff ffc6 	bl	8004ebc <__swhatbuf_r>
 8004f30:	9900      	ldr	r1, [sp, #0]
 8004f32:	0007      	movs	r7, r0
 8004f34:	0028      	movs	r0, r5
 8004f36:	f7fe fec5 	bl	8003cc4 <_malloc_r>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d108      	bne.n	8004f50 <__smakebuf_r+0x44>
 8004f3e:	220c      	movs	r2, #12
 8004f40:	5ea3      	ldrsh	r3, [r4, r2]
 8004f42:	059a      	lsls	r2, r3, #22
 8004f44:	d4ef      	bmi.n	8004f26 <__smakebuf_r+0x1a>
 8004f46:	2203      	movs	r2, #3
 8004f48:	4393      	bics	r3, r2
 8004f4a:	431e      	orrs	r6, r3
 8004f4c:	81a6      	strh	r6, [r4, #12]
 8004f4e:	e7e4      	b.n	8004f1a <__smakebuf_r+0xe>
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	89a2      	ldrh	r2, [r4, #12]
 8004f54:	6020      	str	r0, [r4, #0]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	9b00      	ldr	r3, [sp, #0]
 8004f5c:	6120      	str	r0, [r4, #16]
 8004f5e:	6163      	str	r3, [r4, #20]
 8004f60:	9b01      	ldr	r3, [sp, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <__smakebuf_r+0x74>
 8004f66:	0028      	movs	r0, r5
 8004f68:	230e      	movs	r3, #14
 8004f6a:	5ee1      	ldrsh	r1, [r4, r3]
 8004f6c:	f000 f81e 	bl	8004fac <_isatty_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d005      	beq.n	8004f80 <__smakebuf_r+0x74>
 8004f74:	2303      	movs	r3, #3
 8004f76:	89a2      	ldrh	r2, [r4, #12]
 8004f78:	439a      	bics	r2, r3
 8004f7a:	3b02      	subs	r3, #2
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	433b      	orrs	r3, r7
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	e7ce      	b.n	8004f26 <__smakebuf_r+0x1a>

08004f88 <_fstat_r>:
 8004f88:	2300      	movs	r3, #0
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	4d06      	ldr	r5, [pc, #24]	; (8004fa8 <_fstat_r+0x20>)
 8004f8e:	0004      	movs	r4, r0
 8004f90:	0008      	movs	r0, r1
 8004f92:	0011      	movs	r1, r2
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	f7fb fb2b 	bl	80005f0 <_fstat>
 8004f9a:	1c43      	adds	r3, r0, #1
 8004f9c:	d103      	bne.n	8004fa6 <_fstat_r+0x1e>
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d000      	beq.n	8004fa6 <_fstat_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	20000200 	.word	0x20000200

08004fac <_isatty_r>:
 8004fac:	2300      	movs	r3, #0
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	4d06      	ldr	r5, [pc, #24]	; (8004fcc <_isatty_r+0x20>)
 8004fb2:	0004      	movs	r4, r0
 8004fb4:	0008      	movs	r0, r1
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	f7fb fb28 	bl	800060c <_isatty>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d103      	bne.n	8004fc8 <_isatty_r+0x1c>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d000      	beq.n	8004fc8 <_isatty_r+0x1c>
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	20000200 	.word	0x20000200

08004fd0 <memchr>:
 8004fd0:	b2c9      	uxtb	r1, r1
 8004fd2:	1882      	adds	r2, r0, r2
 8004fd4:	4290      	cmp	r0, r2
 8004fd6:	d101      	bne.n	8004fdc <memchr+0xc>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	4770      	bx	lr
 8004fdc:	7803      	ldrb	r3, [r0, #0]
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d0fb      	beq.n	8004fda <memchr+0xa>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	e7f6      	b.n	8004fd4 <memchr+0x4>
	...

08004fe8 <_init>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr

08004ff4 <_fini>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr
